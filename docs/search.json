[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "챗GPT 코딩",
    "section": "",
    "text": "서문",
    "crumbs": [
      "서문"
    ]
  },
  {
    "objectID": "index.html#감사의-글",
    "href": "index.html#감사의-글",
    "title": "챗GPT 코딩",
    "section": "감사의 글",
    "text": "감사의 글",
    "crumbs": [
      "서문"
    ]
  },
  {
    "objectID": "01-intro.html",
    "href": "01-intro.html",
    "title": "1  프로그래밍 학습 이유",
    "section": "",
    "text": "1.1 창의성과 동기\n이책은 직업으로 프로그래밍을 하는 사람을 위해서 저작된 것은 아니지만, 직업적으로 프로그램을 만드는 작업은 개인적으로나 경제적인면에서 꽤 매력적인 일이다. 특히, 유용하며, 심미적이고, 똑똑한 프로그램을 다른 사람이 사용할 수 있도록 만드는 것은 매우 창의적인 활동이다. 다양한 그룹의 프로그래머들이 사용자의 관심과 시선을 차지하기 위해서 경쟁적으로 작성한 다양한 종류의 프로그램이 여러분의 컴퓨터와 개인 휴대 정보 단말기(Personal Digital Assistant, PDA)에 담겨있다. 이렇게 개발된 프로그램은 사용자가 원하는 바를 충족시키고 훌륭한 사용자 경험을 제공하려고 노력한다. 몇몇 상황에서 사용자가 소프트웨어를 골라 구매하게 될 때, 고객의 선택에 대해 프로그래머는 바로 경제적 보상을 받게 된다.\n만약 프로그램을 프로그래머 집단의 창의적인 결과물로 생각해본다면, 아마도 다음 그림이 좀더 의미 있는 PDA 컴퓨터 혹은 스마트폰으로 보일 것이다.\n우선은 프로그래을 만드는 주된 동기가 사업을 한다던가 사용자를 기쁘게 한다기보다, 일상생활에서 맞닥뜨리는 자료와 정보를 잘 다뤄 좀더 생산적으로 우리의 삶을 만드는데 초점을 잡아본다. 프로그램을 만들기 시작할 때, 여러분 모두는 프로그래머이면서 동시에 자신이 만든 프로그램의 사용자가 된다. 프로그래머로서 기술을 습득하고 프로그래밍 자체가 좀더 창의적으로 느껴진다면, 여러분은 다른 사람을 위해 프로그램을 개발하게 준비가 된 것이다.",
    "crumbs": [
      "들어가며",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>프로그래밍 학습 이유</span>"
    ]
  },
  {
    "objectID": "01-intro.html#r-intro-motivation",
    "href": "01-intro.html#r-intro-motivation",
    "title": "1  프로그래밍 학습 이유",
    "section": "",
    "text": "컴퓨터 소개",
    "crumbs": [
      "들어가며",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>프로그래밍 학습 이유</span>"
    ]
  },
  {
    "objectID": "01-intro.html#r-intro-hardware-architecture",
    "href": "01-intro.html#r-intro-hardware-architecture",
    "title": "1  프로그래밍 학습 이유",
    "section": "\n1.2 컴퓨터 하드웨어 아키텍처",
    "text": "1.2 컴퓨터 하드웨어 아키텍처\n소프트웨어 개발을 위해 컴퓨터에 지시 명령어를 전달하기 위한 컴퓨터 언어를 학습하기 전에, 컴퓨터가 어떻게 구성되어 있는지 이해할 필요가 있다. 컴퓨터 혹은 핸드폰을 분해해서 안쪽을 살펴보면, 다음과 같은 주요 부품을 확인할 수 있다.\n주요 부품의 상위 수준 정의는 다음과 같다.\n\n\n컴퓨터 아키텍처\n\n\n\n중앙처리장치(Central Processing Unit, CPU): 다음 무엇을 할까요? (“What is next?”) 명령어를 처리하는 컴퓨터의 주요 부분이다. 만약 컴퓨터 중앙처리장치가 3.0 GHz 라면, 초당 명령어 (다음 무엇을 할까요? What is next?)를 삼백만번 처리할 수 있다는 것이다. CPU 처리속도를 따라서 빠르게 컴퓨터와 어떻게 대화하는지 학습할 것이다.\n\n주기억장치(Main Memory): 주기억장치는 중앙처리장치(CPU)가 급하게 명령어를 처리하기 하는데 필요한 정보를 저장하는 용도로 사용된다. 주기억장치는 중앙처리장치만큼이나 빠르다. 그러나 주기억장치에 저장된 정보는 컴퓨터가 꺼지면 자동으로 지워진다.\n\n보조 기억장치(Secondary Memory): 정보를 저장하기 위해 사용되지만, 주기억장치보다 속도는 느리다. 전기가 나갔을 때도 정보를 기억하는 것은 장점이다. 휴대용 USB나 휴대용 MP3 플레이어에 사용되는 USB 플래쉬 메모리나 디스크 드라이브가 여기에 속한다.\n\n입출력장치(Input Output Devices): 간단하게 화면, 키보드, 마우스, 마이크, 스피커, 터치패드가 포함된다. 컴퓨터와 사람이 상호작용하는 모든 방식이 포함된다.\n\n네트워크(Network): 요즘 거의 모든 컴퓨터는 네트워크로 정보를 주고 받는 네트워크 연결(Network Connection) 하드웨어가 있다. 네트워크는 항상 “이용가능” 하지 않을지도 모르는 데이터를 저장하고 가져오는 매우 느린 저장소로 볼 수 있다. 그러한 점에서 네트워크는 좀더 느리고, 때때로 신뢰성이 떨어지는 보조 기억장치(Secondary Memory)의 한 형태로 볼 수 있다.\n\n주요 부품들이 어떻게 작동하는지에 대한 세세한 사항은 컴퓨터 제조자에게 맡겨져 있지만, 프로그램을 작성할 때 컴퓨터 주요 부품에 대해서 언급되어서, 컴퓨터 전문용어를 습득하고 이해하는 것은 도움이 된다.\n프로그래머로서 임무는 자료를 분석하고 문제를 해결하도록, 컴퓨터 자원 각각을 사용하고 조율하는 것이다. 프로그래머로서 대체로 CPU와 “대화”해서 다음 무엇을 실행하라고 지시한다. 때때로 CPU에 주기억장치, 보조기억장치, 네트워크, 혹은 입출력장치도 사용하라고 지시한다.\n\n\n컴퓨터 아키텍처 여러분\n\n프로그래머는 컴퓨터의 “다음 무엇을 수행할까요?”에 대한 답을 하는 사람이기도 하다. 하지만, 컴퓨터에 답하기 위해서 5mm 크기로 프로그래머를 컴퓨터에 집어넣고 초당 30억개 명령어로 답을 하게 만드는 것은 매우 불편하다. 그래서, 대신에 미리 컴퓨터에게 수행할 명령문을 작성해야 한다. 이렇게 미리 작성된 명령문 집합을 프로그램(Program)이라고 하며, 명령어 집합을 작성하고 명령어 집합이 올바르게 작성될 수 있도록 하는 행위를 프로그래밍(Programming)이라고 부른다.",
    "crumbs": [
      "들어가며",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>프로그래밍 학습 이유</span>"
    ]
  },
  {
    "objectID": "01-intro.html#r-intro-programming",
    "href": "01-intro.html#r-intro-programming",
    "title": "1  프로그래밍 학습 이유",
    "section": "\n1.3 프로그래밍 이해하기",
    "text": "1.3 프로그래밍 이해하기\n책의 나머지 장을 통해서 책을 읽고 있는 여러분을 프로그래밍 장인으로 인도할 것이다. 종국에는 책을 읽고 있는 여러분 모두 프로그래머가 될 것이다. 아마도 전문적인 프로그래머는 아닐지라도 적어도 자료/정보 분석 문제를 보고 그 문제를 해결할 수 있는 기술을 가지게는 될 것이다.\n이런 점에서 프로그래머가 되기 위해서 두 가지 기술이 필요하다.\n\n첫째, R 혹은 파이썬(Pythong)같은 프로그래밍 언어 - 어휘와 문법을 알 필요가 있다. 단어를 새로운 언어에 맞추어 작성할 수 있어야 하며 새로운 언어로 잘 표현된 “문장”으로 어떻게 작성하는지도 알아야 한다.\n둘째, 스토리(Story)를 말 할 수 있어야 한다. 스토리를 작성할 때, 독자에게 아이디어(idea)를 전달하기 위해서 단어와 문장을 조합합니다. 스토리를 구성할 때 기술적인 면과 예술적인 면이 있는데, 기술적인 면은 쓰기 연습을 반복하고, 피트백을 받아 향상된다. 프로그래밍에서, 우리가 작성하는 프로그램은 “스토리”가 되고, 해결하려고 하는 문제는 “아이디어”에 해당된다.\n\nR 혹은 파이썬과 같은 프로그래밍 언어를 배우게 되면, 자바스크립트나 C++, 고(Go) 같은 두번째 언어를 배우는 것은 무척이나 쉽다. 새로운 프로그래밍 언어는 매우 다른 어휘와 문법을 갖지만, 문제를 해결하는 기술을 배우면, 다른 모든 프로그래밍 언어를 통해서 동일하게 접근할 수 있습니다.\n파이썬 어휘와 문장은 매우 빠르게 학습할 수 있다. 새로운 종류의 문제를 풀기 위해 논리적인 프로그램을 작성하는 것은 더 오래 걸린다. 여러분은 작문을 배우듯이 프로그래밍을 배우게 된다. 프로그래밍을 읽고 설명하는 것으로 시작해서, 간단한 프로그램을 작성하고, 점차적으로 복잡한 프로그램을 작성할 것이다. 어느 순간에 명상에 잠기게 되고, 스스로 패턴이 눈에 들어오게 된다. 그러면, 좀더 자연스럽게 문제를 어떻게 받아들이고, 그 문제를 해결할 수 있는 프로그램을 작성하게 된다. 마지막으로, 그 순간에 도착하게 되면, 프로그래밍은 매우 즐겁고 창의적인 과정이 된다.\n파이썬 프로그램의 어휘와 구조로 시작한다. 간단한 예제가 처음으로 언제 프로그램을 읽기 시작했는지를 상기시켜주니 인내심을 가지세요.",
    "crumbs": [
      "들어가며",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>프로그래밍 학습 이유</span>"
    ]
  },
  {
    "objectID": "01-intro.html#r-intro-word-sentence",
    "href": "01-intro.html#r-intro-word-sentence",
    "title": "1  프로그래밍 학습 이유",
    "section": "\n1.4 단어와 문장",
    "text": "1.4 단어와 문장\n사람 언어와 달리, R 어휘는 사실 매우 적다. R 어휘를 예약어(researved words)로 부른다. 이들 단어는 R에 매우 특별한 의미를 부여한다. R 프로그램 관점에서 R이 이들 단어를 보게 되면, R에게는 단 하나의 유일한 의미를 갖는다. 나중에 여러분들이 프로그램을 작성할 때, 자신만의 단어를 작성하는데 이를 변수(Variable)라고 한다. 변수 이름을 지을 때 폭넓은 자유를 갖지만, 변수 이름으로 파이썬 예약어를 사용할 수는 없다.\n이런 점에서 강아지를 훈련시킬 때 “걸어(walk)”, “앉아”, “기달려”, “가져와” 같은 특별한 어휘를 사용한다. 강아지에게 이와 같은 특별한 예약어를 사용하지 않을 때는, 주인이 특별한 어휘를 사용할 때까지 강아지는 주인을 물끄러미 쳐다보기만 한다. 예를 들어, “더 많은 사람들의 건강을 전반적으로 향상하는 방향으로 동참하여”걷기(walk)“를 원한다”고 말하면, 강아지가 듣는 것은 “뭐라 뭐라 뭐라 걷기(walk) 뭐라”와 같이 들릴 것이다. 왜냐하면 “걸어(walk)”가 강아지 언어에는 예약어1이기 때문이다. 이러한 사실이 아마도 개와 고양이사이에는 어떠한 예약어도 존재하지 않는다는 것을 의미할지 모른다.\n사람이 R과 대화하는 언어 예약어는 다음과 같다. R 콘솔에서 ? researved 명령어를 입력하면 자세한 내용을 파악할 수 있다. 파이썬과 비교해도 상대적으로 데이터 분석에 집중된 것을 예약어만을 통해서도 쉽게 파악된다.\n\n\n\n\n\n\nR 예약어\n설명\n\n\n\nIf, else, repeat, while, function, for, in, next, break\n조건, 함수, 반복문에 사용\n\n\nTRUE, FALSE\n논리 상수(Logical constants)\n\n\nNULL\n정의되지 않는 값 혹은 값이 없음을 표현\n\n\nInf\n무한(Infinity)\n\n\nNaN\n숫자가 아님(Not a Number)\n\n\nNA\n결측값, 값이 없음 (Not Available)\n\n\nNA_integer_, NA_real_, NA_complex_, NA_character_\n결측값 처리하는 상수\n\n\n…\n함수가 다른 함수에 인자를 전달하도록 지원\n\n\n\n강아지 사례와 사뭇 다르게 R은 이미 완벽하게 훈련이 되어 있다. 여러분이 “try” 라고 말하면, 매번 “try” 라고 말할 때마다 실패 없이 R은 항시 정확히 시도한다.\n상기 예약어를 학습하고, 어떻게 잘 사용되는지도 함께 학습할 것이지만, 지금은 파이썬에 말하는 것에 집중할 것이다. R과 대화하는 것 중 좋은 점은 다음과 같이 괄호내부에 인용부호로 감싸 메세지를 던지는 것만으로도 R에 말을 할 수 있다는 것이다.\n\nprint(\"헬로 월드!\")\n#&gt; [1] \"헬로 월드!\"\n\n상기 간단한 문장은 R 구문(Syntax)론적으로도 완벽하다. 상기 문장은 예약어 ’print’로 시작해서 출력하고자 하는 문자열을 괄호내부에 작은 따옴표로 감싸서 올바르게 R에게 전달했다.",
    "crumbs": [
      "들어가며",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>프로그래밍 학습 이유</span>"
    ]
  },
  {
    "objectID": "01-intro.html#r-intro-conversation",
    "href": "01-intro.html#r-intro-conversation",
    "title": "1  프로그래밍 학습 이유",
    "section": "\n1.5 R과 대화하기",
    "text": "1.5 R과 대화하기\nR로 우리가 알고 있는 단어를 가지고 간단한 문장을 만들었으니 이제부터는 새로운 언어 기술을 시험하기 위해서 파이썬과 대화를 어떻게 시작하는지 알 필요가 있다.\nR과 대화를 시작하기 전에, R 소프트웨어를 컴퓨터에 설치하고 R을 컴퓨터에서 어떻게 실행하는지를 학습해야 한다. 이번 장에서 다루기에는 너무 구체적이고 자세한 사항이기 때문에 챗GPT 쿼토 저작환경 설정을 참조하는 것을 권한다. 윈도우와 리눅스, 매킨토쉬 시스템 상에서 설치하고 실행하는 방법을 자세한 설치절차와 함께 화면을 캡쳐하여 다양한 환경에서 설명해 놨다. 설치가 마무리되고 터미널이나 윈도우 명령어 실행창에서 R을 타이핑 하게 되면, R 인터프리터가 인터랙티브 모드로 실행을 시작하고 다음과 같은 것이 화면에 뿌려진다. 개념과 컴퓨터와 의사소통하는 방식은 표현방법과 구문이 다를 뿐 파이썬도 동일하다.\n\n\nR\n파이썬\n\n\n\n\n  Loading webR, please wait...\n  \n  \n    &gt;\n    Run\n  \n\n\n\n\n\nPython 3.11.8 (tags/v3.11.8:db85d51, Feb  6 2024, 22:03:32) [MSC v.1937 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n\n\n\n\nR 인터프리터는 &gt; 프롬프트를 통해서 여러분에게 요청사항(“다음에 R이 무엇을 실행하기를 원합니까?”)을 접수받는 방식을 취한다. 이제 R은 여러분과 대화를 나눌 준비가 되었다. 이제 남은 것은 R 언어로 어떻게 말하고 어떻게 R과 대화하는지 아는 것이다.\n예를 들어, 여러분이 가장 간단한 R 언어 단어나 문장 조차도 알 수가 없다고 가정하자. 우주 비행사가 저 멀리 떨어진 행성에 착륙해서 행성의 거주민과 대화를 시도할 때 사용하는 간단한 말을 사용해 보자.\n\n&gt; I come in peace, please take me to your leader\nError: unexpected symbol in \"I come\"\n&gt; \n\n잘 되는 것 같지 않다. 뭔가 빨리 다른 생각을 내지 않는다면, 행성 거주민은 여러분을 창으로 찌르고, 침으로 바르고, 불위 잘 구워 바베큐로 만들어 저녁으로 먹을 듯 하다.\n운 좋게도 기나긴 우주 여행 중 이 책의 복사본을 가지고 와서 다음과 같이 빠르게 타이핑한다고 생각하자.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n훨씬 좋아보인다. 이제 좀더 커뮤니케이션을 이어갈 수 있을 것으로 보인다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n이번 대화는 잠시 동안 잘 진행되다가 여러분이 R 언어로 말하는데 정말 사소한 실수를 저질러 R이 다시 창을 여러분에게 겨눈다.\n이 시점에 R은 놀랍도록 복잡하고 강력하며 R과 의사소통을 할 때 사용하는 구문(syntax)은 매우 까다롭다는 것은 알 수 있다. R은 다른 말로 안 똑똑(Intelligent)하다. 지금까지 여러분은 자신과 대화를 적절한 구문(syntax)을 사용해서 대화했다.\n여러분이 다른 사람이 작성한 프로그램을 사용한다는 것은 R을 사용하는 다른 프로그래머가 R을 중간 매개체로 사용하여 대화한 것으로 볼 수 있다. 프로그램을 만든 저작자가 대화를 어떻게 진행되어져야 하는지를 표현하는 방식이다. 다음 몇 장에 걸쳐서 다른 많은 프로그래머 중의 한명처럼, R로 여러분이 작성한 프로그램을 이용하는 사용자와 대화하게 된다.\nR 인터프리터와 첫번째 대화를 끝내기 전에, R 행성의 거주자에게 “안녕히 계세요”를 말하는 적절한 방법도 알아야 한다.\n\ngood-bye\nif you don not mind, I need to leave\nquit(\"yes\")\n\n상기 처음 두개 시도는 다른 오류 메세지를 출력한다. 두번째 오류는 다른데 이유는 if가 예약어이기 때문에 R은 이 예약어를 보고 뭔가 다른 것을 말한다고 생각하지만, 잠시 후 구문이 잘못됐다고 판정하고 오류를 뱉어낸다.\nR에 “안녕히 계세요”를 말하는 올바른 방식은 인터렉티브 &gt; 프롬프트에서 quit() 혹은 q()를 입력하는 것이다.\n\n\n\n\n\n\n전문용어: 인터프리터와 컴파일러\n\n\n\nR은 상대적으로 직접 사람이 읽고 쓸 수도 있고, 컴퓨터도 읽고 처리할 수 있도록 고안된 하이 레벨(High-level), 고수준 언어이다. 다른 하이 레벨 언어에는 자바, C++, PHP, 루비, 베이직, 펄, 자바스크립트 등 다수가 포함되어 있다. 실제 하드웨어 중앙처리장치(CPU)내에서는 하이레벨 언어를 조금도 이해하지 못한다.\n중앙처리장치는 우리가 기계어(machine-language)로 부르는 언어만 이해한다. 기계어는 매우 간단하고 솔직히 작성하기에는 매우 귀찮다. 왜냐하면 모두 0과 1로만 표현되기 때문이다.\n\n01010001110100100101010000001111\n11100110000011101010010101101101\n...\n\n표면적으로 0과 1로만 되어 있기 때문에 기계어가 간단해 보이지만, 구문은 매우 복잡하고 R보다 훨씬 어렵다. 그래서 매우 소수의 프로그래머만이 기계어로 작성할 수 있다. 대신에, 프로그래머가 파이썬과 자바스크립트 같은 하이 레벨 언어로 작성할 수 있게 다양한 번역기(translator)를 만들었다.\n이러한 번역기는 프로그램을 중앙처리장치에 의해서 실제 실행이 가능한 기계어로 변환한다.\n기계어는 특정 컴퓨터 하드웨어에 묶여있기 때문에 기계어는 다른 형식의 하드웨어에는 이식(portable)되지 않는다. 하이 레벨 언어로 작성된 프로그램은 두 가지 방식으로 이기종의 컴퓨터로 이식이 가능하다. 한 방법은 새로운 하드웨어에 맞게 기계어를 재컴파일(recompile)하는 것이고, 다른 방법은 새로운 하드웨어에 맞는 다른 인터프리터를 이용하는 것이다.\n프로그래밍 언어 번역기는 일반적으로 두가지 범주가 있다.\n\n인터프리터(Interpreter)\n컴파일러(Compiler)\n\n인터프리터는 프로그래머가 코드를 작성할 때 소스 코드를 읽고, 소스코드를 파싱하고, 즉석에서 명령을 해석한다. R은 인터프리터다. 따라서, R을 인터렉트브 모드로 실행할 때, R 명령문(한 문장)을 작성하면, R이 즉석에서 처리하고, 사용자가 다른 R 명령어를 입력하도록 준비를 한다.\nR 코드의 일부는 나중에 사용될 것이니 R에게 기억하도록 명령한다. 적당한 이름을 골라서 값을 기억시키고, 나중에 그 이름을 호출하여 값을 사용한다. 이러한 목적으로 저장된 값을 참조하는 목적으로 사용되는 표식(label)을 변수(variable)라고 한다.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n상기 예제에서 R이 값 6 을 기억하고 있다가, 라벨 x를 사용하여 나중에 값을 가져오게 만들었다. 파이썬의 경우 print 예약어를 사용하여 파이썬이 잘 기억하고 있는지를 검증한다. 하지만, R이 파이썬과 비교하여 차이가 나는 점은 인터랙티브 방식으로 데이터 분석에 장점을 갖고 있어 바로 변수명 혹은 다른 자료구조명(요인, 데이터프레임 등)을 입력하면 변수명에 들어 있는 내용을 즉각 파악가능하다.\nx를 가져와서 7을 곱하고 새로운 변수 y에 값을 집어 넣는다. 그리고 y에 현재 무슨 값이 저장되었는지 출력하라고 R에게 지시한다.\n한줄 한줄 R에 명령어를 입력하고 있지만, 앞쪽 명령문에서 생성된 자료가 뒤쪽 실행 명령문에서 사용될 수 있도록 R은 순차적으로 정렬된 문장으로 처리한다. 방금전 논리적이고 의미있는 순서로 4줄 명령문을 간단하게 한 단락으로 작성했다.\n위에서 본 것처럼 R과 인터랙티브하게 대화를 주고받는 것이 인터프리터의 본질이다. 컴파일러가 동작하기 위해서는 먼저 완전한 프로그램을 파일 하나에 담고, 하이 레벨 소스코드를 기계어로 번역하는 과정을 거치고, 마지막으로 나중에 실행되도록 변환된 기계어를 파일에 담는다.\n윈도우를 사용한다면, 실행가능한 기계어 프로그램 확장자가 “.exe”(executable), 혹은 “.dll”(dynamically loadable library)임을 확인할 수 있다. 리눅스와 매킨토쉬에는 실행파일을 의미하는 특정 확장자는 없다.\n텍스트 편집기에서 실행파일을 열게 되면, 다음과 같이 읽을 수 없는 좀 괴상한 출력결과를 화면상에서 확인한다.\n\n^?ELF^A^A^A^@^@^@^@^@^@^@^@^@^B^@^C^@^A^@^@^@\\xa0\\x82\n^D^H4^@^@^@\\x90^]^@^@^@^@^@^@4^@ ^@^G^@(^@$^@!^@^F^@\n^@^@4^@^@^@4\\x80^D^H4\\x80^D^H\\xe0^@^@^@\\xe0^@^@^@^E\n^@^@^@^D^@^@^@^C^@^@^@^T^A^@^@^T\\x81^D^H^T\\x81^D^H^S\n^@^@^@^S^@^@^@^D^@^@^@^A^@^@^@^A\\^D^HQVhT\\x83^D^H\\xe8\n....\n\n기계어를 읽고 쓰는 것은 쉽지 않다. 그래서 C 나 R, 파이썬 같은 하이 레벨 언어로 작성된 프로그램을 기계어로 자동 번역해주는 인터프리터와 컴파일러가 있다는 것은 멋진 일이다.\n컴파일러와, 인터프리터를 논의하는 이 시점에, R 인터프리터 자체에 대해서 약간 궁금해야 한다. 무슨 언어로 작성되었을까? 컴파일된 언어로 작성되었을까? “R”을 타이핑하게 될 때, 정확하게 무슨 일이 일어나는걸까?\nR 인터프리터는 하이 레벨 언어 “C”로 작성되었다. R 인터프리터 실제 소스 코드를 보려면, https://www.r-project.org/ 웹사이트에 가서 여러분의 방식으로 개발할 수 있는 소스코드를 확인할 수 있다. 그래서, R 그 자체도 프로그램이다. 기계어로 컴파일되어 있어서 R을 여러분의 컴퓨터에 설치(혹은 컴퓨터 제조자가 설치를 대신 해주기도 함)한다는 것은 번역된 R 프로그램 기계어 코드 사본을 여러분 컴퓨터에 복사하는 것에 불과하다. 윈도우 시스템에서 R 실행가능한 기계어 코드는 파일에 다음과 같은 이름을 갖는다.\n\nC:\\Program Files\\R\\R-4.2.0\\bin\\R.exe\n\n지금까지 살펴본 것은 R 프로그래머가 되기 위해서 정말 알 필요가 있는 것 이상이다. 하지만, 때때로 처음에 이런 귀찮은 질문에 바로 답하는 것이 나중에 보상을 충분히 하고도 남는다.",
    "crumbs": [
      "들어가며",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>프로그래밍 학습 이유</span>"
    ]
  },
  {
    "objectID": "01-intro.html#r-intro-write-program",
    "href": "01-intro.html#r-intro-write-program",
    "title": "1  프로그래밍 학습 이유",
    "section": "\n1.6 프로그램 작성하기",
    "text": "1.6 프로그램 작성하기\nR 인터프리터에 명령어를 타이핑 하는 것은 R 주요 기능을 알아보는 좋은 방법이지만, 좀더 복잡한 문제를 해결하는데 권하지는 않는다.\n프로그램을 작성할 때, 텍스트 편집기를 사용해서 스크립트(script)로 불리는 파일에 명령어 집합을 작성한다. 관례로, R 스크립트 확장자는 .R가 된다.\n스크립트를 실행하기 위해서, R 인터프리터에 파일 이름을 넘겨준다. 유니스나 윈도우 명령창에서 R hello.R 를 입력하게 되면 다음과 같은 결과를 얻는다.\n\n$ cat hello.R\nprint(\"헬로 월드!\")\n$ R hello.R\n\"헬로 월드!\"\n$\n\n“$”은 운영시스템 명령어 프롬프트이고, “R hello.R”는 문자열을 출력하는 한줄 R 프로그램을 담고 있는 “hello.R” 파일을 화면에 출력하라는 명령어다.\n인터랙트브 모드에서 R 코드 입력하는 방식 대신에 R 인터프리터를 호출해서 “hello.R” 파일로부터 소스코드를 읽도록 지시한다.\n이 새로운 방식은 R 프로그램을 끝마치기 위해 quit()를 사용할 필요가 없다는 점에서 편리하다. 파일에서 소스코드를 읽을 때, 파일 끝까지 읽게 되면 자동으로 R이 종료된다.",
    "crumbs": [
      "들어가며",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>프로그래밍 학습 이유</span>"
    ]
  },
  {
    "objectID": "01-intro.html#r-intro-what-is-a-program",
    "href": "01-intro.html#r-intro-what-is-a-program",
    "title": "1  프로그래밍 학습 이유",
    "section": "\n1.7 프로그램이란 무엇인가?",
    "text": "1.7 프로그램이란 무엇인가?\n프로그램(Program)의 가장 본질적인 정의는 특정 작업을 수행할 수 있도록 조작된 일련의 R 문장의 집합이다. 가장 간단한 hello.R 스크립트도 프로그램이다. 한줄의 프로그램이 특별히 유익하고 쓸모가 있는 것은 아니지만 엄격한 의미에서 R 프로그램이 맞다.\n프로그램을 이해하는 가장 쉬운 방법은 프로그램이 해결하려고 만들어진 문제를 먼저 생각해보고 나서, 그 문제를 풀어가는 프로그램을 살펴보는 것이다.\n예를 들어, 페이스북에 게시된 일련의 글에서 가장 자주 사용된 단어에 관심을 가지고 소셜 컴퓨팅 연구를 한다고 생각해 봅시다. 페이스북에 게시된 글들을 쭉 출력해서 가장 흔한 단어를 찾으려고 열심히 들여다 볼 것이지만, 매우 오래 걸리고 실수하기도 쉽다. 하지만 R 프로그램을 작성해서 빨리 정확하게 작업을 마무리한다면 똑똑하게 주말을 재미나게 보낼 수 있다.\n예를 들어 자동차(car)와 광대(clown)에 관한 다음 텍스트에서, 가장 많이 나오는 단어가 무엇이며 몇번 나왔는지 세어보세요.\n\nthe clown ran after the car and the car ran into the tent\nand the tent fell down on the clown and the car\n\n그리고 나서, 몇 백만줄의 텍스트를 보고서 동일한 일을 한다고 상상해 보자. 솔직히 수작업으로 단어를 세는 것보다 R을 배워 프로그램을 작성하는 것이 훨씬 빠를 것이다.\n더 좋은 소식은 이미 텍스트 파일에서 가장 자주 나오는 단어를 찾아내는 간단한 프로그램을 개발했다. 저자가 직접 작성했고, 시험까지 했다. 바로 사용을 할 수 있도록 준비했기 때문에 여러분의 수고도 덜 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기 프로그램을 사용하려고 R을 공부할 필요도 없다. 앞으로 여러장에 걸쳐서 멋진 R 프로그램을 만드는 방법을 배우게 될 것이다. 지금 여러분은 단순 사용자로서 단순히 상기 프로그램을 사용하게 되면, 프로그램의 영리함과 동시에 얼마나 많은 수작업 노력을 줄일 수 있는지 감탄할 것이다. 단순하게 코드를 타이핑해서 words.R 파일로 저장하고 실행을 하거나, https://github.com/bit2r/gpt-coding/에서 소스 코드를 다운받아 실행하면 된다.\nR 언어가 어떻게 여러분(사용자)과 저자(프로그래머)사이에서 중개자 역할을 훌륭히 수행하고 있는지를 보여주는 좋은 사례다. 컴퓨터에 R을 설치한 누구나 사용할 수 있는 공통의 언어로 유용한 명령 순서(즉, 프로그램)를 우리가 주고받을 수 있는 방식이 R 방식이다. 그래서 누구도 R과 직접 의사소통하지 않고 R을 통해서 서로 의사소통한다.",
    "crumbs": [
      "들어가며",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>프로그래밍 학습 이유</span>"
    ]
  },
  {
    "objectID": "01-intro.html#r-intro-program-component",
    "href": "01-intro.html#r-intro-program-component",
    "title": "1  프로그래밍 학습 이유",
    "section": "\n1.8 프로그램 구성요소",
    "text": "1.8 프로그램 구성요소\n다음 몇장에 걸쳐서 R 어휘, 문장구조, 문단구조, 스토리 구조에 대해서 학습할 것이다. R의 강력한 역량에 대해서 배울 것이고, 유용한 프로그램을 작성하기 위해서 R의 역량을 어떻게 조합할지도 학습할 것이다.\n프로그램을 작성하기 위해서 사용하는 개념적인 하위 레벨(low-level) 패턴이 몇 가지 있다. R 프로그램을 위해서 만들어졌다기 보다는 기계어부터 하이 레벨(high-level) 언어에 이르기까지 모든 언어에도 공통된 사항이기도 하다.\n\n\n입력: 컴퓨터 바깥 세계에서 데이터를 가져온다. 파일로부터 데이터를 읽을 수도 있고, 마이크나 GPS 같은 센서에서 데이터를 입력받을 수도 있다. 상기 초기 프로그램에서 입력값은 키보드를 사용하여 사용자가 데이터를 입력한 것이다.\n\n출력: 화면에 프로그램 결과값을 출력주거나 파일에 저장한다. 혹은 음악을 연주하거나 텍스트를 읽어 스피커 같은 장치에 데이터를 내보낸다.\n\n순차 실행: 스크립트에 작성된 순서에 맞춰 한줄 한줄 실행된다.\n\n조건 실행: 조건을 확인하고 명령문을 실행하거나 건너뛴다.\n\n반복 실행: 반복적으로 명령문을 실행한다. 대체로 반복 실행시 변화를 수반한다.\n\n재사용: 한벌의 명령문을 작성하여 이름을 부여하고 저장한다. 필요에 따라 프로그램 이름을 불러 몇번이고 재사용한다.\n\n너무나 간단하게 들리지만, 전혀 간단하지는 않다. 단순히 걸음을 “한 다리를 다른 다리 앞에 놓으세요” 라고 말하는 것 같다. 프로그램을 작성하는 “예술”은 기본 요소를 조합하고 엮어 사용자에게 유용한 무언가를 만드는 것이다.\n단어를 세는 프로그램은 상기 프로그램의 기본요소를 하나만 빼고 모두 사용하여 작성되었다.",
    "crumbs": [
      "들어가며",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>프로그래밍 학습 이유</span>"
    ]
  },
  {
    "objectID": "01-intro.html#r-intro-bug",
    "href": "01-intro.html#r-intro-bug",
    "title": "1  프로그래밍 학습 이유",
    "section": "\n1.9 프로그램이 잘못되면?",
    "text": "1.9 프로그램이 잘못되면?\n처음 R과 대화에서 살펴봤듯이, R 코드를 명확하게 작성해서 의사소통 해야 한다. 작은 차이 혹은 실수는 여러분이 작성한 프로그램을 R이 들여다보다 조기에 포기하게 만든다.\n초보 R 프로그래머는 R이 오류에 대해서는 인정사정 보지 않는다고 생각한다. R이 모든 사람을 좋아하는 것 같지만, R은 개인적으로만 사람들을 알고, 분노를 간직하고 있다. 이러한 사실로 인해서 R은 여러분이 완벽하게 작성된 프로그램을 받아서 “잘 맞지 않는군요”라고 거절하여 고통을 준다.\n\nprimt(\"안녕 세상!\")\nprimt(\"안녕 세상!\")\n나는 R이 싫어!\n밖으로 나오면, 가르쳐 줄께!!!\n\nR과 다퉈봐야 얻을 것은 없어요. R은 도구고 감정이 없다. 여러분이 필요로 할 때마다 여러분에게 봉사하고 기쁨을 주기 위해서 존재할 뿐이다. 오류 메세지가 심하게 들릴지는 모르지만 단지 R이 도와달라는 요청일 뿐이다. 입력한 것을 쭉 읽어 보고 여러분이 입력한 것을 이해할 수 없다고만 말할 뿐이다.\nR은 어떤 면에서 강아지와 닮았다. 맹목적으로 여러분을 사랑하고, 강아지와 마찬가지로 몇몇 단어만 이해하며, 웃는 표정(&gt; 명령 프롬프트)으로 여러분이 R이 이해하는 무언가를 말하기만을 기다린다. R이 “Error: object ‘나는’ not found”을 뱉어낼 때는, 마치 강아지가 꼬리를 흔들면서 “뭔가 말씀하시는 것 같은데요… 주인님 말씀을 이해하지 못하겠어요, 다시 말씀해 주세요 (&gt;)” 말하는 것과 같다.\n여러분이 작성한 프로그램이 점점 유용해지고 복잡해짐에 따라 3가지 유형의 오류와 마주친다.\n\n\n구문 오류(Syntax Error): 첫번째 마주치는 오류로 고치기 가장 쉽습니다. 구문 오류는 R 문법에 맞지 않는다는 것을 의미한다. R은 구문오류가 발생한 줄을 찾아 정확한 위치를 알려준다. 하지만, R이 제시하는 오류가 그 이전 프로그램 부문에서 발생했을 수도 있기 때문에 R이 제시하는 곳 뿐만 아니라 그 앞쪽도 살펴볼 필요가 있다. 따라서 구문 오류로 R이 지칭하는 행과 문자는 오류를 고치기 위한 시작점으로 의미가 있다.\n\n논리 오류(Logic Error): 논리 오류의 경우 프로그램 구문은 완벽하지만 명령어 실행 순서에 실수가 있거나 혹은 문장이 서로 연관되는 방식에 오류가 있는 것이다. 논리 오류의 예를 들어보자. “물병에서 한모금 마시고, 가방에 넣고, 도서관으로 걸어가서, 물병을 닫는다”\n\n의미론적 오류(Semantic Error): 의미론적 오류는 구문론적으로 완벽하고 올바른 순서로 프로그램의 명령문이 작성되었지만 단순하게 프로그램에 오류가 있다. 프로그램은 완벽하게 작동하지만 여러분이 의도한 바를 수행하지는 못한다. 간단한 예로 여러분이 식당으로 가는 방향을 알려주고 있다. ” … 주유소 사거리에 도착했을 때, 왼쪽으로 돌아 1.6km 쭉 가면 왼쪽편에 빨간색 빌딩에 식당이 있습니다.” 친구가 매우 늦어 전화로 지금 농장에 있고 헛간으로 걸어가고 있는데 식당을 발견할 수 없다고 전화를 합니다. 그러면 여러분은 “주유소에서 왼쪽으로 혹은 오른쪽으로 돈거야?” 말하면, 그 친구는 “말한대로 완벽하게 따라서 갔고, 말한대로 필기까지 했는데, 왼쪽으로 돌아 1.6km 지점에 주요소가 있다고 했어”, 그러면 여러분은 “미안해, 내가 가지고 있는 건 구문론적으로는 완벽한데, 슬프게도 사소하지만 탐지되지 않은 의미론적 오류가 있네!” 라고 말할 것이다.\n\n다시 한번 위 세 종류의 오류에 대해서, R은 단지 여러분이 요청한 것을 충실히 수행하기 위해서 최선을 다합니다.",
    "crumbs": [
      "들어가며",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>프로그래밍 학습 이유</span>"
    ]
  },
  {
    "objectID": "01-intro.html#r-intro-journey",
    "href": "01-intro.html#r-intro-journey",
    "title": "1  프로그래밍 학습 이유",
    "section": "\n1.10 학습으로의 여정",
    "text": "1.10 학습으로의 여정\n책을 읽어 가면서 처음에 개념들이 잘 와 닿지 않는다고 기죽을 필요는 없다. 말하는 것을 배울 때, 처음 몇년 동안 웅얼거리는 것은 문제도 아니다. 간단한 어휘에서 간단한 문장으로 옮겨가데 6개월이 걸리고, 문장에서 문단으로 옮겨가는데 5-6년 이상 걸려도 괜찮다. 흥미로운 완전한 짧은 스토리를 자신의 언어로 작성하는데 몇 년이 걸린다.\nR을 빨리 배울 수 있도록 다음 몇장에 걸쳐서 모든 정보를 제공한다. 하지만 새로운 언어를 습득하는 것과 마찬가지로 자연스럽게 느껴지기까지 R을 흡수하고 이해하기까지 시간이 걸린다. 큰 그림(Big Picture)을 이루는 작은 조각들을 정의하는 동안에, 큰 그림을 볼 수 있도록 여러 주제를 방문하고, 또 다시 재방문하면서 혼란이 생길 수도 있다. 이 책은 순차 선형적으로 쓰여져서 본 과정을 선형적으로 배워갈 수도 있지만, 비선형적으로 본 교재를 활용하는 것도 괜찮다. 가볍게 앞쪽과 뒷쪽을 넘나들며 책을 읽을 수도 있다. 구체적이고 세세한 점을 완벽하게 이해하지 않고 고급 과정을 가볍게 읽으면서 프로그래밍의 “왜(Why)”에 대해서 더 잘 이해할 수도 있다. 앞에서 배운 것을 다시 리뷰하고 연습문제를 다시 풀면서 지금 난공불락이라 여겼던 어려운 주제를 통해서 사실 더 많은 것을 학습했다는 것을 깨달을 것이다.\n대체적으로 처음 프로그래밍 언어를 배울 때는, 마치 망치로 돌을 내리치고, 끌로 깎아내고 하면서 아름다운 조각품을 만들면서 겪게되는 것과 유사한 몇 번의 ” 유레카, 아 하” 순간이 있다.\n만약 어떤 것이 특별히 힘들다면, 밤새도록 앉아서 노력하는 것은 별로 의미가 없다. 잠시 쉬고, 낮잠을 자고, 간식을 먹고 다른 사람이나 강아지에게 문제를 설명하고 자문을 구한 후에 깨끗한 정신과 눈으로 돌아와서 다시 시도해보라. 단언컨데 이 책에 있는 프로그래밍 개념을 깨우치게 되면, 돌이켜 생각해보면 프로그래밍은 정말 쉽고 멋지다는 것을 알게 될 것이다. 그래서 단순하게 프로그래밍 언어는 정말 시간을 들여서 배울 가치가 있다.",
    "crumbs": [
      "들어가며",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>프로그래밍 학습 이유</span>"
    ]
  },
  {
    "objectID": "01-intro.html#r-intro-terminology",
    "href": "01-intro.html#r-intro-terminology",
    "title": "1  프로그래밍 학습 이유",
    "section": "\n1.11 용어사전",
    "text": "1.11 용어사전\n\n\n버그(bug): 프로그램 오류\n\n중앙처리장치(central processing unit, CPU): 컴퓨터의 심장, 작성한 프로그램을 실행하는 장치, “CPU” 혹은 프로세서라고 부른다.\n\n컴파일(compile): 나중에 실행을 위해서 하이레벨 언어로 작성된 프로그램을 로우레벨 언어로 번역한다.\n\n하이레벨 언어(high-level language): 사람이 읽고 쓰기 쉽게 설계된 파이썬과 같은 프로그래밍 언어\n\n인터랙티브 모드(interactive mode): 프롬프트에서 명령어나 표현식을 타이핑함으로써 파이썬 인터프리터를 사용하는 방식\n\n해석한다(interpret): 하이레벨 언어로 작성된 프로그램을 한번에 한줄씩 번역해서 실행한다.\n\n로우레벨 언어(low-level language): 컴퓨터가 실행하기 좋게 설계된 프로그래밍 언어, “기계어 코드”, “어셈블리 언어”로 불린다.\n\n기계어 코드(machine code): 중앙처리장치에 의해서 바로 실행될 수 있는 가장 낮은 수준의 언어로 된 소프트웨어\n\n주기억장치(main memory): 프로그램과 데이터를 저장한다. 전기가 나가게 되면 주기억장치에 저장된 정보는 사라진다.\n\n파싱(parsing): 프로그램을 검사하고 구문론적 구조를 분석한다.\n\n이식성(portability): 하나 이상의 컴퓨터에서 실행될 수 있는 프로그램의 특성\n\n출력문(print statement): 파이썬 인터프리터가 화면에 값을 출력할 수 있게 만드는 명령문\n\n문제해결(problem solving): 문제를 만들고, 답을 찾고, 답을 표현하는 과정\n\n프로그램(program): 컴퓨테이션(Computation)을 명세하는 명령어 집합\n\n프롬프트(prompt): 프로그램이 메세지를 출력하고 사용자가 프로그램에 입력하도록 잠시 멈춘 때.\n\n보조 기억장치(secondary memory): 전기가 나갔을 때도 정보를 기억하고 프로그램을 저장하는 저장소. 일반적으로 주기억장치보다 속도가 느리다. USB의 플래쉬 메모리나 디스크 드라이브가 여기에 속한다.\n\n의미론(semantics): 프로그램의 의미\n\n의미론적 오류(semantic error): 프로그래머가 의도한 것과 다른 행동을 하는 프로그램 오류\n\n소스 코드(source code): 하이레벨 언어로 기술된 프로그램",
    "crumbs": [
      "들어가며",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>프로그래밍 학습 이유</span>"
    ]
  },
  {
    "objectID": "01-intro.html#연습문제",
    "href": "01-intro.html#연습문제",
    "title": "1  프로그래밍 학습 이유",
    "section": "연습문제",
    "text": "연습문제\n\n컴퓨터 보조기억장치 기능은 무엇입니까?\n\n프로그램의 모든 연산과 로직을 실행한다.\n인터넷을 통해 웹페이지를 불러온다.\n파워가 없을 때도 정보를 장시간 저장한다.\n사용자로부터 입력정보를 받는다.\n\n\n프로그램은 무엇입니까?\n컴파일러와 인터프리터의 차이점을 설명하세요.\n기계어 코드는 다음중 어는 것입니까?\n\n파이썬 인터프리터\n키보드\n파이썬 소스코드 파일\n워드 프로세싱 문서\n\n\n다음 R 프로그램이 실행된 후에, 변수 “X”는 어디에 저장됩니까?\n\n중앙처리장치\n주메모리\n보조메모리\n입력장치\n출력장치\n\n\n사람의 어느 능력부위를 예제로 사용하여 다음 각각을 설명하세요. (1) 중앙처리장치, (2) 주메모리, (3) 보조메모리, (4) 입력장치, (5) 출력장치, 예를 들어 중앙처리장치에 상응하는 사람의 몸 부위는 어디입니까?\n구문오류(“Syntax Error”)는 어떻게 고칩니까?\n다음 코드에서 잘못된 점을 설명하세요.\n\n\nprimt(\"헬로 월드!\")\nError in primt(\"헬로 월드!\") : could not find function \"primt\"\n\n\n다음 프로그램에서 출력되는 것은 무엇입니까?\n\n43\n44\nx + 1\n오류, 왜냐하면 x &lt;- x + 1 은 수학적으로 불가능하다.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "들어가며",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>프로그래밍 학습 이유</span>"
    ]
  },
  {
    "objectID": "01-intro.html#footnotes",
    "href": "01-intro.html#footnotes",
    "title": "1  프로그래밍 학습 이유",
    "section": "",
    "text": "Cat Proximity↩︎",
    "crumbs": [
      "들어가며",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>프로그래밍 학습 이유</span>"
    ]
  },
  {
    "objectID": "02-var.html",
    "href": "02-var.html",
    "title": "2  변수, 표현식, 문장",
    "section": "",
    "text": "2.1 값과 자료형\n값(Value)은 문자와 숫자처럼 프로그램이 다루는 가장 기본이 되는 단위이다. 지금까지 살펴본 값은 1, 2 그리고 ‘헬로 월드!’ 다.\n상기 값은 다른 자료형(Type)에 속하는데, 2는 정수(integer), ‘헬로 월드!’ 는 문자열(String)에 속하는데, 문자(character)를 일련의 열(sequence)의 형태로 되어 있어서 문자열이라고 부른다. 인용부호에 감싸여 있어서, 여러분과 인터프리터는 문자열을 식별할 수 있다.\nprint 문은 정수에도 사용할 수 있다. R 명령어를 실행하여 인터프리터를 구동시키자.\n값이 어떤 형인지 확신을 못한다면, 인터프리터가 알려준다.\n다소 놀랄수도 있겠지만, 17은 부동소수점 숫자 형식 더블(double)이고 헬로 월드!는 문자(character)가 된다.\ntypeof(7L)\n#&gt; [1] \"integer\"\n정수형을 필히 표현하려면 7L와 같이 정수 뒤에 L을 붙이면 된다. ‘17’, ‘3.2’ 같은 값은 어떨가? 숫자처럼 보이지만 문자열처럼 인용부호에 감싸여 있다.\ntypeof('17L')\n#&gt; [1] \"character\"\ntypeof('3.2')\n#&gt; [1] \"character\"\n‘17’, ‘3.2’ 은 문자열이다.\n1,000,000 처럼 아주 큰 정수를 입력할 때, 사람이 인식하기 편한 형태로 세자리 숫자마다 콤마(,)를 사용하고 싶을 것이다. 하지만, R에서는 오류가 난다.\n파이썬의 경우 파이썬에서는 정상적으로 실행되나, 실행 결과는 우리가 기대했던 것이 아니다. 파이썬에서는 1,000,000 을 콤마(‘,’)로 구분된 정수로 인식한다. 따라서 사이 사이 공백을 넣어 출력했다. 이 사례가 여러분이 처음 경험하게 되는 의미론적 오류(semantic error)다. 코드가 에러 메세지 없이 실행이되지만, “올바른(right)” 작동을 하는 것은 아니다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>변수, 표현식, 문장</span>"
    ]
  },
  {
    "objectID": "02-var.html#r-var-value-type",
    "href": "02-var.html#r-var-value-type",
    "title": "2  변수, 표현식, 문장",
    "section": "",
    "text": "R\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>변수, 표현식, 문장</span>"
    ]
  },
  {
    "objectID": "02-var.html#r-var-variable",
    "href": "02-var.html#r-var-variable",
    "title": "2  변수, 표현식, 문장",
    "section": "\n2.2 변수",
    "text": "2.2 변수\n프로그래밍 언어의 가장 강력한 기능 중의 하나는 변수를 다룰 수 있는 능력이다. 변수(Variable)는 값을 참조하는 이름이다. 대입문(Assignment statement)는 새로운 변수를 생성하고 값을 변수에 대입한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기 예제는 세가지 대입 사례를 보여준다. 첫 번째 대입 예제는 message 변수에 문자열을 대입한다. 두 번째 예제는 변수 n에 정수 17을 대입한다. 세 번째 예제는 pi변수에 근사값을 대입한다.\n변수 값을 출력하기 위해서 print문을 사용하도 되지만, 일반적으로 변수명을 콘솔에서 타이핑하면 된다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n변수 자료형(type)은 변수가 참조하는 값의 자료형이다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>변수, 표현식, 문장</span>"
    ]
  },
  {
    "objectID": "02-var.html#r-var-keywords",
    "href": "02-var.html#r-var-keywords",
    "title": "2  변수, 표현식, 문장",
    "section": "\n2.3 변수명과 예약어",
    "text": "2.3 변수명과 예약어\n대체로 프로그래머는 의미있는 변수명(variable name)을 고른다. 프로그래머는 변수가 사용되는 것에 대해 문서화도 한다.\n변수명은 임의로 길 수 있다. 변수명은 문자와 숫자를 포함할 수 있지만, 문자로 변수명을 시작해야 한다. 첫 변수명을 대문자로 사용해도 되지만 소문자로 변수명을 시작하는 것도 좋은 생각이다. (후에 왜 그런지 보게 될 것이다.)\n변수명에 밑줄(underscore character, _)이 들어갈 수 있다. 종종 my_name 혹은 airspeed_of_unladen_swallow 처럼 밑줄은 여러 단어와 함께 사용된다. 변수명을 밑줄로 시작해서 작성할 수 있지만, 다른 사용자가 사용할 라이브러리를 작성하는 경우가 아니라면, 일반적으로 밑줄로 시작하는 변수명은 피한다. 한글을 변수명으로 사용하는 것도 가능하지만, 인코딩 등 여타 예기치 못한 문제가 생길 수도 있다는 점을 유념하고 사용한다. R이 다른 언어와 다른 점은 &lt;-을 변수명에 값을 대입하는데 사용하는 점이다. 이유는 R이 한창 개발될 당시 가장 최신 이론에 바탕을 두고 있기 때문이다. 수학적으로 variable_name = 123L와 같은 문장이 맞는지 곰곰히 생각해 보면 그 당시 &lt;- 기호를 사용한 이유를 유추할 수 있다.\n변수명을 적합하게 작성하지 못하다면, 구문 오류가 발생한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n76trombones 변수명은 문자로 시작하지 않아서 적합하지 않다. more@은 특수 문자 (@)를 변수명에 포함해서 적합하지 않다. 하지만, repeat 변수명은 뭐가 잘못된 것일까?\n구문 오류 이유는 repeat이 R의 예약어 중의 하나라고 밝혀졌다. 인터프리터가 예약어를 사용하여 프로그램 구조를 파악하기 위해서 사용하지만, 변수명으로는 사용할 수 없다. 예약어는 프로그래밍 언어에서 특별한 목적으로 사용되는 단어다. 표 2.1 표 2.2 에 R과 파이썬 예약어가 기능별로 비교되어 있다.\n\n\nR\n파이썬\n\n\n\n\n\n\n\n\n\n\n\nR 예약어\n설명\n\n\n\nif, else, repeat, while, for, in, next, break\n조건문 및 반복문 제어\n\n\nfunction, … (ellipsis)\n함수 관련\n\n\nTRUE, FALSE, NULL, Inf, NaN, NA, NA_integer_, NA_real_, NA_complex_, NA_character_\n논리 및 상수\n\n\n&lt;- (assignment), -&gt;\n변수 할당\n\n\n$, :, ::, :::\n객체 및 패키지 접근\n\n\n^, +, -, *, /\n산술 연산자\n\n\n&gt;, &lt;, ==, !=, &lt;=, &gt;=\n비교 연산자\n\n\n!, &, |, &&, ||\n논리 연산자\n\n\n%any%, %in%\n특별 목적 연산자\n\n\n{, }\n코드 블록 정의\n\n\n\n\n\n표 2.1: R 예약어\n\n\n\n\n\n\n\n\n파이썬 예약어\n설명\n\n\n\nFalse, True\n논리 상수(Logical constants)\n\n\nbreak, continue, for, while\n반복문 제어\n\n\ndef, return, lambda\n함수 정의\n\n\nclass\n클래스 정의\n\n\nif, elif, else\n조건문\n\n\ntry, except, finally, raise\n예외 처리\n\n\nglobal, nonlocal\n변수 범위\n\n\nimport, from, as\n모듈 관련\n\n\nand, or, not\n논리 연산자\n\n\nassert, del, pass, yield, in, is, None\n기타\n\n\n\n\n\n표 2.2: 파이썬 예약어\n\n\n\n\n\n이 표는 R의 예약어 및 특수 문자들을 포함하고 있으며, 각각의 용도나 기능에 대해 간단한 설명을 제공합니다. R에서는 이러한 예약어와 특수 문자들을 변수명이나 함수명으로 사용하는 것을 피해야 합니다.\n상기 예약어 목록을 주머니에 넣고 잘 가지고 다니고 싶을 것이다. 만약 인터프리터가 변수명 중 하나에 대해 불평을 하지만 이유를 모르는 경우, 예약어 목록에 변수명이 있는지 확인해 보세요.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>변수, 표현식, 문장</span>"
    ]
  },
  {
    "objectID": "02-var.html#r-var-statement",
    "href": "02-var.html#r-var-statement",
    "title": "2  변수, 표현식, 문장",
    "section": "\n2.4 문장",
    "text": "2.4 문장\n문장(statement)은 R 인터프리터가 실행하는 코드 단위다. 지금까지 print, 대입(assignment, &lt;-) 두 종류의 문장을 살펴봤습니다.\n인터랙트브 모드에서 문장을 입력하면, 인터프리터는 문장을 실행하고, 만약 출력할 것이 있다면 결과를 화면에 출력합니다. 스크립트는 보통 여러줄의 문장으로 구성됩니다. 하나 이상의 문장이 있다면, 문장이 순차적으로 실행되며서 결과가 한번에 하나씩 나타납니다.\n예를 들어, 다음의 스크립트를 생각해 봅시다. 스크립트는 다음 결과를 출력합니다.\n\n\n\n1\nx &lt;- 2\nx\n\n\n\n\n\n1\n#&gt; [1] 1\nx &lt;- 2\nx\n#&gt; [1] 2\n\n\n\n대입 문장(x &lt;- 2)은 결과를 출력하지 않습니다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>변수, 표현식, 문장</span>"
    ]
  },
  {
    "objectID": "02-var.html#r-var-operator",
    "href": "02-var.html#r-var-operator",
    "title": "2  변수, 표현식, 문장",
    "section": "\n2.5 연산자와 피연산자",
    "text": "2.5 연산자와 피연산자\n연산자(Operators)는 덧셈, 곱셈 같은 계산(Computation)을 표현하는 특별한 기호입니다. 연산가자 적용되는 값을 피연산자(operands)라고 합니다.\n다음 예제와 같이, +, -, *, /, ** 연산자는 각각 덧셈, 뺄셈, 곱셈, 나눗셈 및 지수 연산을 실행합니다.\n20+32 hour-1 hour*60+minute minute/60 5**2 (5+9)*(15-7)",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>변수, 표현식, 문장</span>"
    ]
  },
  {
    "objectID": "02-var.html#r-var-expression",
    "href": "02-var.html#r-var-expression",
    "title": "2  변수, 표현식, 문장",
    "section": "\n2.6 표현식",
    "text": "2.6 표현식\n표현식 (expression)은 값, 변수, 연산자 조합이다. 값은 자체로 표현식이고, 변수도 동일하다. 따라서 다음 표현식은 모두 적합하다. (변수 x는 사전에 어떤 값이 대입되었다고 가정한다.)\n\n17\nx\nx + 17\n\n인터랙티브 모드에서 표현식을 입력하면, 인터프리터는 표현식을 평가(evaluate)하고 값을 표시한다.\n\n1 + 1\n#&gt; [1] 2\n\n하지만, 스크립트에서는 표현식 자체로 어떠한 것도 수행하지는 않는다. 초심자에게 혼란스러운 점이다.\n연습문제. R 인터프리터에 다음 문장을 입력하고 결과를 보세요.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>변수, 표현식, 문장</span>"
    ]
  },
  {
    "objectID": "02-var.html#r-var-order-operations",
    "href": "02-var.html#r-var-order-operations",
    "title": "2  변수, 표현식, 문장",
    "section": "\n2.7 연산자 적용 우선순위",
    "text": "2.7 연산자 적용 우선순위\n1개 이상의 연산자가 표현식에 등장할 때, 연산자 평가 순서는 우선순위 규칙(rules of precedence)에 따른다. 수학 연산자에 대해서 파이썬은 수학적 관례를 동일하게 따른다. 영어 두문어 PEMDAS는 기억하기 좋은 방식이다.\n\n\n괄호(Parentheses)는 가장 높은 순위를 가지고 여러분이 원하는 순위에 맞춰 실행할 때 사용한다. 괄호내의 식이 먼저 실행되기 때문에 2 * (3-1) 은 4가 정답이고, (1+1)**(5-2)는 8이다. 괄호를 사용하여 표현식을 좀더 읽기 쉽게 하려고 사용하기도 한다. (minute * 100) / 60 는 실행순서가 결과값에 영향을 주지 않지만 가독성이 상대적으로 더 좋다.\n\n지수승(Exponentiation)이 다음으로 높은 우선순위를 가진다. 그래서 2**1+1는 4가 아니라 3이고, 3*1**3는 27이 아니고 3이다.\n\n곱셈(Multiplication)과 나눗셈(Division)은 동일한 우선순위를 가지지만, 덧셈(Addition), 뺄셈(Substraction)보다 높은 우선 순위를 가진다. 덧셈과 뺄샘은 같은 실행 우선순위를 갖는다. 2*3-1는 4가 아니고 5이고, 6+4/2는 5가 아니라 8이다.\n같은 실행 순위를 갖는 연산자는 왼쪽에서부터 오른쪽으로 실행된다. 5-3-1 표현식은 3이 아니고 1이다. 왜냐하면 5-3이 먼저 실행되고 나서 2에서 1을 빼기 때문이다.\n\n여러분이 의도한 순서대로 연산이 수행될 수 있도록, 좀 의심스러운 경우는 항상 괄호를 사용한다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>변수, 표현식, 문장</span>"
    ]
  },
  {
    "objectID": "02-var.html#r-var-modular",
    "href": "02-var.html#r-var-modular",
    "title": "2  변수, 표현식, 문장",
    "section": "\n2.8 나머지 연산자",
    "text": "2.8 나머지 연산자\n나머지 연산자(modulus operator)는 정수에 사용하며, 첫번째 피연산자를 두번째 피연산자가 나눌 때 나머지 값이 생성된다. 파이썬에서 나머지 연산자는 퍼센트 기호(%)다. 구문은 다른 연산자와 동일하다.\n7을 3으로 나누면 몫이 2가 되고 나머지가 1이 된다.\n나머지 연산자가 놀랍도록 유용다다. 예를 들어 한 숫자를 다른 숫자로 나눌 수 있는지 없는지를 확인할 수도 있다. x %% y 값이 0 이라면, x를 y로 나눌 수 있다.\n또한, 숫자에서 가장 오른쪽 숫자를 분리하는데도 사용된다. 예를 들어 x %% 10 은 x가 10진수인 경우 가장 오른쪽 숫자를 뽑아낼 수 있고, 동일한 방식으로 x %% 100은 가장 오른쪽 2개 숫자를 뽑아낼 수도 있다.\n나눗셈 연산자의 경우 minute 값은 59, 보통 59를 60으로 나누면 0 대신에 0.98333 입니다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n하지만, 몫을 minute %/% 60와 같이 계산하여 0 얻고, 나머지를 minute %% 60와 같이 계산하여 59을 얻게 된다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>변수, 표현식, 문장</span>"
    ]
  },
  {
    "objectID": "02-var.html#r-var-string-operator",
    "href": "02-var.html#r-var-string-operator",
    "title": "2  변수, 표현식, 문장",
    "section": "\n2.9 문자열 연산자",
    "text": "2.9 문자열 연산자\n+ 연산자는 문자열는 동작하지 않는다. 대신에 문자열 끝과 끝을 붙이는 연결(concatenation) 작업을 수행할 때 paste() 함수를 사용한다. 예를 들어,\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기 프로그램 출력은 100150 이다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>변수, 표현식, 문장</span>"
    ]
  },
  {
    "objectID": "02-var.html#r-var-input",
    "href": "02-var.html#r-var-input",
    "title": "2  변수, 표현식, 문장",
    "section": "\n2.10 입력값 받기",
    "text": "2.10 입력값 받기\n때때로 키보드를 통해서 사용자로부터 변수에 대한 값을 입력받고 싶을 때가 있다. 키보드로부터 입력값을 받는 readline() 이라는 내장(built-in) 함수를 R에서 제공한다. 입력 함수가 호출되면, R은 실행을 멈추고 사용자가 무언가 입력하기를 기다린다. 사용자가 Return (리턴) 혹은 Enter (엔터) 키를 누르게 되면 프로그램이 다시 실행되고, readline()은 사용자가 입력한 것을 문자열로 반환한다.\n\n\nR\n파이썬\n\n\n\n\nuser_input  &lt;- readline()\n#&gt; R은 사랑입니다.\nuser_input \n#&gt; [1] \"R은 사랑입니다.\"\n\n\n\n\nuser_input  = input()\n#&gt; 파이썬은 사랑입니다.\nprint(user_input )\n#&gt; \"파이썬은 사랑입니다.\"\n\n\n\n\n사용자로부터 입력 받기 전에 프롬프트에서 사용자가 어떤 값을 입력해야 하는지 정보를 제공하는 것도 좋은 생각이다. 입력을 받기 위해 잠시 멈춰있을 때, 사용자에게 표시되도록 readline() 함수에 문자열을 전달할 수 있다.\n\n\nR\n파이썬\n\n\n\n\nuser_input  &lt;- readline(prompt=\"아무거나 입력하시요: \")\n#&gt; 아무거나 입력하시요: R은 사랑입니다.\nuser_input \n#&gt; [1] \"R은 사랑입니다.\"\n\n\n\n\nuser_input  = input(\"아무거나 입력하시요: \")\n#&gt; 아무거나 입력하시요: 파이썬은 사랑입니다.\nprint(user_input )\n#&gt; \"파이썬은 사랑입니다.\"\n\n\n\n\n경우에 따라서 프롬프트의 끝에 \\n 을 넣는 경우도 있는데 줄바꿈(newline)을 의미한다. 줄바꿈은 줄을 바꾸게 하는 특수 문자다. 사용자 입력이 프롬프트 밑에 출력되도록 줄바꿈이 필요한 경우 사용한다.\n만약 사용자가 정수를 입력하기를 바란다면, int()함수를 사용하여 반환되는 값을 정수(int)로 자료형을 변환한다.\n\n\nR\n파이썬\n\n\n\n\nprompts &lt;- '속도가 얼마나 됩니까? '\nspeed &lt;- readline(prompt=prompts)\n#&gt; 속도가 얼마나 됩니까? 20\nas.integer(speed) + 5\n#&gt; [1] 25\n\n\n\n\nprompt = '속도가 얼마나 됩니까? '\nspeed = input(prompt)\n#&gt; 속도가 얼마나 됩니까? 20\nresult = int(speed) + 5\nprint(result)\n#&gt; 25\n\n\n\n\n하지만, 사용자가 숫자 문자열이 아닌 다른 것을 입력하게 되면 오류가 발생한다.\n\n\nR\n파이썬\n\n\n\n\nprompts &lt;- '속도가 얼마나 됩니까? '\nspeed &lt;- readline(prompt=prompts)\n#&gt; 속도가 얼마나 됩니까? 뭐라고 하셨나요!!!\nas.integer(speed) + 5\n#&gt; [1] 25\n\n\n\n\nprompt = '속도가 얼마나 됩니까? '\nspeed = input(prompt)\n#&gt; 속도가 얼마나 됩니까? 뭐라고 하셨나요!!!\nresult = int(speed) + 5\nprint(result)\n#&gt; Traceback (most recent call last):\n#&gt;  File \"C:/Users/statkclee/AppData/Local/Programs/Python/Python311/book.py\", line 9, in &lt;module&gt;\n#&gt;    result = int(speed) + 5\n#&gt; ValueError: invalid literal for int() with base 10: '뭐라고 하셨나요!!!'\n\n\n\n\n나중에 이런 종류의 오류를 어떻게 다루는지 배울 것이다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>변수, 표현식, 문장</span>"
    ]
  },
  {
    "objectID": "02-var.html#r-var-comment",
    "href": "02-var.html#r-var-comment",
    "title": "2  변수, 표현식, 문장",
    "section": "\n2.11 주석",
    "text": "2.11 주석\n프로그램이 커지고 복잡해짐에 따라 가독성은 떨어진다. 형식 언어(formal language)는 촘촘하고 코드 일부분도 읽기 어렵고 무슨 역할을 왜 수행하는지 이해하기 어렵다.\n이런 이유로 프로그램이 무엇을 하는지를 자연어로 프로그램에 노트를 달아두는 것은 좋은 생각이다. 이런 노트를 주석(Comments)이라고 하고 # 기호로 시작한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기 사례의 경우, 주석 자체가 한줄이다. 주석을 프로그램의 맨 뒤에 놓을 수도 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n뒤의 모든 것은 무시되기 때문에 프로그램에는 아무런 영향이 없다.\n명확하지 않은 코드의 기능을 문서화할 때 주석은 가장 유용하게 된다. 프로그램을 읽는 사람이 코드가 무엇을 하는지 이해한다고 가정하는 것은 일리가 있다. 왜 그런지를 이유를 설명하는 것은 더욱 유용하다.\n다음의 주석은 코드와 중복되어 쓸모가 없다.\n\nv &lt;- 5 # 5를 v에 대입\n\n다음의 주석은 코드에 없는 유용한 정보가 있다.\n\nv &lt;- 5 # 미터/초 단위로 측정된 속도\n\n좋은 변수명은 주석을 할 필요를 없게 만들지만, 지나치게 긴 변수명은 읽기 어려운 복잡한 표현식이 될 수 있다. 그래서 상충관계(trade-off)가 존재한다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>변수, 표현식, 문장</span>"
    ]
  },
  {
    "objectID": "02-var.html#r-var-name",
    "href": "02-var.html#r-var-name",
    "title": "2  변수, 표현식, 문장",
    "section": "\n2.12 연상되는 변수명",
    "text": "2.12 연상되는 변수명\n변수를 이름 짓는데 단순한 규칙을 지키고 예약어를 피하기만 하다면, 변수이름을 작명할 수 있는 무척이나 많은 경우의 수가 존재한다. 처음에 이렇게 넓은 선택폭이 오히려 프로그램을 읽는 사람이나 프로그램을 작성하는 사람 모두에게 혼란을 줄 수 있다. 예를 들어, 다음의 3개 프로그램은 각 프로그램이 달성하려하는 관점에서 동일하지만, 여러분이 읽고 이해하는데는 많은 차이점이 있다.\n\na &lt;- 35.0\nb &lt;- 12.50\nc &lt;- a * b\nprint(c)\n#&gt; [1] 437.5\n\nhours &lt;- 35.0\nrate &lt;- 12.50\npay &lt;- hours * rate\nprint(pay)\n#&gt; [1] 437.5\n\nx1q3z9ahd &lt;- 35.0\nx1q3z9afd &lt;- 12.50\nx1q3p9afd &lt;- x1q3z9ahd * x1q3z9afd\nprint(x1q3p9afd)\n#&gt; [1] 437.5\n\nR 인터프리터는 상기 3개 프로그램을 정확하게 동일하게 바라보지만, 사람은 이들 프로그램을 매우 다르게 보고 이해한다. 사람은 가장 빨리 두 번째 프로그램의 의도를 알아차린다. 왜냐하면 각 변수에 무슨 데이터가 저장될지에 관해서, 프로그래머의 의도를 반영하는 변수명을 사용했기 때문이다.\n현명하게 선택된 변수명을 연상기호 변수명(“mnemonic variable name”)이라고 한다. 연상되기 좋은 영어 단어 (“mnemonic”)은 기억을 돕는다는 뜻이다. 왜 변수를 생성했는지 기억하기 좋게 하기 위해서 연상하기 좋은 변수명을 선택한다.\n매우 훌륭하게 들리고, 연상하기 좋은 변수명을 만드는게 좋은 아이디어 같지만, 기억하기 좋은 변수명은 초보 프로그래머가 코드를 파싱(parsing)하고 이해하는데 걸림돌이 되기도 한다. 왜냐하면 얼마되지 않는 예약어도 기억하지 못하고, 변수명이 때때로 너무 서술적이라 마치 일반적으로 사용하는 언어처럼 보이고 잘 선택된 변수명처럼 보이지 않기 때문이다.\n어떤 데이터를 반복하는 다음 파이썬 코드를 살펴보자. 곧 반복 루프를 살펴보겠지만, 다음 코드가 무엇을 의미하는지 알기 위해서 퍼즐을 풀어보자.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n무엇이 일어나고 있는 것일까? for, word, in 등등 어느 토큰이 예약어일까? 변수명은 무엇일까? 파이썬은 기본적으로 단어의 개념을 이해할까? 초보 프로그래머는 어느 부분 코드가 이 예제와 동일해야만 하는지 그리고, 어느 부분 코드가 프로그래머 선택에 의한 것인지 분간하는데 고생을 한다.\n다음의 코드는 위의 코드와 동일하다.\n\n\nR\n\nfor(slice in seq_along(pizza)) {\n  print(pizza[slice])\n}\n\n\n\n\n\n파이썬\n\nfor slice in pizza:\n    print(slice)\n\n\n\n\n초보 프로그래머가 이 코드를 보고 어떤 부분이 R 예약어이고 어느 부분이 프로그래머가 선택한 변수명인지 알기 쉽다. R이 피자와 피자조각에 대한 근본적인 이해가 없고, 피자는 하나 혹은 여러 조각으로 구성된다는 근본적인 사실을 알지 못한다는 것은 자명하다.\n하지만, 작성한 프로그램이 데이터를 읽고 데이터에 있는 단어를 찾는다면 피자(pizza)와 피자조각(slice)은 연상하기 좋은 변수명이 아니다. 이것을 변수명으로 선핸하게 되면 프로그램의 의미를 왜곡시킬 수 있다.\n좀 시간을 보낸 후에 가장 흔한 예약어에 대해서 알게 될 것이고, 이들 예약어가 어느 순간 여러분에게 눈에 띄게 될 것이다.\n\n\nR\n\nfor(slice in seq_along(pizza)) {\n  print(pizza[slice])\n}\n\n\n\n\n\n파이썬\n\nfor slice in pizza:\n    print(slice)\n\n\n\n\nR에서 정의된 코드 일부분(for, in, print)은 예약어로 굵게 표시되어 있고, 프로그래머가 생성한 변수명(word, words)는 굵게 표시되어 있지 않다. 대다수 텍스트 편집기는 R 구문을 인지하고 있어서, R 예약어와 프로그래머가 작성한 변수를 구분하기 위해서 색깔을 다르게 표시한다. 잠시 후에 여러분은 R을 읽고 변수와 예약어를 빠르게 구분할 수 있을 것이다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>변수, 표현식, 문장</span>"
    ]
  },
  {
    "objectID": "02-var.html#r-var-debug",
    "href": "02-var.html#r-var-debug",
    "title": "2  변수, 표현식, 문장",
    "section": "\n2.13 디버깅(Debugging)",
    "text": "2.13 디버깅(Debugging)\n이 지점에서 여러분이 저지르기 쉬운 구문 오류는 odd~job, US$ 같은 특수문자를 포함해서 잘못된 변수명을 생성하는 것과 repeat, while같은 예약어를 변수명으로 사용하는 것이다.\n변수명에 공백을 넣는다면, R은 연산자 없는 두 개의 피연산자로 생각한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n구문 오류에 대해서, 오류 메세지는 그다지 도움이 되지 못한다. 가장 흔한 오류 메세지는 Error: unexpected symbol in \"bad name\"인데 둘다 그다지 오류에 대한 많은 정보를 주지는 못한다.\n여러분이 많이 범하는 실행 오류는 정의 전에 사용(“use before function/def”)하는 것으로 변수에 값을 대입하기 전에 변수를 사용할 경우 발생한다. 주로 변수명을 잘못 쓸 때도 발생할 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n변수명은 대소문자를 구분한다. 그래서, LaTeX은 \\(\\LaTeX\\), latex와 같지 않다.\n이 지점에서 여러분이 범하기 쉬운 의미론적 오류는 연산자 우선 순위일 것이다. 예를 들어 \\(frac{1}{2\\pi}\\)를 계산하기 위해서 다음과 같이 프로그램을 작성하게 되면 …\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n나눗셈이 먼저 일어나서 의도한 것과 같지 않다. R으로 하여금 여러분이 작성한 의도를 알게할 수는 없다. 그래서 이런 경우 오류 메세지는 없지만, 잘못된 답을 얻게 된다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>변수, 표현식, 문장</span>"
    ]
  },
  {
    "objectID": "02-var.html#r-var-terminology",
    "href": "02-var.html#r-var-terminology",
    "title": "2  변수, 표현식, 문장",
    "section": "\n2.14 용어 설명",
    "text": "2.14 용어 설명\n\n\n대입(assignment): 변수에 값을 대입하는 문장\n\n연결(concatenate): 두 개의 피연산자 끝과 끝을 합치는 것\n\n주석(comment): 다른 프로그래머나 소스코드를 읽는 다른 사람을 위한 프로그램 정보로 프로그램의 실행에는 아무런 영향이 없다.\n\n평가(evaluate): 하나의 값을 만들도록 연산을 실행함으로써 표현식을 간단히 하는 것\n\n표현식(expression): 하나의 결과값을 만드는 변수, 연산자, 값의 조합\n\n부동 소수점(floating-point): 소수점을 가진 숫자를 표현하는 자료형\n\n버림 나눗셈(floor division): 두 숫자를 나누어 소수점이하 부분을 절사하는 연산자\n\n정수(integer): 완전수를 나타내는 자료형\n\n예약어(keyword): 컴파일러가 프로그램을 파싱하는데 사용하기 위해서 이미 예약된 단어; if, def, while 같은 예약어를 변수명으로 사용할 수 없다.\n\n연상기호(mnemonic): 기억 보조. 변수에 저장된 것을 기억하기데 도움이 되도록 변수에 연상되는 이름을 부여한다.\n\n나머지 연산자(modulus operator): 퍼센트 기호 ()로 표시되고 정수를 가지고 한 숫자를 다른 숫자로 나누었을 때 나머지를 생성하는 연산자\n\n피연산자(operand): 연산자가 연산을 수행하는 값중의 하나\n\n연산자(operator): 덧셈, 곱셈, 문자열 결합 같은 간단한 연산을 표현하는 특별 기호\n\n우선순위 규칙(rules of precedence): 다수의 연산자와 피연산자를 포함한 표현식이 평가되는 실행 순서를 규정한 규칙 집합\n\n문장(statement): 명령이나 액션을 나타내는 코드 부문. 지금까지 assignment, print 문을 보았다.\n\n문자열(string): 일련의 문자를 나타내는 형식\n\n자료형(type): 값의 범주. 지금까지 여러분이 살펴본 자료형은 정수 (int), 부동 소수점수 (float), 문자열 (str) 이다.\n\n값(value): 숫자나 문자 같은 프로그램이 다루는 데이터의 기본 단위중 하나\n\n변수(variable): 값을 참조하는 이름",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>변수, 표현식, 문장</span>"
    ]
  },
  {
    "objectID": "02-var.html#r-var-ex",
    "href": "02-var.html#r-var-ex",
    "title": "2  변수, 표현식, 문장",
    "section": "연습문제",
    "text": "연습문제\n\n\nreadline()을 사용하여 사용자의 이름을 입력받고 환영하는 프로그램을 작성하세요.\n\n\n이름을 입력하시오: 길동\n안녕하세요 길동님\n\n\n급여를 지불하기 위해서 사용자로부터 근로시간과 시간당 임금을 계산하는 프로그램을 작성하세요.\n\n\n시간을 입력하시오: 35.51\n시급을 입력하시오: 7530\n알바비: 263550\n\n지금은 급여가 정확하게 소수점 두자리까지 표현되지 않아도 된다. 만약 원하다면, R 내장 round() 함수를 사용하여 소수점 아래 반올림하여 정수로 작성할 수도 있다.\n\n다음 대입 문장을 실행한다고 가정합시다.\n\n\nwidth &lt;- 17\nheight &lt;- 12.0\n\n다음 표현식 각각에 대해서, 표현식의 값(value)과 (표현식 값의) 자료형(type)을 작성하세요.\n\nwidth/2\nwidth/2.0\nheight/3\n1 + 2 * 5\n\n정답을 확인하기 위해서 R 인터프리터를 사용하세요.\n\n사용자로부터 섭씨(celsius) 온도를 입력받아 화씨(fahrenheit) 온도로 변환하고, 변환된 온도를 출력하는 프로그램을 작성하세요.\n\n\\[\\texttt{fahrenheit} = \\frac{9}{5} \\times \\texttt{celsius}  + 32\n\\]\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>변수, 표현식, 문장</span>"
    ]
  },
  {
    "objectID": "03-cont.html",
    "href": "03-cont.html",
    "title": "3  조건부 실행",
    "section": "",
    "text": "3.1 부울 표현식\n부울 표현식(boolean expression)은 참(TRUE) 혹은 거짓(FALSE)를 지닌 표현식이다. 다음 예제는 == 연산자를 사용하여 두 개 피연산자를 비교하여 값이 동일하면 참(TRUE), 그렇지 않으면 거짓(FALSE)을 산출한다.\n참(TRUE)과 거짓(FALSE)은 논리형(logical) 자료형(type)에 속하는 특별한 값으로 문자열은 아니다.\n== 연산자는 비교 연산자(comparison operators) 중 하나이고, 다른 연산자는 다음과 같다.\n상기 연산자가 친숙할지 모르지만, R 기호는 수학 기호와 다르다. 일반적인 오류로 비교를 해서 동일하다는 의미로 == 연산자 대신에 = 를 사용하는 것이다. R에서 대입연산자로 &lt;-을 사용하지만, = 으로 사용해도 프로그램은 돌아간다. = 연산자는 대입 연산자이고, == 연산자는 비교 연산자다. =&lt;, =&gt; 같은 비교 연산자는 R에는 없다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>조건부 실행</span>"
    ]
  },
  {
    "objectID": "03-cont.html#r-cont-boolean",
    "href": "03-cont.html#r-cont-boolean",
    "title": "3  조건부 실행",
    "section": "",
    "text": "R\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nx != y # x는 y와 값이 같지 않다.\nx &gt; y # x는 y보다 크다.\nx &lt; y # x는 y보다 작다.\nx &gt;= y # x는 y보다 크거나 같다.\nx &lt;= y # x는 y보다 작거나 같다.\nx == y # x는 y와 같다.\nx != y # x는 y와 개체가 동일하지 않다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>조건부 실행</span>"
    ]
  },
  {
    "objectID": "03-cont.html#r-cont-logical-operator",
    "href": "03-cont.html#r-cont-logical-operator",
    "title": "3  조건부 실행",
    "section": "\n3.2 논리 연산자",
    "text": "3.2 논리 연산자\n세개 **논리 연산자(logical operators): &, ||, ! 이 있다. 논리 연산자 의미는 수식기호 의미와 유사하다. 영어로 표현하면 &은 and, ||은 or, !은 not이 된다. 예를 들어,\n\nx &gt; 0 & x &lt; 10\n\nx 가 0 보다 크다. 그리고(and), 10 보다 작으면 참이다.\nn % 2 == 0 or n % 3 == 0 은 두 조건문 중의 하나만 참이 되면, 즉, 숫자가 2 혹은(or) 3으로 나누어지면 참이다.\n마지막으로 ! 연산자는 부울 연산 표현식을 부정한다. x &gt; y 가 거짓이면, ! (x &gt; y)은 참이다. 즉, x이 y 보다 작거나 같으면 참이다.\n엄밀히 말해서, 논리 연산자의 두 피연산자는 모두 부울 표현식이지만, R에서 그다지 엄격하지는 않다. 0 이 아닌 임의의 숫자 모두 “참(TRUE)”으로 해석된다. 일반적으로 참(TRUE)이면 1, 그렇지 않는 경우 0으로 표현해서 사용한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n이러한 유연함이 유용할 수 있으나, 혼란을 줄 수도 있으니 유의해서 사용해야 한다. 무슨 일을 하고 있는지 정확하게 알지 못한다면 피하는 것이 상책이다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>조건부 실행</span>"
    ]
  },
  {
    "objectID": "03-cont.html#r-cont-run",
    "href": "03-cont.html#r-cont-run",
    "title": "3  조건부 실행",
    "section": "\n3.3 조건문 실행",
    "text": "3.3 조건문 실행\n유용한 프로그램을 작성하기 위해서 거의 항상 조건을 확인하고 조건에 따라 프로그램 실행을 바꿀 수 있어야 한다. 조건문(Conditional statements)은 그러한 능력을 부여한다. 가장 간단한 형태는 if 문이다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nif문 뒤에 불 표현식(boolean expression)을 조건(condition)이라고 한다.\n\n\n\n\n\n그림 3.1: if문 순서도\n\n\n만약 조건문이 참이면, 첫번째 괄호로 둘러싼 문장이 실행된다. 만약 조건문이 거짓이면, 첫번째 괄호로 둘러싼 문장의 실행을 건너뛴다.\nif문은 함수 정의, for 반복문과 동일한 구조를 가진다. if문은 (으로 시작되고, )으로 끝나는 헤더 머리부문과 괄호({, })로 둘러싼 몸통 블록(block)으로 구성된다. if문처럼 문장이 한 줄 이상에 걸쳐 작성되기 때문에 복합 문장(compound statements)이라고 한다.\nif문 몸통 부문에 작성되는 실행 문장 숫자에 제한은 없으나 최소한 한 줄은 있어야 한다. 때때로, 몸통 부문에 어떤 문장도 없는 경우가 있다. 아직 코드를 작성하지 않아서 자리만 잡아 놓는 경우로, 그냥 놔두면 된다. 즉, 아무것도 작성하지 않고 괄호 내부를 비워 놓는다. 파이썬의 경우 아무것도 수행하지 않는 pass문을 넣어야 되는 것과 대비된다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nif문을 R 인터프리터에서 타이핑하고 엔터를 치게 되면, 명령 프롬프트가 +로 바뀐다. 따라서 다음과 같이 if문 몸통 부분을 작성중에 있다는 것을 나타낸다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>조건부 실행</span>"
    ]
  },
  {
    "objectID": "03-cont.html#r-cont-alternative",
    "href": "03-cont.html#r-cont-alternative",
    "title": "3  조건부 실행",
    "section": "\n3.4 대안 실행",
    "text": "3.4 대안 실행\nif문의 두 번째 형태는 대안 실행(alternative execution)이다. 대안 실행의 경우 두 가지 경우의 수가 존재하고, 조건이 어느 방향으로 실행할 것인지 결정한다. 구문(Syntax)은 아래와 같다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nx를 2로 나누었을 때, 0 이되면, x는 짝수이고, 프로그램은 짝수(“x는 짝수”)라는 결과 메시지를 출력한다. 만약 조건이 거짓이라면, 두 번째 몸통 부문 문장이 실행된다.\n\n\n\n\n\n그림 3.2: if-else문\n\n\n조건은 참 혹은 거짓이어서, 대안 중 하나만 정확하게 실행된다. 대안을 분기(Branch)라고도 하는데 이유는 실행 흐름이 분기되기 때문이다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>조건부 실행</span>"
    ]
  },
  {
    "objectID": "03-cont.html#r-cont-chained",
    "href": "03-cont.html#r-cont-chained",
    "title": "3  조건부 실행",
    "section": "\n3.5 연쇄 조건문",
    "text": "3.5 연쇄 조건문\n때때로, 두 가지 이상의 경우의 수가 있으며, 두 가지 이상의 분기가 필요하다. 이와 같은 연산을 표현하는 방식이 연쇄 조건문(chained conditional)이다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n“else if”로 연쇄 조건문을 표현하는데 주목한다. 이번에도 단 한번의 분기만 실행된다.\n{width = 100%}\nif else 문의 갯수에 제한은 없다. else 절이 있다면, 거기서 끝마쳐야 하지만, 연쇄 조건문에 필히 있어야 하는 것은 아니다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n각 조건은 순서대로 점검한다. 만약 첫 번째가 거짓이면, 다음을 점검하고 계속 점검해 나간다. 순서대로 진행 중에 하나의 조건이 참이면, 해당 분기가 수행되고, if문 전체는 종료된다. 설사 하나 이상의 조건이 참이라고 하더라도, 첫 번째 참 분기만 수행된다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>조건부 실행</span>"
    ]
  },
  {
    "objectID": "03-cont.html#r-cont-nested",
    "href": "03-cont.html#r-cont-nested",
    "title": "3  조건부 실행",
    "section": "\n3.6 중첩 조건문",
    "text": "3.6 중첩 조건문\n하나의 조건문이 조건문 내부에 중첩될 수 있다. 다음과 같이 삼분 예제를 작성할 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n바깥 조건문에는 두 개의 분기가 있다. 첫 분기는 간단한 문장을 담고 있다. 두 번째 분기는 자체가 두 개의 분기를 가지고 있는 또 다른 if문을 담고 있다. 자체로 둘다 조건문이지만, 두 분기 모두 간단한 문장이다.\n\n\n\n\n\n그림 3.3: 중첩 조건문\n\n\n괄호를 사용하는 것이 구조를 명확히 하지만, 중첩 조건문의 경우 가독성이 급격히 저하된다. 일반적으로, 가능하면 중첩 조건문을 피하는 것을 권장한다.\n논리 연산자를 사용하여 중첩 조건문을 간략히 할 수 있다. 예를 들어, 단일 조건문으로 가지고 앞의 코드를 다음과 같이 재작성할 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nprint문은 두 개 조건문을 통과될 때만 실행돼서, & 연산자와 동일한 효과를 거둘 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>조건부 실행</span>"
    ]
  },
  {
    "objectID": "03-cont.html#r-cont-try-catch",
    "href": "03-cont.html#r-cont-try-catch",
    "title": "3  조건부 실행",
    "section": "\n3.7 try, catch 활용 예외처리",
    "text": "3.7 try, catch 활용 예외처리\n함수 readline()와 as.integer()을 사용하여 앞에서 사용자가 타이핑한 숫자를 읽어 정수로 파싱하는 프로그램 코드를 살펴보았다. 또한 이렇게 코딩하는 것이 얼마나 위험한 것인지도 살펴보았다.\n\nspeed &lt;- readline(prompt=prompts)\n#&gt; 속도가 얼마나 됩니까? 뭐라고 하셨나요!!!\nas.integer(speed) + 5\n#&gt; [1] NA\n\nR 인터프리터에서 상기 문장을 실행하면, 인터프리터에서 새로운 프롬프트로 되고, “이런(oops)” 잠시 후에, 다음 문장 실행으로 넘어간다.\n하지만, 만약 코드가 R 스크립트로 실행이 되어 오류가 발생하면, 역추적해서 그 지점에서 즉시 멈추게 된다. 다음에 오는 문장은 실행하지 않는다.\n화씨 온도를 섭씨 온도로 변환하는 간단한 프로그램이 있다. 다소 길이가 긴데, R 콘솔에서 실행하는 코드와 쉘에서 실행할 때 사용자 입력을 받는 것을 달리 처리하기 위함이다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n이 코드를 실행해서 적절하지 않은 입력값을 넣게 되면, 다소 불친절한 오류 메시지와 함께 간단히 작동을 멈춘다.\n\n\nR\n파이썬\n\n\n\nD:\\docs\\r4inf\\code&gt; Rscript fahrenheit.R\n화씨 온도를 입력하세요: 72\n[1] 22.22222\n\nD:\\docs\\r4inf\\code&gt; Rscript fahrenheit.R\n화씨 온도를 입력하세요: fred\n[1] \"경고: 숫자를 입력해주세요!\"\n\n\nD:\\docs\\r4inf\\code&gt; python fahrenheit.py\n화씨 온도를 입력하세요: 72\n22.22222\n\nD:\\docs\\r4inf\\code&gt; python fahrenheit.py\n화씨 온도를 입력하세요: fred\n숫자를 입력해주세요!\n\n\n\n이런 종류의 예측을 하거나, 예측하지 못한 오류를 다루기 위해서 R에는 “try / except”로 불리는 조건 실행 구조가 내장되어 있다. try와 except의 기본적인 생각은 일부 명령문에 문제가 있다는 것을 사전에 알고 있고, 만약 그 때문에 오류가 발생하게 된다면 대신 프로그램에 추가해서 명령문을 실행한다는 것이다. except 블록의 문장은 오류가 없다면 실행되지 않는다. 문장 실행에 대해서 R try, except 기능을 보험으로 생각할 수도 있다.\nR은 tryCatch 블록 문장을 우선 실행한다. 만약 모든 것이 순조롭다면, 코드를 실행하고 error 블록은 건너뛴다. 만약 tryCatch 블록에서 오류 error 혹은 경고 warning이 발생하면, R은 tryCatch 블록에서 빠져 나와 warning, error 문장을 수행한다.\ntryCatch문으로 예외사항을 다루는 것을 예외 처리한다(catching an exception)고 부른다.예제에서 warning 절에서는 단순히 오류 메시지를 출력만 한다. 이유는 as.numeric 함수는 잘못된 자료형의 입력값을 받아 경고를 발생시키며 NA를 반환했기 때문에 tryCatch는 error 블록 대신 warning 블록을 실행했다. 대체로, 예외 처리를 통해서 경고하거나, 오류를 고치거나, 재시작하거나, 최소한 프로그램이 정상적으로 종료될 수 있게 한다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>조건부 실행</span>"
    ]
  },
  {
    "objectID": "03-cont.html#r-cont-short-circuit",
    "href": "03-cont.html#r-cont-short-circuit",
    "title": "3  조건부 실행",
    "section": "\n3.8 논리 연산식 단락 평가",
    "text": "3.8 논리 연산식 단락 평가\nx &gt;= 2 & (x/y) &gt; 2 와 같은 논리 표현식을 R에서 처리할 때, 왼쪽에서부터 오른쪽으로 표현식을 평가한다. & 정의 때문에 x 가 2보다 작다면, x &gt;= 2은 거짓(FALSE)으로, 전체적으로 (x/y) &gt; 2 이 참(TRUE) 혹은 거짓(FALSE) 이냐에 관계없이 거짓(FALSE)이 된다.\n나머지 논리 표현식을 평가해도 나아지는 것이 없다고 R이 자동으로 탐지할 때, 평가를 멈추고 나머지 논리 표현식에 대한 연산도 중지한다. 최종값이 이미 결정되었기 때문에 더 이상의 논리 표현식의 평가가 멈출 때, 이를 단락(Short-circuiting) 평가라고 한다.\n좋은 점처럼 보일 수 있지만, 단락 행동은 가디언 패턴(guardian pattern)으로 불리는 좀 더 똑똑한 기술로 연계된다. R 인터프리터의 다음 코드를 살펴보자.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n세번째 연산은 일반적으로 실패하는데 이유는 (x/y) 연산을 평가할 때 y 가 0 이어서 실행오류가 발생된다. 하지만, R에서는 0으로 나누게 되면 Inf가 되어 계산결과는 참이 되어 전체적으로 참이 된다. 하지만, 두 번째 예제의 경우 거짓(FALSE)이 되지 않는데 이유는 x &gt;= 2 이 거짓(FALSE)으로, 전체가 거짓(FALSE)이 되어 단락(Short-circuiting) 평가 규칙에 의해 (x/y) 평가는 실행되지 않게 된다.\n평가 오류가 발생되기 전에 가디언(gardian) 평가식을 전략적으로 배치해서 논리 표현식을 다음과 같이 구성한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n첫 번째 논리 표현식은 x &gt;= 2 이 거짓(FALSE) 이라 &에서 멈춘다. 두 번째 논리 표현식은 x &gt;= 2 이 참(TRUE), y != 0 은 거짓(FALSE) 이라 (x/y)까지 갈 필요가 없다. 세 번째 논리 표현식은 (x/y) 연산이 끝난 후에 y != 0 이 수행되어서 오류가 발생한다. 두 번째 표현식에서 y 가 0 이 아닐 때만, (x/y)을 실행하도록 y != 0 이 가디언(gardian) 역할을 수행한다고 말할 수 있다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>조건부 실행</span>"
    ]
  },
  {
    "objectID": "03-cont.html#r-cont-debugging",
    "href": "03-cont.html#r-cont-debugging",
    "title": "3  조건부 실행",
    "section": "\n3.9 디버깅",
    "text": "3.9 디버깅\n오류가 발생했을 때, 화면에 출력되는 역추적(traceback)에는 상당한 정보가 담겨있다. 하지만,특히 스택에 많은 프레임이 있는 경우 엄청나게 보여 엄두가 나지 않을 수도 있다. 대체로 가장 유용한 정보는 다음과 같은 것이 있다.\n\n어떤 종류의 오류인가.\n어디서 발생했는가.\n\n구문 오류는 대체로 발견하기 쉽지만, 몇 가지는 애매하다. 파이썬의 경우 공백(space)과 탭(tab)의 차이가 눈에 보이지 않아 통상 무시하고 넘어가기 쉽기 때문에 공백 오류를 잡아내기가 까다롭다. R로 텍스트 데이터를 분석할 경우 눈에는 보이지 않지만 공백문자(White space) 문자가 여러가지 문제를 일으키는 경우가 많다. 특히 한글 인코딩과 결합될 경우 더욱 그렇다.\n대체로 오류 메시지는 문제가 어디에서 발견되었는지를 지칭하지만, 실제 오류는 코드 앞에 종종 선행하는 줄에 있을 수 있다.\n동일한 문제가 실행 오류에도 있다. 데시벨(decibels)로 신호 대비 잡음비를 계산한다고 가정하자. 공식은 \\(\\text{SNR}_{db} = 10 \\log_{10} (P_{signal} / P_{noise})\\) 이다. R에서 아래와 같이 작성할 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nsignal_power 와 noise_power 를 부동 소수점값으로 표현되어 R코드에는 NaN를 출력하며 문제가 없지만, 파이썬으로 실행하게 되면 다음과 같은 오류가 나온다.\n\nTraceback (most recent call last):\n  File \"C:/Users/tidyverse/AppData/Local/Programs/Python/Python311/book.py\", line 11, in &lt;module&gt;\n    decibels = 10 * math.log10(ratio)\nValueError: math domain error\n\n오류 메지지가 7번째 줄에 있다고 지칭하지만, 잘못된 것은 없다. 실제 오류를 발견하기 위해서, 출력값이 음수인 ratio값을 print문을 사용해서 출력하는 것이 도움이 된다. 문제는 5번째 줄에 있는데, 왜냐하면 noise_power가 음수로 설정되어 있어 signal_power / noise_power 계산 자체는 문제가 없어 보이지만, 결과적으로 ratio는 음수가 된다. 따라서 math.log10(ratio) 호출 시 ValueError가 발생하는데 로그 함수는 음수에 대해 정의되지 않기 때문이다. 따라서 오류 메시지는 math.log10 함수 호출에서 발생하는 것처럼 보이지만, 실제 원인은 noise_power에 부적절한 값 설정에 있기 때문에 발생한다.\n대체로, 오류 메시지는 문제가 어디에서 발견되었는지를 알려주지만, 종종 문제의 원인이 어디에서 발생했는지는 알려주지 않는다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>조건부 실행</span>"
    ]
  },
  {
    "objectID": "03-cont.html#r-cont-terminology",
    "href": "03-cont.html#r-cont-terminology",
    "title": "3  조건부 실행",
    "section": "\n3.10 용어 정의",
    "text": "3.10 용어 정의\n\n몸통 부문(body): 복합 문장 내부에 일련의 문장문\n부울 표현식(boolean expression): 참(TRUE) 혹은 거짓(FALSE)의 값을 가지는 표현식\n분기(branch): 조건문에서 대안 문장의 한 흐름\n연쇄 조건문(chained conditional): 일련의 대안 분기가 있는 조건문\n비교 연산자(comparison operator): 피연산자를 ==, !=, &gt;, &lt;, &gt;=, &lt;=로 비교하는 연산자\n조건문(conditional statement): 조건에 따라 명령의 흐름을 제어하는 명령문\n조건(condition): 조건문에서 어느 분기를 실행할지 결정하는 불 표현식\n복합문(compound statement): 머리부문(head)과 몸통부문(body)으로 구성된 문장. 머리부문은 콜론(:)으로 끝나며, 몸통부문은 머리부문을 기준으로 들여쓰기로 구별된다.\n가디언 패턴(guardian pattern): 단락(short circuit) 행동을 잘 이용하도록 논리 표현식을 구성하는 것\n논리 연산자(logical operator): 불 표현식을 결합하는 연산자 중의 하나 (and, or, not)\n중첩 조건문(nested conditional): 하나의 조건문이 다른 조건문 분기에 나타나는 조건문.\n역추적(traceback): 예외 사항이 발생했을 때 실행되고, 출력되는 함수 리스트\n단락(short circuit): 나머지 표현식 평가를 할 필요없이 최종 결과를 알기 때문에, 파이썬이 논리 표현식 평가를 진행하는 중간에 평가를 멈출 때.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>조건부 실행</span>"
    ]
  },
  {
    "objectID": "03-cont.html#r-cont-ex",
    "href": "03-cont.html#r-cont-ex",
    "title": "3  조건부 실행",
    "section": "연습문제",
    "text": "연습문제\n\n40시간 이상 일할 경우 시급을 1.5배 더 종업원에게 지급하는 봉급계산 프로그램을 다시 작성하세요.\n\n\n시간을 입력하시오: 35.51\n시급을 입력하시오: 7530\n알바비: 263550\n\n\n\ntryCatch를 사용하여 봉급계산 프로그램을 다시 작성하세요. 숫자가 아닌 입력값을 잘 처리해서 숫자 아닌 입력값이 들어왔을 때 메시지를 출력하고 정상적으로 프로그램을 종료하도록 합니다. 프로그램 출력 결과는 다음과 같습니다.\n\n\n시간을 입력하시오: 35.51\n시급을 입력하시오: 칠만원\n오류, 다시 숫자를 입력하세요\n\n시급을 입력하시오: 7만원\n오류, 다시 숫자를 입력하세요\n\n\n0.0과 1.0 사이의 점수를 출력하는 프로그램을 작성하세요. 만약 점수가 범위 밖이면 오류를 출력합니다. 만약 점수가 0.0과 1.0 사이라면, 다음의 테이블에 따라 등급을 출력합니다.\n\n\n점수    등급\n&gt;= 0.9   A\n&gt;= 0.8   B\n&gt;= 0.7   C\n&gt;= 0.6   D\n&lt; 0.6    F\n\n점수를 입력하시오: 0.95\nA\n\n점수를 입력하시오: 만점\n올바른 점수가 아닙니다.\n\n점수를 입력하시오: 10.0\n올바른 점수가 아닙니다.\n\n점수를 입력하시오: 0.75\nC\n\n점수를 입력하시오: 0.5\nF\n\n\n상기 보이는 것처럼 반복적으로 프로그램을 실행해서 다양한 다른 입력값을 테스트해 보세요.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>조건부 실행</span>"
    ]
  },
  {
    "objectID": "04-func.html",
    "href": "04-func.html",
    "title": "4  함수",
    "section": "",
    "text": "4.1 함수 호출\n프로그래밍 문맥에서, 함수(function)는 명명된 명령어의 집합으로 특정 연산을 수행한다. 함수를 정의할 때는 함수명과 수행할 명령어들을 명기한다. 나중에, 함수를 이름으로 “호출(call)”한다. 이미 함수 호출(function call)의 예제를 살펴봤다.\ntypeof(32)\n#&gt; [1] \"double\"\n함수명은 typeof()이다. 괄호안의 표현식을 함수의 인자(argument)라고 한다. 인자는 함수 입력으로 함수 내부로 전달되는 값이나 변수다. 앞선 typeof() 함수에 대한 결과는 인자의 자료형(type)이다.\n통상 함수가 인자를 “받아” 결과를 “반환”한다. 결과를 결과값(return value)이라 부른다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수</span>"
    ]
  },
  {
    "objectID": "04-func.html#r-func-builtin",
    "href": "04-func.html#r-func-builtin",
    "title": "4  함수",
    "section": "\n4.2 내장(Built-in) 함수",
    "text": "4.2 내장(Built-in) 함수\n함수를 정의할 필요없이 사용할 수 있는 내장함수가 R에는 많다. 공통 문제를 해결할 수 있는 함수를 R을 창시자(Ross Ihaka, Robert Gentleman)가 작성해서 누구나 사용할 수 있도록 R에 포함했다.\nmax와 min 함수는 벡터 최소값과 최대값을 각각 계산해서 출력한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nmax 함수는 벡터의 “가장 큰 값”, 상기 예제에서 “5”, min 함수는 “가장 작은 값”를, 상기 예제에서는 “1”을 출력한다.\n매우 자주 사용되는 또 다른 내장 함수는 얼마나 많은 항목이 있는지 출력하는 length() 함수가 있다. 만약 length() 함수의 인수가 벡터이면 벡터에 있는 원소 갯수를 반환한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n함수가 벡터에만 국한된 것이 아니라, 뒷장에서 보듯이 다양한 자료형에 사용된다. 내장함수 이름은 사전에 점유된 예약어로 취급해야 한다. 예를 들어 “max”를 변수명으로 사용하지 말아야 한다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수</span>"
    ]
  },
  {
    "objectID": "04-func.html#r-func-type",
    "href": "04-func.html#r-func-type",
    "title": "4  함수",
    "section": "\n4.3 자료형 변환 함수",
    "text": "4.3 자료형 변환 함수\nA라는 자료형(type)에서 B라는 자료형(type)으로 값을 변환하는 내장 함수가 R에는 있다. as.integer()함수는 임의의 값을 입력받아 변환이 가능하면 정수형으로 변환하고, 그렇지 않으면 오류가 발생한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nas.integer()는 부동 소수점 값을 정수로 변환할 수 있지만 소수점 이하를 절사한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nas.numeric()는 정수와 문자열을 부동 소수점으로 변환한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nas.characer()은 인자를 문자열로 변환한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n파이썬을 비롯한 다른 언어에서 다뤄지지 않는 자료형이 범주형 요인(factor) 이다. 범주형 자료구조를 표현하는 일반적인 자료형으로 데이터 분석 및 모형 개발에 빈번하게 사용된다. as.factor()은 인자를 요인형으로 변환한다. 파이썬에서 범주형 데이터를 다루기 위해서는 pandas 패키지를 설치하고 Categorical() 클래스를 사용해야 한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수</span>"
    ]
  },
  {
    "objectID": "04-func.html#r-func-random-number",
    "href": "04-func.html#r-func-random-number",
    "title": "4  함수",
    "section": "\n4.4 난수",
    "text": "4.4 난수\n동일한 입력을 받을 때, 대부분의 컴퓨터는 매번 동일한 출력값을 생성하기 때문에 결정적(deterministic)이라고 한다. 결정론이 대체로 좋은 것이다. 왜냐하면, 동일한 결과를 얻는데 동일한 계산을 기대하기 때문입니다. 하지만, 어떤 응용프로그램에 대해서 컴퓨터가 예측불가능하길 바란다. 게임이 좋은 예가 되고, 더 많은 예는 얼마든지 많다.\n진실되게 프로그램을 비결정론적으로 만드는 것이 쉽지 않은 것으로 밝혀졌지만, 적어도 비결정론적인 것처럼 보이게 하는 방법은 있다. 의사 난수(pseudorandom numbers)를 생성하는 알고리즘을 사용하는 것이 방법 중의 하나다. 의사 난수는 이미 결정된 연산에 의해서 생성된다는 점에서 진정한 의미의 난수는 아니지만, 이렇게 생성된 숫자만 봐서는 진정한 난수와 구별하는 것은 불가능에 가깝다.\nR은 데이터분석을 위해 태어난 언어라고 할 만큼 기본 내장함수로 다양한 난수 생성기를 갖추고 있다. 물론 난수 생성기로 생성되는 숫자는 의사난수다. 이하 의사 난수 대신 “랜덤(random)”으로 간략히 부르기로 한다.\nrunif() 함수는 0.0 과 1.0 사이 부동 소수점 난수를 반환한다. runif() 함수 내부에 min, max 인자를 지정하여 난수 최소, 최대값을 범위를 설정할 수 있다. 매번 runif() 함수를 호출할 때 마다, 이미 생성된 아주 긴 난수열에서 하나씩 하나씩 뽑아 쓰다. 사례로 다음 반복문을 실행하자.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기 프로그램은 0.0 에서 1.0 구간에서 10개 난수 리스트를 생성한다.\n\n\n\n\n\n\n연습문제\n\n\n\n여러분의 컴퓨터에 프로그램을 실행해서, 어떤 난수가 생성되는지 살펴보세요. 한번 이상 프로그램을 실행하여 보고, 어떤 난수가 생성되는지 다시 살펴보세요.\n\n\nrunif() 함수는 난수를 다루는 많은 함수 중의 하나다. sample() 함수는 정수 난수 범위와 난수 갯수를 매개 변수를 입력받아 최저값(low)과 최고값(high) 사이 (최저값과, 최저값 모두 포함) 정수를 반환한다. 정당으로 구성된 모집단에서 정당을 하나 뽑는 방법도 유사하다.\nsample(1:10, 5) 실행문은 1 ~ 10 사이 정수 10개 중에서 난수로 5개를 추출한다는 뜻이다.\n무작위로 특정 벡터에서 요소를 하나 뽑아내기 위해, sample()를 동일하게 사용한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n또한 runif() 모듈을 활용하여 정규분포, 지수분포, 감마분포 및 기타 연속형 분포에서 난수를 생성하는 함수도 제공된다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수</span>"
    ]
  },
  {
    "objectID": "04-func.html#r-func-math",
    "href": "04-func.html#r-func-math",
    "title": "4  함수",
    "section": "\n4.5 수학 함수",
    "text": "4.5 수학 함수\nR은 가장 친숙한 수학 함수를 제공하는 수학 모듈이 있다. 기본 수학 모듈이 내장함수로 기본 설치되어 있어서 별도 설치와 호출작업은 필요없다. 점 표기법(dot notation)이라고 불리는 표기법을 사용해서, 여러 함수 중에서 특정 함수에 접근하기 위해서 모듈/객체 이름과 함수 이름을 명시해서 파이썬에서 활용하기도 하지만, R에서는 필요없다.\nR과 파이썬 언어는 서로 다른 설계 철학과 기능을 지니고 있다. 파이썬에서 math.sqrt()는 math 모듈 내 sqrt 함수를 호출하는 방식으로 객체 지향적 특성과 모듈 시스템 특성을 그대로 반영한다.\n반면에, R에서는 함수가 기본적으로 전역 네임스페이스에 위치하거나, 라이브러리를 로드할 때 해당 라이브러리의 모든 함수가 전역 네임스페이스에 적재된다. 예를 들어, ggplot2 패키지 함수들은 패키지를 로드한 후에 바로 함수 이름만으로 호출할 수 있다. 경우에 따라서는 파이썬 점 표기법과 유사하게 패키지명::함수명과 같은 방식으로 특정 패키지 함수만 골라 사용하는 경우도 흔다. 예를 들어, filter() 함수를 명기하기 위해 dplyr::filter()와 같이 사용한다.\n신호-대-소음비 로그 밑이 10(log10()) 을 계산한 후 라디안 사인값을 찾는 코드를 살펴보자. 변수의 이름이 힌트를 주는데, sin()과 다른 삼각함수(cos(), tan() 등)는 라디안을 인자로 받는다. 도(degree)에서 라디안(radian)으로 변환하기 위해서 360으로 나누고 \\(2\\pi\\)를 곱한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\npi 표현식은 수학 모듈에서 pi 변수를 얻는데, \\(\\pi\\) 값과 비교하여 15 자리수까지 정확하고 근사적으로 수렴한다.\n삼각함수를 배웠다면, 앞선 연산 결과를 2에 루트를 씌우고 2로 나누어 비교 검증한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수</span>"
    ]
  },
  {
    "objectID": "04-func.html#r-func-new-function",
    "href": "04-func.html#r-func-new-function",
    "title": "4  함수",
    "section": "\n4.6 신규 함수 추가",
    "text": "4.6 신규 함수 추가\n지금까지 R 설치 시 함께 설치되는 함수만 사용했지만 새로운 함수를 추가하는 것도 가능하다. 함수 정의(function definition)는 신규 함수명과 함수가 호출될 때 실행될 일련의 문장을 명세한다. 신규로 함수를 정의하면, 프로그램 실행 중에 반복해서 함수를 재사용할 수 있다. 다음에 예제가 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nfunction는 “이것이 함수 정의다”를 표시하는 예약어다. 함수 이름은 print_lyrics()이다. 함수 이름을 명명 규칙은 변수명과 동일하다. 문자, 숫자, 그리고 몇몇 문장 부호는 사용할 수 있지만, 첫 문자가 숫자는 될 수 없다. 함수 이름으로 예약어를 사용할 수 없고, 함수 이름과 동일한 변수명은 피해야 한다.\n함수명 뒤 빈 괄호는 이 함수가 어떠한 인자도 갖지 않는다는 것을 나타낸다. 나중에, 입력값으로 인자를 가지는 함수를 작성해 볼 것이다.\n함수 정의 첫번째 줄을 머리 부문(헤더, header), 나머지 부문을 몸통 부문(바디, body)라고 부른다. 머리 부문은 ()으로 끝나고, 몸통 부문은 괄호로 감싸야 한다. 몸통 부문에는 제약 없이 문장을 작성할 수 있다.\nprint()문의 문자열은 이중 인용부호로 감싼다. 단일 인용부호나, 이중 인용부호나 차이는 없다. 대부분의 경우 이중 인용부호를 사용하고, 이중 인용부호가 문자열에 나타나는 경우, 단일 인용부호를 사용하여 이중 인용부호가 출력되게 감싼다.\n만약 함수 정의를 인터렉티브 모드에서 타이핑을 하면, 함수 정의가 끝나지 않았다는 것을 의미로 더하기 부호(+)가 출력된다.\n함수 정의를 끝내기 위해서 빈 줄을 입력한다. (스크립트에서는 반듯이 필요한 것은 아니다.) 함수를 정의하게 되면 동일한 이름의 변수도 생성된다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nprint_lyrics() 값은 ‘function’ 형을 가지는 함수 객체(function object)다.\n신규 함수를 호출하는 구문은 내장 함수의 경우와 동일하다.\n\nprint_lyrics()\n\n함수를 정의하면, 또 다른 함수 내부에서 사용이 가능하다. 예를 들어, 이전 후렴구를 반복하기 위해 repeat_lyrics() 함수를 작성할 수 있다. 그리고 나서, repeat_lyrics() 함수를 호출한다.\n:::{.panel-tabset} ### R\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n4.6.1 파이썬\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n하지만, 그렇다고 실제 노래가 불려지는 것은 아니다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수</span>"
    ]
  },
  {
    "objectID": "04-func.html#r-func-how-to-use",
    "href": "04-func.html#r-func-how-to-use",
    "title": "4  함수",
    "section": "\n4.7 함수 정의와 사용법",
    "text": "4.7 함수 정의와 사용법\n앞 절의 코드 조각을 모아서 작성한 전체 프로그램은 다음과 같다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기 프로그램에는 두개의 함수(print_lyrics(), repeat_lyrics())가 있다. 함수 정의는 다른 문장처럼 수행되지만, 함수 객체를 생성한다는 점에서 차이가 있다. 함수 내부 문장은 함수가 호출되기 전까지 수행되지 않고, 함수 정의는 출력값도 생성하지 않는다.\n예상하듯이, 함수를 실행하기 전에 함수를 생성해야 한다. 다시 말해서, 처음으로 호출되기 전에 함수 정의가 실행되어야 한다.\n\n\n\n\n\n\n연습문제\n\n\n\n상기 프로그램의 마지막 줄을 최상단으로 옮겨서 함수 정의 전에 호출되도록 프로그램을 고쳐보세요. 프로그램을 실행서 오류 메시지를 확인하세요.\n\n\n\n\n\n\n\n\n연습문제\n\n\n\n함수 호출을 맨 마지막으로 옮기고, repeat_lyrics 함수 정의 뒤에 print_lyrics 함수를 옮기세요. 프로그램을 실행하게 되면 무슨 일이 발생하나요?",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수</span>"
    ]
  },
  {
    "objectID": "04-func.html#r-func-control",
    "href": "04-func.html#r-func-control",
    "title": "4  함수",
    "section": "\n4.8 실행 흐름",
    "text": "4.8 실행 흐름\n처음으로 함수가 사용되기 전에 정의되었는지를 확인하기 위해서, 명령문 실행 순서를 파악해야 하는데 이를 실행 흐름(flow of execution)이라고 한다.\n프로그램 실행은 항상 프로그램 첫 문장부터 시작한다. 명령문은 한번에 하나씩 위에서 아래로 실행된다.\n함수 정의(definitions)가 프로그램 실행 순서를 바꾸지는 않는다. 하지만, 함수 내부의 문장은 함수가 호출될 때까지 실행이 되지 않는다는 것을 기억하자.\n함수 호출은 프로그램 실행 흐름을 우회하는 것과 같다. 다음 문장으로 가기 전에, 실행 흐름은 함수 몸통 부문을 실행하고는 건너 뛰기를 시작한 지점으로 다시 돌아온다.\n함수가 또 다른 함수를 호출한다는 것을 기억할 때까지는 매우 간단하게 들린다. 함수 중간에서 프로그램이 또 다른 함수의 문장을 수행할지도 모른다. 하지만, 새로운 함수를 실행하는 중간에 프로그램이 또 다른 함수를 실행할지도 모른다!\n다행스럽게도, 파이썬은 프로그램 실행 위치를 정확히 추적한다. 그래서, 함수가 실행을 완료할 때마다, 프로그램을 함수를 호출해서 떠난 지점으로 정확히 되돌려 놓는다. 프로그램이 마지막에 도달했을 때, 프로그램은 종료한다.\n이렇게 복잡한 이야기의 교훈은 무엇일까요? 프로그램을 읽을 때, 위에서부터 아래로 읽을 필요는 없다. 때때로, 실행 흐름을 따르는 것이 좀더 이치에 맞는다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수</span>"
    ]
  },
  {
    "objectID": "04-func.html#r-func-parameter-argument",
    "href": "04-func.html#r-func-parameter-argument",
    "title": "4  함수",
    "section": "\n4.9 매개 변수와 인수",
    "text": "4.9 매개 변수와 인수\n지금까지 살펴본 몇몇 내장 함수는 인자(argument)를 요구한다. 예를 들어, sin() 함수를 호출할 때, 숫자를 인자로 넘겨야 한다. 어떤 함수는 2개 이상의 인수를 받는다. log() 는 숫자와 밑 2개의 인자가 필요하다.\n인자는 함수 내부에서 매개 변수(parameters)로 불리는 변수로 대입된다. 하나의 인자를 받는 사용자 정의 함수(user-defined function)가 예제로 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n사용자 정의 함수는 인자를 받아 매개변수 bruce에 대입한다. 함수가 호출될 때, 매개변수의 값(무엇이든 관계 없이)을 두번 출력합니다.\n사용자 정의 함수는 출력 가능한 임의의 값에 작동한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n내장함수에 적용되는 동일한 구성 규칙이 사용자 정의 함수에도 적용되어서, print_twice() 함수 인자로 표현식 어떤 종류도 가능하다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n함수가 호출되기 전에 인자에 대한 평가는 완료되어, 예제에서 rep(\"spam\",2)과 cos(pi)은 단지 1회만 평가된다.\n변수도 인자로 사용이 가능하다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n전달되는 변수명(half_chicken)은 매개 변수명(bruce)과 아무런 연관이 없다. 어떠한 값이 전달되든 호출하는 쪽과는 별개입니다. 여기 print_twice() 함수에서는 어떤 값이든 bruce로 칭해지면 된다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수</span>"
    ]
  },
  {
    "objectID": "04-func.html#r-func-void",
    "href": "04-func.html#r-func-void",
    "title": "4  함수",
    "section": "\n4.10 결과값 반환 (없는) 함수",
    "text": "4.10 결과값 반환 (없는) 함수\n수학 함수와 같은 몇몇 함수는 결과를 만들어 낸다. 좀더 좋은 이름이 없어서, 결과를 만들어 내는 함수를 결과값을 반환하는 함수(fruitful functions)라고 명명한다. print_twice()와 같이 액션을 수행하지만, 결과를 만들어 내지 않는 함수를 반환 값이 없는 함수(void functions)라고 부른다.\n결과값을 반환하는 함수를 호출할 때는 결과값을 가지고 뭔가를 하려고 한다. 예를 들어, 결과값을 변수에 대입하거나, 표현식의 일부로 사용할 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n인터랙티브 모드에서 함수를 호출할 때, R은 결과를 화면에 출력한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n하지만, 스크립트에서 결과있는 함수를 호출하고 변수에 결과값을 저장하지 않으면 반환되는 결과값은 안개속에 사라져간다!\n이 스크립트는 5의 제곱근을 계산하지만, 변수에 결과값을 저장하거나, 화면에 출력하지 않아서 그다지 유용하지는 않다.\n반환 값이 없는 함수(void functions)는 화면에 출력하거나 무엇인가 다른 효과를 가지지만, 반환값이 없다. 빈 함수를 사용하여 결과에 변수를 대입하면, NULL로 불리는 특별한 값을 얻게 된다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nNULL 값은 자신만의 특별한 값을 가지며, 문자열 ‘NULL’ 과는 같지 않다.\n함수에서 결과를 반환하기 위해서, 함수 내부에 return()문을 사용한다. 예를 들어, 두 숫자를 더해서 결과를 반환하는 addtwo()라는 간단한 함수를 작성할 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기 스크립트가 실행될 때 cat() 출력문은 “8”을 출력한다. 왜냐하면, 3과 5를 인수로 받는 addtwo() 함수가 호출되기 때문이다. 함수 내부에 매개 변수 a, b는 각각 3, 5이다. addtwo() 함수는 두 숫자 덧셈을 수행하고 added라는 로컬 변수에 저장하고, return()문을 사용해서 덧셈 결과를 반환하고,x 라는 변수에 대입해서 출력한다.\nR에서 명시적으로 return을 통해 밝히지 않더라도 함수에서 최종적으로 담고 있는 객체가 자동 반환되지만, return을 통해 명시적으로 하는 것이 추후 디버깅 등의 목적으로 더 유용하다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수</span>"
    ]
  },
  {
    "objectID": "04-func.html#r-func-why",
    "href": "04-func.html#r-func-why",
    "title": "4  함수",
    "section": "\n4.11 함수 사용 이유?",
    "text": "4.11 함수 사용 이유?\n프로그램을 여러 함수로 나누는 데 들이는 노력이 가치 있는지 항상 명확하지는 않다. 그러나 다음과 같은 몇 가지 이유는 존재한다.\n\n문장을 그룹으로 만들어 새로운 함수로 명명하는 것이 프로그램을 읽고, 이해하고, 디버그하기 좋게 한다.\n함수는 반복 코드를 제거해서 프로그램을 작고 콤팩트하게 만든다. 나중에 프로그램에 수정사항이 생기면, 단지 한 곳에서만 수정을 하면 된다.\n긴 프로그램을 함수로 나누어 작성하는 것은 작은 부분에서 버그를 수정할 수 있게 하고, 이를 조합해서 전체적으로 동작하는 프로그램을 만들 수 있다.\n잘 설계된 함수는 종종 많은 프로그램에서 유용하게 사용된다. 잘 설계된 프로그램을 작성하고 디버그를 해서 오류가 없이 만들게 되면, 나중에 재사용도 용이하다.\n\n책의 나머지 부분에서 이 개념을 설명하는 함수 정의를 종종 사용한다. “리스트에서 가장 작은 값을 찾아내는 것”과 같이 아이디어를 적절하게 추상화하여 함수를 작성하는 것이 함수를 만들고 사용하는 기술의 일부가 된다. 나중에, 리스트에서 가장 작은 값을 찾아내는 코드를 보여 줄 것입니다. 리스트를 인수로 받아 가장 작은 값을 반환하는 min() 함수를 작성해서 여러분에게 보여드릴 것이다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수</span>"
    ]
  },
  {
    "objectID": "04-func.html#r-func-debug",
    "href": "04-func.html#r-func-debug",
    "title": "4  함수",
    "section": "\n4.12 디버깅",
    "text": "4.12 디버깅\n텍스트 편집기로 스크립트를 작성한다면 공백과 탭으로 몇번씩 문제에 봉착했을 것입니다. 이런 문제를 피하는 가장 최선의 방식은 절대 탭을 사용하지 말고 공백(스페이스)를 사용하는 것이다. R을 인식하는 대부분의 텍스트 편집기는 디폴트로 이런 기능을 지원하지만, 몇몇 텍스트 편집기는 이런 기능을 지원하지 않아 탭과 공백 문제를 야기한다.\n탭과 공백은 통상 눈에 보이지 않기 때문에 디버그를 어렵게 한다. 자동으로 들여쓰기를 해주는 편집기를 프로그램 작성 시 사용한다.\n프로그램을 실행하기 전에 저장하는 것을 잊지 마세요. 몇몇 개발 환경은 자동저장 기능을 지원하지만 그렇지 않는 것도 있다. 이런 이유 때문에 텍스트 편집기에서 작성한 개발 프로그램과 실행운영하고 있는 프로그램이 같지 않을 수도 있다.\n동일하고 잘못된 프로그램을 반복적으로 실행한다면, 디버깅은 오래 걸릴 수 있다.\n작성하고 있는 코드와 실행하는 코드가 일치하는지 필히 확인하자. 확신을 하지 못한다면, 프로그램의 첫줄에 print('hello') 을 넣어서 실행해 보자. hello를 보지 못한다면, 작성하고 있는 프로그램과 실행하고 있는 프로그램은 다른 것이다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수</span>"
    ]
  },
  {
    "objectID": "04-func.html#r-func-terminology",
    "href": "04-func.html#r-func-terminology",
    "title": "4  함수",
    "section": "\n4.13 용어정의",
    "text": "4.13 용어정의\n\n\n알고리즘(algorithm): 특정 범주의 문제를 해결하는 일반적인 프로세스\n\n인자(argument): 함수가 호출될 때 함수에 제공되는 값. 이 값은 함수 내부에 상응하는 매개 변수에 대입된다.\n\n몸통 부문(body): 함수 정의 내부에 일련의 문장\n\n구성(composition): 좀더 큰 표현식의 일부분으로 표현식을 사용하거나, 좀더 큰 문장의 일부로서의 문장\n\n결정론적(deterministic): 동일한 입력값이 주어지고 실행될 때마다 동일한 행동을 하는 프로그램에 관련된 것.\n\n점 표기법(dot notation): 점과 함수명으로 모듈명을 명세함으로써 다른 모듈의 함수를 호출하는 구문.\n\n실행 흐름(flow of execution): 프로그램 실행 동안 명령문이 실행되는 순서.\n\n결과있는 함수(fruitful function): 반환값을 가지는 함수.\n\n함수(function): 유용한 연산을 수행하는 이름을 가진 일련의 명령문. 함수는 인수를 가질 수도 갖지 않을 수도 있고, 결과값을 생성할 수도 생성하지 않을 수도 있다.\n\n함수 호출(function call): 함수를 실행하는 명령문. 함수 이름과 인자 리스트로 구성된다.\n\n함수 정의(function definition): 신규 함수를 정의하는 명령문으로 이름, 매개변수, 실행 명령문을 명세한다.\n\n함수 객체(function object): 함수 정의로 생성되는 값. 함수명은 함수 객체를 참조하는 변수다.\n\n머리 부문(header): 함수 정의의 첫번째 줄\n\n가져오기 문(import statement): 모듈 파일을 읽어 모듈 개체를 생성하는 명령문\n\n모듈 개체(module object): import문에 의해서 생성된 모듈에 정의된 코드와 데이터에 접근할 수 있는 값\n\n매개 변수(parameter): 인자로 전달된 값을 참조하기 위해 함수 내부에 사용되는 이름\n\n의사 난수(pseudorandom): 난수처럼 보이는 일련의 숫자와 관련되어 있지만, 결정론적 프로그램에 의해 생성된다.\n\n반환 값(return value): 함수의 결과. 함수 호출이 표현식으로 사용된다면, 반환값은 표현식의 값이 된다.\n\n빈 함수(void function): 반환값을 갖지 않는 함수",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수</span>"
    ]
  },
  {
    "objectID": "04-func.html#r-func-ex",
    "href": "04-func.html#r-func-ex",
    "title": "4  함수",
    "section": "연습문제",
    "text": "연습문제\n\nR “function” 키워드의 목적은 무엇입니까?\n\n“다음의 코드는 정말 좋다”라는 의미를 가진 속어\n함수 정의를 표현한다.\n다음의 들여쓰기 코드 부문은 나중을 위해 저장되야 된다는 것을 표시한다.\n2와 3 모두 사실\n위 모두 거짓\n\n\n다음 R 프로그램은 무엇을 출력할까요?\n\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nZap ABC jane fred jane\n\nZap ABC Zap\n\nABC Zap jane\n\nABC Zap ABC\n\nZap Zap Zap\n\n\n프로그램 작성 시 (hours와 rate)을 매개 변수로 갖는 함수 computepay()을 생성하여, 초과근무에 대해서는 50％ 초과 근무수당을 지급하는 봉급 계산 프로그램을 다시 작성하세요.\n\n\n시간을 입력하시오: 45\n시급을 입력하시오: 10\n시급: 475\n\n\n매개 변수로 점수를 받아 문자열로 등급을 반환하는 computegrade() 함수를 사용하여 앞장의 등급 프로그램을 다시 작성하세요.\n\n\n점수    등급\n&gt;= 0.9   A\n&gt;= 0.8   B\n&gt;= 0.7   C\n&gt;= 0.6   D\n&lt; 0.6    F\n\n점수를 입력하시오: 0.95\nA\n\n점수를 입력하시오: 만점\n올바른 점수가 아닙니다.\n\n점수를 입력하시오: 10.0\n올바른 점수가 아닙니다.\n\n점수를 입력하시오: 0.75\nC\n\n점수를 입력하시오: 0.5\nF\n\n반복적으로 프로그램을 실행해서 다양한 다른 입력값을 테스트해 보세요.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>함수</span>"
    ]
  },
  {
    "objectID": "05-loop.html",
    "href": "05-loop.html",
    "title": "5  반복",
    "section": "",
    "text": "5.1 변수 갱신\n대입문의 흔한 패턴은 변수를 갱신하는 대입문이다. 변수의 새로운 값은 이전 값에 의존한다.\nx &lt;- x + 1\n상기 예제는 “현재 값 x에 1을 더해서 x를 새로운 값으로 갱신한다.”\n만약 존재하지 않는 변수를 갱신하면, 오류가 발생한다. 왜냐하면 x에 값을 대입하기 전에 R이 오른쪽을 먼저 평가하기 때문이다.\nx &lt;- x + 1\nError: object 'x' not found\n변수를 갱신하기 전에 간단한 변수 대입으로 통상 먼저 초기화(initialize)한다.\n1을 더해서 변수를 갱신하는 것을 증가(increment)라고 하고, 1을 빼서 변수를 갱신하는 것을 감소(decrement)라고 한다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>반복</span>"
    ]
  },
  {
    "objectID": "05-loop.html#r-iter-update",
    "href": "05-loop.html#r-iter-update",
    "title": "5  반복",
    "section": "",
    "text": "R\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>반복</span>"
    ]
  },
  {
    "objectID": "05-loop.html#r-iter-while",
    "href": "05-loop.html#r-iter-while",
    "title": "5  반복",
    "section": "\n5.2 while문",
    "text": "5.2 while문\n종종 반복적인 작업을 자동화하기 위해서 컴퓨터를 사용한다. 오류 없이 동일하거나 비슷한 작업을 반복하는 일은 컴퓨터가 사람보다 잘한다. 반복이 매우 흔한 일이어서, R에서 반복 작업을 쉽게 하도록 몇가지 언어적 기능을 제공한다.\nR에서 반복의 한 형태가 while문이다. 다음은 5 에서부터 거꾸로 세어서 마지막에 “Blastoff(발사)!”를 출력하는 간단한 프로그램이다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n마치 영어를 읽듯이 while을 읽어 내려갈 수 있다. n이 0 보다 큰 동안에 n의 값을 출력하고 n 값에서 1만큼 뺀다. 0 에 도달했을 때, while문을 빠져나가 Blastoff(발사)!“를 화면에 출력한다.\n좀더 형식을 갖춰 정리하면, 다음이 while문에 대한 실행 흐름에 대한 정리다.\n\n조건을 평가해서 참(TRUE) 혹은 거짓(FALSE)를 산출한다.\n만약 조건이 거짓이면, while문을 빠져나가 다음 문장을 계속 실행한다.\n만약 조건이 참이면, 몸통 부문의 문장을 실행하고 다시 처음 1번 단계로 돌아간다.\n\n3번째 단계에서 처음으로 다시 돌아가는 반복을 하기 때문에 이런 종류의 흐름을 루프(loop)라고 부른다. 매번 루프 몸통 부문을 실행할 때마다, 이것을 반복(iteration)이라고 한다. 상기 루프에 대해서 “5번 반복했다”고 말한다. 즉, 루프 몸통 부문이 5번 수행되었다는 의미가 된다.\n루프 몸통 부문은 필히 하나 혹은 그 이상의 변수값을 바꾸어서 종국에는 조건식이 거짓(FALSE)이 되어 루프가 종료되게 만들어야 한다. 매번 루프가 실행될 때마다 상태를 변경하고 언제 루프가 끝날지 제어하는 변수를 반복 변수(iteration variable)라고 한다. 만약 반복 변수가 없다면, 루프는 영원히 반복될 것이고, 결국 무한 루프(infinite loop)에 빠질 것이다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>반복</span>"
    ]
  },
  {
    "objectID": "05-loop.html#r-iter-infinite-loop",
    "href": "05-loop.html#r-iter-infinite-loop",
    "title": "5  반복",
    "section": "\n5.3 무한 루프",
    "text": "5.3 무한 루프\n프로그래머에게 무한한 즐거움의 원천은 아마도 “거품내고, 헹구고, 반복” 이렇게 적혀있는 샴프 사용법 문구가 무한루프라는 것을 알아차릴 때일 것이다. 왜냐하면, 얼마나 많이 루프를 실행해야 하는지 말해주는 반복 변수(iteration variable)가 없어서 무한 반복하기 때문입니다.\n숫자를 꺼꾸로 세는 (countdown) 예제는 루프가 끝나는 것을 증명할 수 있다. 왜냐하면 n값이 유한하고, n이 매번 루프를 돌 때마다 작아져서 결국 0 에 도달할 것이기 때문이다. 다른 경우 반복 변수가 전혀 없어서 루프가 명백하게 무한 반복한다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>반복</span>"
    ]
  },
  {
    "objectID": "05-loop.html#r-iter-infinite-loop-break",
    "href": "05-loop.html#r-iter-infinite-loop-break",
    "title": "5  반복",
    "section": "\n5.4 무한 반복과 break\n",
    "text": "5.4 무한 반복과 break\n\n가끔 몸통 부문을 절반 진행할 때까지 루프를 종료해야하는 시점인지 확신하지 못한다. 이런 경우 의도적으로 무한 루프를 작성하고 break 문을 사용하여 루프를 빠져 나온다.\n다음 루프는 명백하게 무한 루프(infinite loop)가 되는데 이유는 while문 논리 표현식이 단순히 논리 상수 참(TRUE)으로 되어 있기 때문이다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n실수하여 상기 프로그램을 실행한다면, 폭주하는 R 프로세스를 어떻게 멈추는지 빨리 배우거나, 컴퓨터의 전원 버튼이 어디에 있는지 찾아야 할 것이다. 표현식 상수 값이 참(TRUE)이라는 사실로 루프 상단 논리 연산식이 항상 참 값이여서 프로그램이 영원히 혹은 배터리가 모두 소진될 때까지 실행된다.\n이것이 역기능 무한 루프라는 것은 사실이지만, 유용한 루프를 작성하기 위해는 이 패턴을 여전히 이용할 것이다. 이를 위해서 루프 몸통 부문에 break문을 사용하여 루프를 빠져나가는 조건에 도달했을 때, 루프를 명시적으로 빠져나갈 수 있도록 주의깊게 코드를 추가해야 한다.\n예를 들어, 사용자가 done을 입력하기 전까지 사용자로부터 입력값을 받는다고 가정해서 프로그램 코드를 다음과 같이 작성한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n루프 조건이 항상 참(TRUE)이여서 break문이 호출될 때까지 루프는 반복적으로 실행된다.\n매번 프로그램이 꺾쇠 괄호로 사용자에게 명령문을 받을 준비를 한다. 사용자가 done을 타이핑하면, break문이 실행되어 루프를 빠져나온다. 그렇지 않은 경우 프로그램은 사용자가 무엇을 입력하든 메아리처럼 입력한 것을 그대로 출력하고 다시 루프 처음으로 되돌아 간다. 다음 예제로 실행한 결과가 있다.\n\n&gt; hello there\nhello there\n&gt; finished\nfinished\n&gt; done\n&gt; done\nError: object 'done' not found\n\nwhile 루프를 이와 같은 방식으로 작성하는 것이 흔한데 프로그램 상단에서 뿐만 아니라 루프 어디에서나 조건을 확인할 수 있고 피동적으로 “이벤트가 발생할 때까지 계속 실행” 대신에, 적극적으로 “이벤트가 생겼을 때 중지”로 멈춤 조건을 표현할 수 있다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>반복</span>"
    ]
  },
  {
    "objectID": "05-loop.html#r-iter-stop",
    "href": "05-loop.html#r-iter-stop",
    "title": "5  반복",
    "section": "\n5.5 next로 반복 종료",
    "text": "5.5 next로 반복 종료\n때때로 루프를 반복하는 중간에서 현재 반복을 끝내고, 다음 반복으로 즉시 점프하여 이동하고 싶을 때가 있다. 현재 반복 루프 몸통 부분 전체를 끝내지 않고 다음 반복으로 건너뛰기 위해서 next문을 사용한다.\n사용자가 “done”을 입력할 때까지 입력값을 그대로 복사하여 출력하는 루프 예제가 있다. 하지만 R 주석문처럼 해쉬(#)로 시작하는 줄은 출력하지 않느다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nnext문이 추가된 새로운 프로그램을 샘플로 실행했다.\n\n&gt; hello there\n[1] hello there\n&gt; # 주석이라 출력하지 마세요!\n&gt; print this!\n[2] print this!\n&gt; done\n완료!\n\n해쉬 기호(#)로 시작하는 줄을 제외하고 모든 줄을 출력한다. 왜냐하면, next문이 실행될 때,현재 반복을 종료하고 while문 처음으로 돌아가서 다음 반복을 실행하게 되어서 print문을 건너뛴다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>반복</span>"
    ]
  },
  {
    "objectID": "05-loop.html#r-iter-for",
    "href": "05-loop.html#r-iter-for",
    "title": "5  반복",
    "section": "\n5.6 명확한 루프 - for\n",
    "text": "5.6 명확한 루프 - for\n\n때때로, 단어 리스트나, 파일의 줄, 숫자 리스트 같은 사물의 집합에 대해 루프를 반복할 때가 있다. 루프를 반복할 사물 리스트가 있을 때, for문을 사용해서 확정 루프(definite loop)를 구성한다.\nwhile문을 불확정 루프(indefinite loop)라고 하는데, 왜냐하면 어떤 조건이 거짓(FALSE)가 될 때까지 루프가 단순히 계혹해서 돌기 때문이다. 하지만, for루프는 확정된 항목의 집합에 대해서 루프가 돌게 되어서 집합에 있는 항목만큼만 실행이 된다.\nfor문이 있고, 루프 몸통 부문으로 구성된다는 점에서 for루프 구문은 while루프 구문과 비슷하다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nR 용어로, 변수 friends는 3개의 문자열을 가지는 벡터이며, for 루프는 벡터내 원소를 하나씩 하나씩 찾아서 벡터에 있는 3개 문자열 각각에 대해 출력을 실행하여 다음 결과를 얻게 된다.\n\n안녕하세요: 철수 \n안녕하세요: 정훈 \n안녕하세요: 한표 \n[1] \"완료!\"\n\nfor 루프를 영어로 번역하는 것이 while문을 번역하는 것과 같이 직접적이지는 않다. 하지만, 만약 friends를 집합(set)으로 생각한다면 다음과 같다. friends라고 명명된 집합에서 friend 각각에 대해서 한번씩 for 루프 몸통 부문에 있는 문장을 실행하라.\nfor 루프를 살펴보면, for와 in은 R 예약어이고 friend와 friends는 변수이다.\n\nfor (friend in friends) {\n  cat('안녕하세요:', friend, \"\\n\")\n}\n\n특히, friend는 for 루프의 반복 변수(iteration variable)다. 변수 friend는 루프가 매번 반복할 때마다 변하고, 언제 for 루프가 완료되는지 제어한다. 반복 변수는 friends 변수에 저장된 3개 문자열을 순차적으로 훑고 간다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>반복</span>"
    ]
  },
  {
    "objectID": "05-loop.html#r-iter-for-pattern",
    "href": "05-loop.html#r-iter-for-pattern",
    "title": "5  반복",
    "section": "\n5.7 루프 패턴",
    "text": "5.7 루프 패턴\n종종 for문과 while문을 사용하여, 벡터나 리스트 항목, 파일 콘텐츠를 훑어 자료에 있는 가장 큰 값이나 작은 값 같은 것을 찾는다.\nfor나 while 루프는 일반적으로 다음과 같이 구축된다.\n\n루프가 시작하기 전에 하나 혹은 그 이상의 변수를 초기화\n루프 몸통부분에 각 항목에 대해 연산을 수행하고, 루프 몸통 부분의 변수 상태를 변경\n루프가 완료되면 결과 변수의 상태 확인\n\n루프 패턴의 개념과 작성을 시연하기 위해서 숫자 벡터를 사용한다.\n\n5.7.1 계수와 합산 루프\n예를 들어, 벡터의 항목을 세기(counting) 위해서 다음과 같이 for 루프를 작성한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n루프가 시작하기 전에 변수 count를 0 으로 설정하고, 숫자 목록을 훑어 갈 for 루프를 작성한다. 반복(iteration) 변수는 itervar라고 하고, 루프에서 itervar을 사용되지 않지만, itervar는 루프를 제어하고 루프 몸통 부문 리스트의 각 값에 대해서 한번만 실행되게 한다.\n루프 몸통 부문에 리스트의 각 값에 대해서 변수 count 값에 1을 더한다. 루프가 실행될 때, count 값은 “지금까지” 살펴본 값의 횟수가 된다.\n루프가 종료되면, count 값은 총 항목 숫자가 된다. 총 숫자는 루프 맨마지막에 얻어진다. 루프를 구성해서, 루프가 끝났을 때 기대했던 바를 얻었다.\n숫자 집합의 갯수를 세는 또 다른 비슷한 루프는 다음과 같다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기 루프에서, 반복 변수(iteration variable)가 사용되었다. 앞선 루프에서처럼 변수 count에 1을 단순히 더하는 대신에, 각 루프가 반복을 수행하는 동안 실제 숫자 (3, 41, 12, 등)를 작업중인 합계에 덧셈을 했다. 변수 total을 생각해보면, total은 “지금까지 값의 총계다.” 루프가 시작하기 전에 total은 어떤 값도 살펴본 적이 없어서 0 이다. 루프가 도는 중에는 total은 작업중인 총계가 된다. 루프의 마지막 단계에서 total은 리스트에 있는 모든 값의 총계가 된다.\n루프가 실행됨에 따라, total은 각 요소의 합계로 누적된다. 이 방식으로 사용되는 변수를 누산기(accumulator)라고 한다.\n계수(counting) 루프나 합산 루프는 특히 실무에서 유용하지는 않다. 왜냐하면 리스트에서 항목의 개수와 총계를 계산하는 length()와 sum() 함수가 각각 내장 함수로 있기 때문이다.\n\n5.7.2 최대값과 최소값 루프\n리스트, 벡터나 열(sequence)에서 가장 큰 값을 찾기 위해서, 다음과 같이 루프를 작성한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n프로그램을 실행하면, 출력은 다음과 같다.\n\n시작 전: NA\n\n반복 중: 3 3 \n최대값: 3 \n반복 중: 41 41 \n최대값: 41 \n반복 중: 74 74 \n최대값: 74 \n\n최대값: 74 \n\n변수 largest는 “지금까지 본 가장 큰 수”로 생각할 수 있다. 루프 시작 전에 largest 값은 상수 NA이다. NA은 “빈(empty)” 변수를 표기하기 위해서 변수에 저장하는 특별한 상수 값이다.\n루프 시작 전에 지금까지 본 가장 큰 수는 NA이다. 왜냐하면 아직 어떤 값도 보지 않았기 때문이다. 루프가 실행되는 동안에, largest 값이 NA 이면, 첫 번째 본 값이 지금까지 본 가장 큰 값이 된다. 첫번째 반복에서 itervar는 3 이 되는데 largest 값이 NA이여서 즉시, largest값을 3 으로 갱신한다.\n첫번째 반복 후에 largest는 더 이상 NA가 아니다. itervar &gt; largest인지를 확인하는 복합 논리 표현식의 두 번째 부분은 “지금까지 본” 값 보다 더 큰 값을 찾게 될 때 자동으로 동작한다. “심지어 더 큰” 값을 찾게 되면 변수 largest에 새로운 값으로 대체한다. largest가 3에서 41, 41에서 74로 변경되어 출력되어 나가는 것을 확인할 수 있다.\n루프의 끝에서 모든 값을 훑어서 변수 largest는 리스트의 가장 큰 값을 담고 있다.\n최소값을 계산하기 위해서는 코드가 매우 유사하지만 작은 변화가 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n변수 smallest는 루프 실행 전에, 중에, 완료 후에 “지금까지 본 가장 작은” 값이 된다. 루프 실행이 완료되면, smallest는 벡터의 최소값을 담게 된다.\n계수(counting)과 합산에서와 마찬가지로 R 내장함수 max()와 min()은 이런 루프문 작성을 불필요하게 만든다.\n다음은 R 내장 min() 함수의 간략 버전이다. getAnywhere(min), .Primitive(\"min\")을 입력해도 원소스코드를 볼 수는 없다. R 콘솔에서 min 함수 내부코드를 바로 살펴볼 수 없는데 이유는 C로 작성되었기 때문이다. names(methods:::.BasicFunsList) 명령어를 통해 .Primitive() 함수를 파악할 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n가장 적은 코드로 작성한 함수 버전은 R에 이미 내장된 min 함수와 동등하게 만들기 위해서 모든 print문을 삭제했다.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>반복</span>"
    ]
  },
  {
    "objectID": "05-loop.html#r-iter-debug",
    "href": "05-loop.html#r-iter-debug",
    "title": "5  반복",
    "section": "\n5.8 디버깅",
    "text": "5.8 디버깅\n좀더 큰 프로그램을 작성할 때, 좀더 많은 시간을 디버깅에 보내는 자신을 발견할 것이다. 좀더 많은 코드는 버그가 숨을 수 있는 좀더 많은 장소와 오류가 발생할 기회가 있다는 것을 의미한다.\n디버깅 시간을 줄이는 한 방법은 “이분법에 따라 디버깅(debugging by bisection)” 하는 것이다. 예를 들어, 프로그램에 100 줄이 있고 한번에 하나씩 확인한다면, 100 번 단계가 필요하다.\n대신에 문제를 반으로 나눈다. 프로그램 정확히 중간이나, 중간부분에서 점검한다. print문이나, 검증 효과를 갖는 상응하는 대용물을 넣고 프로그램을 실행한다.\n중간지점 점검 결과 잘못 되었다면 문제는 양분한 프로그램 앞부분에 틀림없이 있다. 만약 정확하다면, 문제는 프로그램 뒷부분에 있다.\n이와 같은 방식으로 점검하게 되면, 검토 해야하는 코드의 줄수를 절반으로 계속 줄일 수 있다. 단계가 100 번 걸리는 것에 비해 6번 단계 후에 이론적으로 1 혹은 2 줄로 문제 코드의 범위를 좁힐 수 있다.\n실무에서, “프로그램의 중간”이 무엇인지는 명확하지 않고, 확인하는 것도 가능하지 않다. 프로그램 코드 라인을 세서 정확히 가운데를 찾는 것은 의미가 없다. 대신에 프로그램 오류가 생길 수 있는 곳과 오류를 확인하기 쉬운 장소를 생각하세요. 점검 지점 앞뒤로 버그가 있을 곳과 동일하게 생각하는 곳을 중간지점으로 고르세요.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>반복</span>"
    ]
  },
  {
    "objectID": "05-loop.html#r-iter-terminology",
    "href": "05-loop.html#r-iter-terminology",
    "title": "5  반복",
    "section": "\n5.9 용어정의",
    "text": "5.9 용어정의\n\n\n누산기(accumulator): 더하거나 결과를 누적하기 위해 루프에서 사용되는 변수\n\n계수(counter): 루프에서 어떤 것이 일어나는 횟수를 기록하는데 사용되는 변수. 카운터를 0 으로 초기화하고, 어떤 것의 “횟수”를 셀 때 카운터를 증가시킨다.\n\n감소(decrement): 변수 값을 감소하여 갱신\n\n초기화(initialize): 갱신될 변수의 값을 초기 값으로 대입\n\n증가(increment): 변수 값을 증가시켜 갱신 (통상 1씩)\n\n무한 루프(infinite loop): 종료 조건이 결코 만족되지 않거나 종료 조건이 없는 루프\n\n반복(iteration): 재귀함수 호출이나 루프를 사용하여 명령문을 반복 실행",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>반복</span>"
    ]
  },
  {
    "objectID": "05-loop.html#r-iter-ex",
    "href": "05-loop.html#r-iter-ex",
    "title": "5  반복",
    "section": "연습문제",
    "text": "연습문제\n\n사용자가 “done”을 입력할 때까지 반복적으로 숫자를 읽는 프로그램을 작성하세요. “done”이 입력되면, 총계, 갯수, 평균을 출력하세요. 만약 숫자가 아닌 다른 것을 입력하게되면, tryCatch를 사용하여 사용자 실수를 탐지해서 오류 메시지를 출력하고 다음 숫자로 건너 뛰게 하세요.\n\n\nEnter a number: 4\nEnter a number: 5\nEnter a number: bad data\nInvalid input\nEnter a number: 7\nEnter a number: done\n16 3 5.33333333333\n\n\n위에서처럼 숫자 목록을 사용자로부터 입력받는 프로그램을 작성하세요. 평균값 대신에 숫자 목록 최대값과 최소값을 출력하세요.",
    "crumbs": [
      "프로그래밍",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>반복</span>"
    ]
  },
  {
    "objectID": "06-string.html",
    "href": "06-string.html",
    "title": "6  문자열",
    "section": "",
    "text": "6.1 문자열은 시퀀스다.\n문자열은 여러 문자들의 시퀀스(sequence)다. 꺾쇠 연산자로 한번에 하나씩 문자에 접근한다. substr() 함수를 사용해서 바로 특정 문자를 추출할 수도 있지만, strsplit() 함수로 문자열을 문자의 벡터로 다루는 방법도 있다.\n두 번째 문장은 변수 fruit_letter에서 1번 위치 문자를 추출하여 변수 letter에 대입한다. 꺾쇠 표현식을 인덱스(index)라고 부른다. 인덱스는 순서(sequence)에서 사용자가 어떤 문자를 원하는지 표시한다.\n하지만, 여러분이 기대한 것은 출력됨이 확인된다.\n파이썬 사용자에게 ’banana’의 첫 분자는 a가 아니라 b다. 하지만, 파이썬 인텍스는 문자열 처음부터 오프셋(offset)1이다. 첫 글자 오프셋은 0 이다.\n하지만, R은 사람 친화적이기 때문에 b가 ’banana’의 첫번째 문자가 되고 a가 두번째, n이 세번째 문자가 된다.\n인덱스로 문자와 연산자를 포함하는 어떤 표현식도 사용가능지만, 인덱스 값은 정수일 필요는 없다. 정수가 아닌 경우 다음과 같은 결과를 얻게 된다. 문제는 R에서 1.5를 내려서 1로 처리한다는 점이다. 경우에 따라서는 반올림으로 판단해서 2가 될 수도 있어 오해의 소지가 있기 때문에 무조건 정수로 표현한다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>문자열</span>"
    ]
  },
  {
    "objectID": "06-string.html#r-string-sequence",
    "href": "06-string.html#r-string-sequence",
    "title": "6  문자열",
    "section": "",
    "text": "R\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\n\n그림 6.1: 바나나 문자열\n\n\n\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>문자열</span>"
    ]
  },
  {
    "objectID": "06-string.html#r-string-length",
    "href": "06-string.html#r-string-length",
    "title": "6  문자열",
    "section": "\n6.2 length() 함수 사용 문자열 길이",
    "text": "6.2 length() 함수 사용 문자열 길이\nlength() 함수는 문자열의 문자 갯수를 반환하는 내장함수다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n문자열의 가장 마지막 문자를 얻기 위해서, 아래와 같이 시도하려 싶을 것이다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n파이썬에서는 인덱스 오류 (IndexError)가 발생하는데 이유는 ‘banana’ 에 6번 인텍스 문자가 없기 때문이다. 0 에서부터 시작했기 때문에 6개 문자는 0 에서부터 5 까지 번호가 매겨졌다. 마지막 문자를 얻기 위해서 length에서 1을 빼야 한다. fruit[-1]은 마지막 문자를 fruit[-2]는 끝에서 두 번째 등으로 활용할 수 있다. 하지만, R에서는 사람이 생각하는 방식대로 마지막 문자가 얻어진다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>문자열</span>"
    ]
  },
  {
    "objectID": "06-string.html#r-string-traversal",
    "href": "06-string.html#r-string-traversal",
    "title": "6  문자열",
    "section": "\n6.3 루프를 사용한 문자열 순회",
    "text": "6.3 루프를 사용한 문자열 순회\n연산의 많은 경우에 문자열을 한번에 한 문자씩 처리한다. 종종 처음에서 시작해서, 차례로 각 문자를 선택하고, 선택된 문자에 임의 연산을 수행하고, 끝까지 계속한다. 이런 처리 패턴을 순회(traversal)라고 한다. 순회를 작성하는 한 방법이 while 루프다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nwhile 루프가 문자열을 운행하여 문자열을 한줄에 한 글자씩 화면에 출력한다. 루프 조건이 index &lt;= length(fruit_letter)이여서, index가 문자열 길이와 같을 때, 조건은 거짓이 되고, 루프의 몸통 부문은 실행이 되지 않는다. R이 접근한 마지막 length(fruit_letter) 인텍스 문자로, 문자열의 마지막 문자다.\n\n\n\n\n\n\n연습문제\n\n\n\n문자열의 마지막 문자에서 시작해서, 문자열 처음으로 역진행하면서 한줄에 한자씩 화면에 출력하는 while 루프를 작성하세요.\n\n\n운행법을 작성하는 또 다른 방법은 for 루프다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n루프를 매번 반복할 때, 문자열 다음 문자가 변수 char에 대입된다. 루프는 더 이상 남겨진 문자가 없을 때까지 계속 실행된다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>문자열</span>"
    ]
  },
  {
    "objectID": "06-string.html#r-string-slice",
    "href": "06-string.html#r-string-slice",
    "title": "6  문자열",
    "section": "\n6.4 문자열 슬라이스",
    "text": "6.4 문자열 슬라이스\n문자열의 일부분을 슬라이스(slice)라고 한다. 문자열 슬라이스를 선택하는 것은 문자를 선택하는 것과 유사하다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n[n:m] 연산자는 n번째 문자부터 m번째 문자까지의 문자열 부분을 반환한다.\n파이썬 fruit[:3]와 같이 콜론 앞 첫 인텍스를 생략하면, 문자열 슬라이스는 문자열 처음부터 시작한다. 파이썬 fruit[3:]와 같이 두 번째 인텍스를 생략하면, 문자열 슬라이스는 문자열 끝까지 간다.\n이와 동일한 역할을 수행하는 방법은 head(fruit_letter, 3), tail(fruit_letter, 3)와 같이 head(), tail() 함수를 활용한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n만약 첫번째 인텍스가 두번째보다 크거나 같은 경우 파이썬에는 결과가 인용부호로 표현되는 빈 문자열(empty string)이 된다. 하지만, R에서는 해당 인덱스에 해당되는 문자가 추출된다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n빈 문자열은 어떤 문자도 포함하지 않아서 길이가 0 이 되지만, 이것을 제외하고 다른 문자열과 동일하다.\n\n\n\n\n\n\n연습문제 (파이썬)\n\n\n\nfruit이 문자열로 주어졌을 때, fruit[:]의 의미는 무엇인가요?",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>문자열</span>"
    ]
  },
  {
    "objectID": "06-string.html#문자열은-불변이다.",
    "href": "06-string.html#문자열은-불변이다.",
    "title": "6  문자열",
    "section": "\n6.5 문자열은 불변이다.",
    "text": "6.5 문자열은 불변이다.\n문자열 내부에 있는 문자를 변경하려고 대입문 왼쪽편에 [] 연산자를 사용하고 싶은 유혹이 있을 것이다. 예를 들어 다음과 같다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n파이썬에서 “TypeError: ‘str’ object does not support item assignment” 오류가 발생하는데 파이썬 문자열이 불변(immutable)하기 때문이다. 즉, 파이썬에서 문자열의 특정 문자를 직접 변경하려고 할 때 이 오류가 발생한다. 반면에, R에서는 문자열 자체가 불변 객체로 취급되지 않기 때문에 strsplit 함수를 사용하여 문자열을 문자의 벡터로 변환하면, 벡터의 각 요소는 별도의 문자열로 취급되어 개별적으로 변경할 수 있다. R은 파이썬과 달리 불변 문자열에 대한 제약이 없기 때문에 오류를 발생시키지 않는다.\n파이썬에서 “객체(object)”는 문자열이고, 대입하고자 하는 문자는 “항목(item)” 이다. 지금으로서 객체는 값과 동일하지만, 나중에 객체 정의를 좀더 상세화할 것이다. 항목은 순서 값 중의 하나다. 최선의 방법은 원래 문자열을 변형한 새로운 문자열을 생성하는 것이다.\n새로운 첫 문자에 greeting 문자열 슬라이스를 연결한다. 원래 문자열에는 어 떤 영향도 주지 않는 새로운 문자열을 생성되었다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>문자열</span>"
    ]
  },
  {
    "objectID": "06-string.html#r-string-count",
    "href": "06-string.html#r-string-count",
    "title": "6  문자열",
    "section": "\n6.6 루프 돌기 계수",
    "text": "6.6 루프 돌기 계수\n다음 프로그램은 문자열에 문자 a가 나타나는 횟수를 계수(counting)한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기 프로그램은 계수기(counter)라고 부르는 또다른 연산 패턴을 보여준다. 변수 count는 0 으로 초기화 되고, 매번 a를 찾을 때마다 증가한다. 루프를 빠져나갔을 때, count는 결과 값 즉, a가 나타난 총 횟수를 담고 있다.\n\n\n\n\n\n\n연습문제\n\n\n\n문자열과 문자를 인자(argument)로 받도록 상기 코드를 count라는 함수로 캡슐화(encapsulation)하고 일반화하세요.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>문자열</span>"
    ]
  },
  {
    "objectID": "06-string.html#r-string-in-operator",
    "href": "06-string.html#r-string-in-operator",
    "title": "6  문자열",
    "section": "\n6.7 %in% 연산자",
    "text": "6.7 %in% 연산자\n연산자 in 은 부울 연산자로 두 개의 문자열을 받아, 첫 번째 문자열이 두 번째 문자열의 일부이면 참(TRUE)을 반환한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>문자열</span>"
    ]
  },
  {
    "objectID": "06-string.html#r-string-comparison-operator",
    "href": "06-string.html#r-string-comparison-operator",
    "title": "6  문자열",
    "section": "\n6.8 문자열 비교",
    "text": "6.8 문자열 비교\n비교 연산자도 문자열에서 동작한다. 두 문자열이 같은지를 살펴보다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n다른 비교 연산자는 단어를 알파벳 순서로 정렬하는데 유용하다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nR과 파이썬 같은 프로그래밍 언어는 사람과 동일하는 방식으로 대문자와 소문자를 다루지 않는다. 모든 대문자는 소문자 앞에 온다. 프로그래밍 언어에서 대문자와 소문자를 다루는 방식은 ASCII 코드 값을 기반으로 한다. ASCII 코드에서 대문자(A-Z)는 65부터 90까지의 값을, 소문자(a-z)는 97부터 122까지의 값을 갖기 때문에 대문자가 숫자적으로 소문자보다 먼저 나오기 때문에 문자열을 정렬하거나 비교할 때, 대문자가 소문자 앞에 위치하게 된다.\nYour word, Pineapple, comes before banana.\n이러한 문제를 다루는 일반적인 방식은 비교 연산을 수행하기 전에 문자열을 표준 포맷으로 예를 들어 모두 소문자, 변환하는 것이다. 경우에 따라서 “Pineapple”로 무장한 사람들로부터 여러분을 보호해야 하는 것도 명심한다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>문자열</span>"
    ]
  },
  {
    "objectID": "06-string.html#r-string-method",
    "href": "06-string.html#r-string-method",
    "title": "6  문자열",
    "section": "\n6.9 문자열 함수",
    "text": "6.9 문자열 함수\nR은 객체지향언어 특성을 갖고 있지만 함수형 프로그래밍 언어 특성도 갖고 있다. 문자열을 R 객체(objects)로 객체를 데이터(실제 문자열 자체)와 메쏘드(methods)를 담고 있는 것으로 바라볼 수도 있다. 메쏘드는 객체에 내장되고 어떤 객체의 인스턴스(instance)에도 사용되는 사실상 함수다.\n\n\n\n\n\n\n파이썬 dir 함수\n\n\n\n객체에 대해 이용가능한 메쏘드를 보여주는 dir 함수가 파이썬에 있다. type 함수는 객체의 자료형(type)을 보여 주고, dir은 객체에 사용될 수 있는 메쏘드를 보여준다.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\ndir 함수가 메쏘드 목록을 보여주고, 메쏘드에 대한 간단한 문서 정보는 help를 사용할 수 있지만, 문자열 메쏘드에 대한 좀더 좋은 문서 정보는 https://docs.python.org/3/library/string.html에서 찾을 수 있다.\n인자를 받고 값을 반환한다는 점에서 메쏘드(method)를 호출하는 것은 함수를 호출하는 것과 유사하지만, 구문은 다르다. 구분자로 점을 사용해서 변수명에 메쏘드명을 붙여 메쏘드를 호출한다.\n예를 들어, upper 메쏘드는 문자열을 받아 모두 대문자로 변환된 새로운 문자열을 반환한다. 함수 구문 upper(word) 대신에, word.upper() 메쏘드 구문을 사용한다.\n\n\n하지만, 함수형 프로그래밍 패러다임으로 문자열을 객체로 두고 함수를 적용시켜 다양한 작업을 하는 것이 일반적이다. tidyverse 팩키지를 설치하게 되면 stringr 팩키지가 구성요소로 포함되어 있다. str_로 시작되는 다양한 함수가 지원된다.\n예를 들어, stringr 팩키지 str_to_upper() 함수는 문자열을 받아 모두 대문자로 변환된 새로운 문자열을 반환한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n동일한 작업을 함수형 패러다임으로 str_to_upper(word)와 같이 표현하는데 반해, 객체지향으로 구현하면 파이썬 같은 경우 word.upper() 메쏘드 구문이 사용된다.\n예를 들어, 문자열안에 문자열의 위치를 찾는 str_locate(), str_locate_all()라는 문자열 함수가 있다. str_locate()는 매칭되는 첫번째만 반환하는 반면에 str_locate_all()는 매칭되는 전부를 반환하는 차이가 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기 예제에서, word 문자열에 str_locate_all() 함수를 호출하여 매개 변수로 찾고자 하는 문자를 넘긴다.\nstr_locate_all() 함수로 문자뿐만 아니라 부속 문자열(substring)도 찾을 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n한 가지 자주 있는 작업은 str_trim() 함수를 사용해서 문자열 시작과 끝의 공백(공백 여러개, 탭, 새줄)을 제거하는 것이다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nstr_detect() 함수와 나중에 다룰 정규표현식을 섞어 표현하게 되면 참, 거짓 같은 부울 값(boolean value)을 반환한다. '^Please'에서 ^은 문자열 시작을 지정한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n대소문자를 구별하는 것을 요구하기 때문에 str_to_lower() 함수를 사용해서 검증을 수행하기 전에, 한 줄을 입력받아 모두 소문자로 변환하는 것이 필요하다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n마지막 예제에서 문자열이 문자 “p”로 시작하는지를 검증하기 위해서, str_to_lower() 함수를 호출하고 나서 바로 str_detect() 함수를 사용한다. 주의깊게 순서만 다룬다면, 한 줄에 다수 함수를 괄호에 넣어 호출할 수 있다.\n\n\n\n\n\n\n연습문제\n\n\n\n앞선 예제와 유사한 함수인 str_count()로 불리는 문자열 메쏘드가 stringr 팩키지 내부에 있다. ? str_count() 도움말로 str_count() 함수에 대한 문서를 읽고, 문자열 ’banana’의 문자가 몇 개인지 계수하는 메쏘드 호출 프로그램을 작성하세요.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>문자열</span>"
    ]
  },
  {
    "objectID": "06-string.html#r-string-parsing",
    "href": "06-string.html#r-string-parsing",
    "title": "6  문자열",
    "section": "\n6.10 문자열 파싱",
    "text": "6.10 문자열 파싱\n종종, 문자열을 들여다 보고 특정 부속 문자열(substring)을 찾고 싶다. 예를 들어, 아래와 같은 형식으로 작성된 일련의 라인이 주어졌다고 가정하면,\n\nFrom stephen.marquard@uct.ac.zaSat Jan  5 09:14:16 2008\n\n각 라인마다 뒤쪽 전자우편 주소(즉, uct.ac.za)만 뽑아내고 싶을 것이다. str_locate() 함수와 문자열 슬라이싱(string sliceing)을 사용해서 작업을 수행할 수 있다.\n우선, 문자열에서 골뱅이(@, at-sign) 기호의 위치를 찾는다. 그리고, 골뱅이 기호 뒤 첫 공백 위치를 찾는다. 그리고 나서, 찾고자 하는 부속 문자열을 뽑아내기 위해서 문자열 슬라이싱을 사용한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nstr_locate() 함수를 사용해서 찾고자 하는 문자열의 시작 위치를 명세한다. 문자열 슬라이싱(slicing)할 때, 골뱅기 기호 뒤부터 빈 공백을 포함하지 않는 위치까지 문자열을 뽑아낸다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>문자열</span>"
    ]
  },
  {
    "objectID": "06-string.html#r-string-format",
    "href": "06-string.html#r-string-format",
    "title": "6  문자열",
    "section": "\n6.11 서식 연산자",
    "text": "6.11 서식 연산자\n서식 연산자(format operator) Base R의 sprintf() 함수에 C언어 스타일로 %를 사용하기도 하지만 glue: Interpreted String Literals 팩키지도 최근에 많이 사용된다. glue 팩키지 {}는 문자열 일부를 변수에 저장된 값으로 바꿔 문자열을 구성한다. 정수에 서식 연산자가 적용될 때, {}는 나머지 연산자가 된다. 하지만 첫 피연산자가 문자열이면, {}은 서식 연산자가 된다. 동일한 기능을 stringr 패키지 str_glue() 함수로 수행할 수 있다.\n첫 피연산자는 서식 문자열(format string)로 두번째 피연산자가 어떤 형식으로 표현되는지를 명세하는 하나 혹은 그 이상의 서식 순서(format sequence)를 담고 있다. 결과값은 문자열이다.\n예를 들어, 형식 순서 ’%d’의 의미는 두번째 피연산자가 정수 형식으로 표현됨을 뜻한다. (d는 “decimal”을 나타낸다.)\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n결과는 문자열 ’42’로 정수 42와 혼동하면 안 된다.\n서식 순서는 문자열 어디에도 나타날 수 있어서 문장 중간에 값을 임베드(embed)할 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n만약 문자열 서식 순서가 하나 이상이라면, 두번째 인자는 튜플(tuple)이 된다. 서식 순서 각각은 순서대로 튜플 요소와 매칭된다.\n다음 예제는 정수 형식을 표현하기 위해서 ‘%d’, 부동 소수점 형식을 표현하기 위해서 ‘%g’, 문자열 형식을 표현하기 위해서 ‘%s’을 사용한 사례다. 여기서 왜 부동 소수점 형식이’%f’대신에 ’%g’인지는 질문하지 말아주세요.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n문자열 서식 순서와 갯수는 일치해야 하고, 요소의 자료형(type)도 서식 순서와 일치해야 한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기 첫 예제는 충분한 요소 개수가 되지 않고, 두 번째 예제는 자료형이 맞지 않는다. 서식 연산자는 강력하지만, 사용하기가 까다로운 점이 있으니, str_glue를 사용하는 것도 권장된다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>문자열</span>"
    ]
  },
  {
    "objectID": "06-string.html#r-string-debug",
    "href": "06-string.html#r-string-debug",
    "title": "6  문자열",
    "section": "\n6.12 디버깅",
    "text": "6.12 디버깅\n프로그램을 작성하면서 배양해야 하는 기술은 항상 자신에게 질문을 하는 것이다. “여기서 무엇이 잘못 될 수 있을까?” 혹은 “내가 작성한 완벽한 프로그램을 망가뜨리기 위해 사용자는 무슨 엄청난 일을 할 것인가?”\n예를 들어 앞장의 반복 while 루프를 시연하기 위해 사용한 프로그램을 살펴봅시다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n사용자가 입력값으로 빈 공백 줄을 입력하게 될 때 무엇이 발생하는지 살펴봅시다.\n&gt; hello there\n[1] hello there\n&gt; # don't print this\n&gt; print this!\n[2] print this!\n&gt; \n[1] \"\"\n&gt; done\n빈 공백줄이 입력될 때까지 코드는 잘 작동합니다. 그리고 나서, 파이썬의 경우 0 번째 문자가 없어서 트레이스백(traceback)이 발생한다. R의 경우 정상 실행되지만 원하는 바는 아니다. 입력줄이 비어있을 때, 코드 3번째 줄을 “안전”하게 만드는 두 가지 방법이 있다.\n하나는 빈 문자열이면 거짓(FALSE)을 반환하도록 str_detect() 함수를 사용하는 것이다.\n\n\nR\nif(str_detect(line, '^#'))\n\n\n\n\n파이썬\nif line.startswith('#') :\n\n\n\n가디언 패턴(guardian pattern)을 사용한 if문으로 문자열에 적어도 하나의 문자가 있는 경우만 두번째 논리 표현식이 평가되도록 코드를 작성한다.\n\n\nR\nif(str_length(line) &gt; 0 & str_detect(line, '^#'))\n\n\n\n\n파이썬\nif len(line) &gt; 0 and line[0] == '#' :",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>문자열</span>"
    ]
  },
  {
    "objectID": "06-string.html#r-string-terminology",
    "href": "06-string.html#r-string-terminology",
    "title": "6  문자열",
    "section": "\n6.13 용어정의",
    "text": "6.13 용어정의\n\n\n계수기(counter): 무언가를 계수하기 위해서 사용되는 변수로 일반적으로 0 으로 초기화하고 나서 증가한다.\n\n빈 문자열(empty string): 두 인용부호로 표현되고, 어떤 문자도 없고 길이가 0 인 문자열.\n\n서식 연산자(format operator): 서식 문자열과 튜플을 받아, 서식 문자열에 지정된 서식으로 튜플 요소를 포함하는 문자열을 생성하는 연산자, .\n\n서식 순서(format sequence): d처럼 어떤 값의 서식으로 표현되어야 하는지를 명세하는 “서식 문자열” 문자 순서.\n\n서식 문자열(format string): 서식 순서를 포함하는 서식 연산자와 함께 사용되는 문자열.\n\n플래그(flag): 조건이 참인지를 표기하기 위해 사용하는 불 변수(boolean variable)\n\n호출(invocation): 메쏘드를 호출하는 명령문.\n\n불변(immutable): 순서의 항목에 대입할 수 없는 특성.\n\n인덱스(index): 문자열의 문자처럼 순서(sequence)에 항목을 선택하기 위해 사용되는 정수 값.\n\n항목(item): 순서에 있는 값의 하나.\n\n메쏘드(method): 객체와 연관되어 점 표기법을 사용하여 호출되는 함수.\n\n객체(object): 변수가 참조하는 무엇. 지금은 “객체”와 “값”을 구별없이 사용한다.\n\n검색(search): 찾고자 하는 것을 찾았을 때 멈추는 운행법 패턴.\n\n순서(sequence): 정돈된 집합. 즉, 정수 인텍스로 각각의 값이 확인되는 값의 집합.\n\n슬라이스(slice): 인텍스 범위로 지정되는 문자열 부분.\n\n운행법(traverse): 순서(sequence)의 항목을 반복적으로 훑기, 각각에 대해서는 동일한 연산을 수행.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>문자열</span>"
    ]
  },
  {
    "objectID": "06-string.html#r-string-ex",
    "href": "06-string.html#r-string-ex",
    "title": "6  문자열",
    "section": "연습문제",
    "text": "연습문제\n\n다음 문자열에서 숫자를 뽑아내는 R 코드를 작성하세요.\n\nstr &lt;- 'X-DSPAM-Confidence: 0.8475'\nstr_locate() 함수와 문자열 슬라이싱을 사용하여 str_sub() 문자 뒤 문자열을 뽑아내고 as.numeric() 함수를 사용하여 뽑아낸 문자열을 부동 소수점 숫자로 변환하세요.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>문자열</span>"
    ]
  },
  {
    "objectID": "06-string.html#footnotes",
    "href": "06-string.html#footnotes",
    "title": "6  문자열",
    "section": "",
    "text": "컴퓨터에서 어떤 주소로부터 간격을 두고 떨어진 주소와의 거리. 기억 장치가 페이지 혹은 세그먼트 단위로 나누어져 있을 때 하나의 시작 주소로부터 오프셋만큼 떨어진 위치를 나타내는 것이다. 네이버 지식백과(IT용어사전, 한국정보통신기술협회)↩︎",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>문자열</span>"
    ]
  },
  {
    "objectID": "07-file.html",
    "href": "07-file.html",
    "title": "7  파일",
    "section": "",
    "text": "7.1 영속성\n지금까지, 프로그램을 어떻게 작성하고 조건문, 함수, 반복을 사용하여 중앙처리장치(CPU, Central Processing Unit)에 프로그래머의 의도를 커뮤니케이션하는지 학습했다. 주기억장치(Main Memory)에 어떻게 자료구조를 생성하고 사용하는지도 배웠다. CPU와 주기억장치는 소프트웨어가 동작하고 실행되는 곳이고, 모든 “생각(thinking)”이 발생하는 장소다.\n하지만, 앞서 하드웨어 아키텍처를 논의했던 기억을 되살린다면, 전원이 꺼지게 되면, CPU와 주기억장치에 저장된 모든 것이 지워진다. 지금까지 작성한 프로그램은 R을 배우기 위한 일시적으로 재미로 연습한 것에 불과하다.\n이번 장에서 보조 기억장치(Secondary Memory) 혹은 파일을 가지고 작업을 시작한다. 보조 기억장치는 전원이 꺼져도 지워지지 않는다. 혹은, USB 플래쉬 드라이브를 사용한 경우에는 프로그램으로부터 작성한 데이터는 시스템에서 제거되어 다른 시스템으로 전송될 수 있다.\n우선 텍스트 편집기로 작성한 텍스트 파일을 읽고 쓰는 것에 초점을 맞출 것이다. 나중에 데이터베이스 소프트웨어를 통해서 읽고 쓰도록 설계된 바이너리 파일 데이터베이스를 가지고 어떻게 작업하는지를 살펴볼 것이다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>파일</span>"
    ]
  },
  {
    "objectID": "07-file.html#r-file-persistence",
    "href": "07-file.html#r-file-persistence",
    "title": "7  파일",
    "section": "",
    "text": "그림 7.1: 소프트웨어 아키텍처",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>파일</span>"
    ]
  },
  {
    "objectID": "07-file.html#r-file-open",
    "href": "07-file.html#r-file-open",
    "title": "7  파일",
    "section": "\n7.2 파일 열기",
    "text": "7.2 파일 열기\n하드 디스크 파일을 읽거나 쓸려고 할 때, 파일을 열어야(open) 한다. 파일을 열 때 각 파일 데이터가 어디에 저장되었는지를 알고 있는 운영체제와 커뮤니케이션 한다. 파일을 열 때, 운영체제에 파일이 존재하는지 확인하고 이름으로 파일을 찾도록 요청한다.\n이번 예제에서, &lt;www.py4inf.com/code/mbox.txt&gt; 에서 파일을 다운로드한 후 R을 시작한 동일한 폴더에 저장된 mbox.txt 파일을 연다.\ndownload.file(\"https://www.dr-chuck.com/py4inf/code/mbox.txt\", destfile = \"mbox.txt\") 명령어를 사용하여 코딩을 시작하는 디렉토리 동일한 mbox.txt 이름으로 저장한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nopen이 성공하면, 운영체제는 파일 핸들(file handle)을 반환한다. 파일 핸들(file handle)은 파일에 담겨진 실제 데이터는 아니고, 대신에 데이터를 읽을 수 있도록 사용할 수 있는 “핸들(handle)”이다. 요청한 파일이 존재하고, 파일을 읽을 수 있는 적절한 권한이 있다면 이제 핸들이 여러분에게 주어졌다.\n\n\n\n\n\n그림 7.2: 파일 핸들\n\n\n파일이 존재하지 않는다면, open은 역추적(traceback) 파일 열기 오류로 실패하고, 파일 콘텐츠에 접근할 핸들도 얻지 못한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n나중에 tryCatch()를 가지고, 존재하지 않는 파일을 열려고 하는 상황을 좀더 우아하게 처리할 것이다. 최근에 사용자 중심으로 R에 다양한 기능이 추가되어 tidyverse 팩키지 일부를 구성하는 readr 팩키지의 read_lines() 함수를 통해 인터넷 웹사이트에서 바로 불러오는 것도 가능하다. 하지만, readr::read_lines() 함수는 줄바꿈 문자를 가정하고 동작하기 때문에 제대로 파일을 못 읽어오는 경우도 종종 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>파일</span>"
    ]
  },
  {
    "objectID": "07-file.html#r-file-txt",
    "href": "07-file.html#r-file-txt",
    "title": "7  파일",
    "section": "\n7.3 텍스트 파일과 라인",
    "text": "7.3 텍스트 파일과 라인\nR 문자열이 문자 순서(sequence)로 간주 되듯이 마찬가지로 텍스트 파일은 줄(라인, line) 순서(sequence)로 생각될 수 있다. 예를 들어, 다음은 오픈 소스 프로젝트 개발 팀에서 다양한 참여자들의 전자우편 활동을 기록한 텍스트 파일 샘플이다.\n\nFrom stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008\nReturn-Path: &lt;postmaster@collab.sakaiproject.org&gt;\nDate: Sat, 5 Jan 2008 09:12:18 -0500\nTo: source@collab.sakaiproject.org\nFrom: stephen.marquard@uct.ac.za\nSubject: [sakai] svn commit: r39772 - content/branches/\nDetails: http://source.sakaiproject.org/viewsvn/?view=revrev=39772\n...\n\n상호 의사소통한 전자우편 전체 파일은 &lt;www.py4inf.com/code/mbox.txt&gt; 에서 접근 가능하고, 간략한 버젼 파일은 &lt;www.py4inf.com/code/mbox-short.txt&gt; 에서 얻을 수 있다. 이들 파일은 다수 전자우편 메시지를 담고 있는 파일로 표준 포맷으로 되어 있다. “From”으로 시작하는 라인은 메시지 본문과 구별되고, “From:”으로 시작하는 라인은 본문 메시지의 일부다. 더 자세한 정보는 http://en.wikipedia.org/wiki/Mbox에서 찾을 수 있다.\n파일을 라인으로 쪼개기 위해서, 줄바꿈 문자로 불리는 “줄의 끝(end of the line)”을 표시하는 특수 문자가 있다.\nR에서, 문자열 상수 역슬래쉬-n()으로 줄바꿈 문자를 표현한다. 두 문자처럼 보이지만, 사실은 단일 문자다. 인터프리터에 “stuff”에 입력한 후 변수를 살펴보면, 문자열에 있다. 하지만, cat문을 사용하여 문자열을 출력하면, 문자열이 새줄 문자에 의해서 두 줄로 쪼개지는 것을 볼 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n문자열 ’X’의 길이는 stringr::str_length(\"X\\nY\") 명령어를 통해 확인이 가능한데 3 이다. 왜냐하면 줄바꿈(newline) 문자도 한 문자이기 때문이다.\n그래서, 파일 라인을 볼 때, 라인 끝을 표시하는 줄바꿈으로 불리는 눈에 보이지 않는 특수 문자가 각 줄의 끝에 있다고 상상할 필요가 있다.\n그래서, 줄바꿈 문자는 파일에 있는 문자를 라인으로 분리한다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>파일</span>"
    ]
  },
  {
    "objectID": "07-file.html#r-file-open-handler",
    "href": "07-file.html#r-file-open-handler",
    "title": "7  파일",
    "section": "\n7.4 파일 읽어오기",
    "text": "7.4 파일 읽어오기\n파일 핸들(file handle)이 파일 자료를 담고 있지 않지만, for 루프를 사용하여 파일 각 라인을 읽고 라인수를 세는 것을 쉽게 구축할 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n파일 핸들을 for 루프 시퀀스(sequence)로 사용할 수 있다. for 루프는 단순히 파일 라인 수를 세고 전체 라인수를 출력한다. for 루프를 대략 일반어로 풀어 말하면, “파일 핸들로 표현되는 파일 각 라인마다, count 변수에 1 씩 더한다”\nfile 함수가 전체 파일을 바로 읽지 못하는 이유는 파일이 수 기가 바이트(GB) 파일 크기를 가질 수도 있기 때문이다. file 문장은 파일 크기에 관계없이 파일을 여는데 시간이 동일하게 걸린다. 실질적으로 for 루프가 파일로부터 자료를 읽어오는 역할을 한다.\nfor 루프를 사용해서 이 같은 방식으로 파일을 읽어올 때, 줄바꿈 문자를 사용해서 파일 자료를 라인 단위로 쪼갠다. 파이썬에서 줄바꿈 문자까지 각 라인 단위로 읽고, for 루프가 매번 반복할 때마다 line 변수에 줄바꿈을 마지막 문자로 포함한다.\nfor 루프가 데이터를 한번에 한줄씩 읽어오기 때문에, 데이터를 저장할 주기억장치 저장공간을 소진하지 않고, 매우 큰 파일을 효과적으로 읽어서 라인을 셀 수 있다. 각 라인별로 읽고, 세고, 그리고 나서 폐기되기 때문에, 매우 적은 저장공간을 사용해서 어떤 크기의 파일도 상기 프로그램을 사용하여 라인을 셀 수 있다.\n만약 주기억장치 크기에 비해서 상대적으로 작은 크기의 파일이라는 것을 안다면, 전체 파일을 파일 핸들로 readLines() 함수를 사용해서 문자열로 읽어올 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기 예제에서, mbox-short.txt 전체 파일 콘텐츠(94,626 문자)를 변수 inp로 바로 읽었다. 문자열 슬라이싱을 사용해서 inp에 저장된 문자열 자료 첫 20 문자를 출력한다.\n파일이 이런 방식으로 읽혀질 때, 모든 라인과 줄바꿈 문자를 포함한 모든 문자는 변수 inp에 대입된 매우 큰 문자열이다. 파일 데이터가 컴퓨터 주기억장치가 안정적으로 감당해 낼 수 있을 때만, 이런 형식의 nchar() 함수가 사용될 수 있다는 것을 기억하라.\n만약 주기억장치가 감당해 낼 수 없는 매우 파일 크기가 크다면, for나 while 루프를 사용해서 파일을 쪼개서 읽는 프로그램을 작성해야 한다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>파일</span>"
    ]
  },
  {
    "objectID": "07-file.html#r-file-search",
    "href": "07-file.html#r-file-search",
    "title": "7  파일",
    "section": "\n7.5 파일 검색",
    "text": "7.5 파일 검색\n파일 데이터를 검색할 때, 흔한 패턴은 파일을 읽고, 대부분 라인은 건너뛰고, 특정 기준을 만족하는 라인만 처리하는 것이다. 간단한 검색 메카니즘을 구현하기 위해서 파일을 읽는 패턴과 문자열 메쏘드를 조합한다.\n예를 들어, 파일을 읽고, “From:”으로 시작하는 라인만 출력하고자 한다면, stringr 팩키지에 포함된 str_detect() 문자열 탐지 함수를 사용해서 원하는 접두사(From:)로 시작하는 라인만을 선택한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n이 프로그램이 실행하면 다음 출력값을 얻는다.\n\n[1] \"From: stephen.marquard@uct.ac.za\"\n[1] \"From: louis@media.berkeley.edu\"\n[1] \"From: zqian@umich.edu\"\n[1] \"From: rjlowe@iupui.edu\"\n[1] \"From: zqian@umich.edu\"\n[1] \"From: rjlowe@iupui.edu\"\n[1] \"From: cwen@iupui.edu\"\n...\n\n“From:”으로만 시작하는 라인만 출력하기 때문에 출력값은 훌륭해 보인다.\n파일 처리 프로그램이 점점 더 복잡해짐에 따라 next를 사용해서 검색 루프(search loop)를 구조화할 필요가 있다. 검색 루프의 기본 아이디어는 “흥미로운” 라인을 집중적으로 찾고, “흥미롭지 않은” 라인은 효과적으로 건너뛰는 것이다. 그리고 나서 흥미로운 라인을 찾게되면, 그 라인에서 특정 연산을 수행하는 것이다.\n다음과 같이 루프를 구성해서 흥미롭지 않은 라인은 건떠뛰는 패턴을 따르게 한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n프로그램의 출력값은 동일하다. 흥미롭지 않는 라인은 “From:”으로 시작하지 않는 라인이라 next문을 사용해서 건너뛴다. “흥미로운” 라인 (즉, “From:”으로 시작하는 라인)에 대해서는 연산처리를 수행한다.\nstr_detect() 문자열 함수를 사용해서 검색 문자열이 라인 어디에 있는지를 찾아주는 텍스트 편집기 검색기능을 모사(simulation)할 수 있다. str_detect() 문자열 함수는 다른 문자열 내부에 검색하는 문자열이 있는지 찾고, 존재하는 경우 참(TRUE) 만약 문자열이 없다면 거짓(FALSE)을 반환하기 때문에, “(uct.ac.za?)”(남아프리카 케이프 타운 대학으로부터 왔다) 문자열을 포함하는 라인을 검색하기 위해 다음과 같이 루프를 작성한다. stringr 패키지 의존성 대신 grepl() 함수를 사용할 수도 있다. if문 !str_detect(line, \"@uct.ac.za\") 대신 grepl(\"@uct.ac.za\", line) == FALSE로 대체한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nfhand &lt;- file('data/mbox-short.txt', open = \"r\")\n\nfor(line in readLines(fhand)) {\n  if(!str_detect(line, \"@uct.ac.za\")) {\n    next\n  }\n  print(line)\n}\n\n출력결과는 다음과 같다.\n\n[1] \"From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008\"\n[1] \"X-Authentication-Warning: nakamura.uits.iupui.edu: apache set sender to stephen.marquard@uct.ac.za using -f\"\n[1] \"From: stephen.marquard@uct.ac.za\"\n[1] \"Author: stephen.marquard@uct.ac.za\"\n[1] \"From david.horwitz@uct.ac.za Fri Jan  4 07:02:32 2008\"\n[1] \"X-Authentication-Warning: nakamura.uits.iupui.edu: apache set sender to david.horwitz@uct.ac.za using -f\"\n[1] \"From: david.horwitz@uct.ac.za\"\n[1] \"Author: david.horwitz@uct.ac.za\"\n[1] \"r39753 | david.horwitz@uct.ac.za | 2008-01-04 13:05:51 +0200 (Fri, 04 Jan 2008) | 1 line\"\n[1] \"From david.horwitz@uct.ac.za Fri Jan  4 06:08:27 2008\"\n[1] \"X-Authentication-Warning: nakamura.uits.iupui.edu: apache set sender to david.horwitz@uct.ac.za using -f\"",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>파일</span>"
    ]
  },
  {
    "objectID": "07-file.html#r-file-user-input",
    "href": "07-file.html#r-file-user-input",
    "title": "7  파일",
    "section": "\n7.6 사용자가 파일명 선택",
    "text": "7.6 사용자가 파일명 선택\n매번 다른 파일을 처리할 때마다 R 코드를 편집하고 싶지는 않다. 매번 프로그램이 실행될 때마다, 파일명을 사용자가 입력하도록 만드는 것이 좀더 유용할 것이다. 그래서 R 코드를 바꾸지 않고, 다른 파일에 대해서도 동일한 프로그램을 사용하도록 만들자.\n다음과 같이 commandArgs을 사용해서 사용자로부터 파일명을 읽어 프로그램을 실행하는 것이 단순하다. file-user-input.R 파일에 다음과 같이 R 스크립트를 작성한다. 자세한 사항은 R 병렬 프로그래밍을 참조한다. 1 그리고, 사용자의 입력을 받도록 하는 프롬프트를 생략하고 바로 쉘에서 인자를 넘기는 것으로 프로그램을 작성했다.\n\n\nR\n\ncat(\"Enter the file name: \")\nfname &lt;- readLines(file(\"stdin\"), 1) \n\nfhand &lt;- readLines(fname)\n\ncount &lt;- 0\n\nfor (line in fhand) {\n  if (startsWith(line, \"Subject:\")) {\n    count &lt;- count + 1\n  }\n}\n\nprint(paste('There were', count, 'subject lines in', fname))\n\n\n\n\n\n파이썬\n\nfname = input('Enter the file name: ')\nfhand = open(fname)\ncount = 0\nfor line in fhand:\n    if line.startswith('Subject:'):\n        count += 1\nprint('There were', count, 'subject lines in', fname)\n\n\n\n\n사용자로부터 파일명을 읽고 변수 fname에 저장하고, 그 파일을 연다. 이제 다른 파일에 대해서도 반복적으로 프로그램을 실행할 수 있다. RStudio Terminal (Console 패널 아님)을 열고 다음과 같이 인자를 넘겨 실행하면 된다.\n\n$ rscript file-user-input.R\nEnter the file name: mbox.txt\n경고메시지(들):\n사용되지 않는 커넥션 3 (stdin)를 닫습니다\n[1] \"There were 1797 subject lines in mbox.txt\"\n\n$ rscript file-user-input.R\nEnter the file name: mbox-short.txt\n경고메시지(들):\n사용되지 않는 커넥션 3 (stdin)를 닫습니다\n[1] \"There were 27 subject lines in mbox-short.txt\"\nThere were 27 subject lines in ../data/mbox-short.txt\n\n다음 절을 살펴보기 전에, 이 프로그램을 검토하면서 자신에게 다음을 질문해보자. “여기서 무엇이 잘못될 수 있을까?” 또는 “이 간결하고 멋진 프로그램이 오류를 발생시키고 바로 종료되어 사용자에게 나쁜 인상을 남길 수 있게 만드는 것은 무엇일까?”",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>파일</span>"
    ]
  },
  {
    "objectID": "07-file.html#r-file-trycatch",
    "href": "07-file.html#r-file-trycatch",
    "title": "7  파일",
    "section": "\n7.7 tryCatch 사용하기",
    "text": "7.7 tryCatch 사용하기\n여러분에게 엿보지 말라고 말씀드렸습니다. 이번이 마지막 기회입니다. 사용자가 파일명이 아닌 뭔가 다른 것을 입력하면 어떻게 될까요?\n\n$ rscript file-user-input.R \"missing.txt\"\nfile(con, \"r\")에서 다음과 같은 에러가 발생했습니다:커넥션을 열 수 없습니다\n호출: readLines -&gt; file\n추가정보: 경고메시지(들):\nfile(con, \"r\")에서:\n  파일 'missing.txt'를 여는데 실패했습니다: No such file or directory\n실행이 정지되었습니다\n\n$ rscript file-user-input.R \"na na boo boo\"\nfile(con, \"r\")에서 다음과 같은 에러가 발생했습니다:커넥션을 열 수 없습니다\n호출: readLines -&gt; file\n추가정보: 경고메시지(들):\nfile(con, \"r\")에서:\n  파일 'na na boo boo'를 여는데 실패했습니다: No such file or directory\n실행이 정지되었습니다\n\n웃을 일은 절대 아닌다. 사용자는 결국 여러분이 작성한 프로그램을 망가뜨리기 위해 고의든 악의를 가지든 가능한 모든 수단을 강구할 것이다. 사실, 소프트웨어 개발팀의 중요한 부분은 품질 보증(Quality Assurance, QA)이라는 조직이다. 품질보증 조직은 프로그래머가 만든 소프트웨어를 망가뜨리기 위해 가능한 말도 안 되는 것을 수행한다.\n사용자가 소프트웨어를 제품으로 구매하거나, 주문형으로 개발하는 프로그램에 대해 월급을 지급하던지 관계없이 품질보증 조직은 프로그램이 사용자에게 전달되기 전까지 프로그램 오류를 발견할 책임이 있다. 그래서 품질보증 조직은 프로그래머의 최고의 친구다.\n프로그램 오류를 찾았기 때문에, tryCatch 구조를 사용해서 오류를 우아하게 고쳐봅시다. 파일 열기 file() 호출이 잘못될 수 있다고 가정하고, file() 호출이 실패할 때를 대비해서 다음과 같이 복구 코드를 추가한다.\n\n\n\n7.7.1 R 파일 file-user-input-try.R\n\n\ncat(\"Enter the file name: \")\nfname &lt;- readLines(file(\"stdin\"), 1) \n\nfileOpened &lt;- FALSE\n\nresult &lt;- try({\n  fhand &lt;- readLines(fname)\n  fileOpened &lt;- TRUE\n}, silent = TRUE)\n\nif (!fileOpened) {\n  cat(\"File cannot be opened:\", fname, \"\\n\")\n  q(\"no\")\n}\n\ncount &lt;- 0\n\nfor (line in fhand) {\n  if (startsWith(line, \"Subject:\")) {\n    count &lt;- count + 1\n  }\n}\n\ncat(\"There were\", count, \"subject lines in\", fname, \"\\n\")\n\n\n\n\n\n\n7.7.2 파이썬 file-user-input-try.py\n\n\nfname = input('Enter the file name: ')\ntry:\n    fhand = open(fname)\nexcept:\n    print('File cannot be opened:', fname)\n    exit()\n\ncount = 0\nfor line in fhand:\n    if line.startswith('Subject:'):\n        count += 1\n\nprint('There were', count, 'subject lines in', fname)\n\n\n\n\n이제 사용자 혹은 품질 보증 조직에서 올바르지 않거나 어처구니 없는 파일명을 입력했을 때, 버그를 try() 함수로 잡아서 우아하게 복구한다.\n\n$ rscript file-user-input-try.R\nEnter the file name: mbox.txt\n경고메시지(들):\n사용되지 않는 커넥션 3 (stdin)를 닫습니다\nThere were 1797 subject lines in mbox.txt\n\n$ rscript file-user-input-try.R\nEnter the file name: no no no\n경고메시지(들):\nfile(con, \"r\")에서:\n  파일 'no no no'를 여는데 실패했습니다: No such file or directory\nFile cannot be opened: no no no\n\nR 프로그램을 작성할 때 readLines() 파일 열기 호출을 보호하는 것은 try()의 적절한 사용 예제가 된다. “R 방식(R way)”으로 무언가를 작성할 때, “알스러운”이라는 용어를 사용한다. 상기 파일을 여는 예제는 알스러운 방식의 좋은 예가 된다고 말한다.\nR에 좀더 자신감이 생기게 되면, 다른 R 프로그래머와 동일한 문제에 대해 두 가지 동치하는 해답을 가지고 어떤 접근법이 좀더 “알스러운지”에 대한 현답을 찾는데도 관여하게 된다.\n“좀더 알스럽게” 되는 이유는 프로그래밍이 엔지니어링적인 면과 예술적인 면을 동시에 가지고 있기 때문이다. 항상 무언가를 단지 작동하는 것에만 관심이 있지 않고, 프로그램으로 작성한 해결책이 좀더 우아하고, 다른 동료에 의해서 우아한 것으로 인정되기를 또한 원합니다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>파일</span>"
    ]
  },
  {
    "objectID": "07-file.html#r-file-write",
    "href": "07-file.html#r-file-write",
    "title": "7  파일",
    "section": "\n7.8 파일에 쓰기",
    "text": "7.8 파일에 쓰기\n파일에 쓰기 위해서는 두 번째 매개 변수로 ‘w’ 모드로 파일을 열어야 한다.\n\n\nR\n\nfout &lt;- file(\"output.txt\", \"w\")\nprint(fout)\nclose(fout)\n\n\n\n\n\n파이썬\n\nfout = open('output.txt', 'w')\nprint(fout)\n\n\n\n\n파일이 이미 존재하는데 쓰기 모드에서 파일을 여는 것은 이전 데이터를 모두 지워버리고, 깨끗한 파일 상태에서 다시 시작되니 주의가 필요하다. 만약 파일이 존재하지 않는다면, 새로운 파일이 생성된다.\n파일 핸들 객체의 writeLines() 함수는 데이터를 파일에 저장한다. 라인을 끝내고 싶을 때, 명시적으로 줄바꿈 문자를 삽입해서 파일에 쓰도록 라인 끝을 필히 관리해야 한다. print문이 자동적으로 줄바꿈을 추가하듯이 writeLines() 함수도 자동적으로 줄바꿈을 추가한다.\n\n\nR\n\nfout &lt;- file(\"output.txt\", \"w\")\nline1 &lt;- \"This here's the wattle,\\n\"\nwriteLines(line1, fout)\nline2 &lt;- 'the emblem of our land.\\n'\nwriteLines(line2, fout)\nclose(fout)\n\n\n\n\n\n파이썬\n\nfout = open(\"output.txt\", \"w\")\nline1 = \"This here's the wattle,\\n\"\nfout.write(line1)\nline2 = 'the emblem of our land.\\n'\nfout.write(line2)\nfout.close()\n\n\n\n\n파일 쓰기가 끝났을 때, 파일을 필히 닫아야 한다. 파일을 닫는 것은 데이터 마지막 비트까지 디스크에 물리적으로 쓰여져서, 전원이 나가더라도 자료가 유실되지 않는 역할을 한다.\n파일 읽기로 연 파일을 닫을 수 있지만, 몇개 파일을 열어 놓았다면 약간 단정치 못하게 끝날 수 있습니다. 왜냐하면 프로그램이 종료될 때 열린 모든 파일이 닫혀졌는지 파이썬이 확인하기 때문이다. 파일에 쓰기를 할 때는, 파일을 명시적으로 닫아서 예기치 못한 일이 발생할 여지를 없애야 한다.\n파일에 두 문장을 써 넣은 결과는 다음과 같다.\n\n$ cat output.txt\nThis here's the wattle,\n\nthe emblem of our land.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>파일</span>"
    ]
  },
  {
    "objectID": "07-file.html#r-file-debug",
    "href": "07-file.html#r-file-debug",
    "title": "7  파일",
    "section": "\n7.9 디버깅",
    "text": "7.9 디버깅\n파일을 읽고 쓸 때, 공백 때문에 종종 문제에 봉착한다. 이런 종류의 오류는 공백, 탭, 줄바꿈이 눈에 보이지 않기 때문에 디버그하기도 쉽지 않다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n우선 RStudio IDE의 상단 메뉴에서 Tools -&gt; Global Options -&gt; Code -&gt; Display -&gt; “Show whitespace characters” 를 통해 공백문자(whitespace)에 대해 확인할 수 있다.\n내장함수 dput이 도움이 될 수 있다. 인자로 임의 객체를 잡아 객체 문자열 표현식으로 반환한다. 문자열 공백문자는 역슬래쉬 시퀀스로 표현된다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n여러분이 봉착하는 또 다른 문제는 다른 시스템에서는 라인 끝을 표기하기 위해서 다른 문자를 사용한다는 점이다. 어떤 시스템은 \\n 으로 줄바꿈을 표기하고, 다른 시스템은 \\r으로 반환 문자(return character)를 사용한다. 둘다 모두 사용하는 시스템도 있다. 파일을 다른 시스템으로 이식한다면, 이러한 불일치가 문제를 야기한다.\n대부분의 시스템에는 A 포맷에서 B 포멧으로 변환하는 응용프로그램이 있다. https://en.wikipedia.org/wiki/Newline 에서 응용프로그램을 찾을 수 있고, 좀더 많은 것을 읽을 수 있다. 물론, 여러분이 직접 프로그램을 작성할 수도 있다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>파일</span>"
    ]
  },
  {
    "objectID": "07-file.html#r-file-terminology",
    "href": "07-file.html#r-file-terminology",
    "title": "7  파일",
    "section": "\n7.10 용어정의",
    "text": "7.10 용어정의\n\n\n잡기(catch): tryCatch 함수를 사용하여 프로그램이 예외 상황으로 인해 종료되는 것을 방지하는 과정으로 예외가 발생할 때 실행할 코드를 지정하고, 정상적으로 코드를 계속 실행할 수 있게 한다.\n\n줄바꿈: 라인 끝을 표기 위한 파일이나 문자열에 사용되는 특수 문자.\n\n파이썬스러운(Pythonic): 파이썬에서 우아하게 작동하는 기술. “try와 catch를 사용하는 것은 파일이 없는 경우를 복구하는 파이썬스러운 방식이다.”\n\n품질 보증(Quality Assurance, QA): 소프트웨어 제품의 전반적인 품질을 보중하는데 집중하는 사람이나 조직. 품질 보증은 소프트웨어 제품을 시험하고, 제품이 시장에 출시되기 전에 문제를 확인하는데 관여한다.\n\n텍스트 파일: 하드디스크 같은 영구 저장소에 저장된 일련의 문자 집합.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>파일</span>"
    ]
  },
  {
    "objectID": "07-file.html#r-file-ex",
    "href": "07-file.html#r-file-ex",
    "title": "7  파일",
    "section": "연습문제",
    "text": "연습문제\n\n파일을 읽고 한줄씩 파일의 내용을 모두 대문자로 출력하는 프로그램을 작성하세요. 프로그램을 실행하면 다음과 같이 보일 것입니다.\n\n\n$ Rscript shout.R \"mbox-short.txt\"\n\nFROM STEPHEN.MARQUARD@UCT.AC.ZA SAT JAN 5 09:14:16 2008\nRETURN-PATH: &lt;POSTMASTER@COLLAB.SAKAIPROJECT.ORG&gt;\nRECEIVED: FROM MURDER (MAIL.UMICH.EDU [141.211.14.90])\nBY FRANKENSTEIN.MAIL.UMICH.EDU (CYRUS V2.3.8) WITH LMTPA;\nSAT, 05 JAN 2008 09:14:16 -0500\n\nhttp://www.py4inf.com/code/mbox-short.txt에서 파일을 다운로드 받으세요.\n\n파일명을 입력받아, 파일을 읽고, 다음 형식의 라인을 찾는 프로그램을 작성하세요.\n\n\nX-DSPAM-Confidence: 0.8475\n\n“X-DSPAM-Confidence:”로 시작하는 라인을 만나게 되면, 부동 소수점 숫자를 뽑아내기 위해 해당 라인을 별도로 보관하세요. 라인 수를 세고, 라인으로부터 스팸 신뢰값의 총계를 계산하세요. 파일의 끝에 도달할 했을 때, 평균 스팸 신뢰도를 출력하세요.\n\n$ Rscript calc.R \"mbox-short.txt\"\nAverage spam confidence: 0.750718518519\n\n$ Rscript calc.R \"mbox.txt\"\nAverage spam confidence: 0.894128046745\n\nmbox.txt와 mbox-short.txt 파일에 작성한 프로그램을 시험하세요.\n\n때때로, 프로그래머가 지루해지거나, 약간 재미를 목적으로, 프로그램에 무해한 부활절 달걀(Easter Egg, https://en.wikipedia.org/wiki/Easter_egg_(media))을 넣습니다. 사용자가 파일명을 입력하는 프로그램을 변형시켜, ’na na boo boo’로 파일명을 정확하게 입력했을 때, 재미있는 메시지를 출력하는 프로그램을 작성하세요. 파일이 존재하거나, 존재하지 않는 다른 모든 파일에 대해서도 정상적으로 작동해야 합니다. 여기 프로그램을 실행한 견본이 있습니다.\n\n\n$ Rscript egg.R \"mbox.txt\"\nThere were 1797 subject lines in mbox.txt\n\n$ Rscript egg.R \"missing.tyxt\"\nFile cannot be opened: missing.tyxt\n\n$ Rscript egg.R \"na na boo boo\"\nNA NA BOO BOO TO YOU - You have been punk'd!\n\n프로그램에 부활절 달걀을 넣도록 격려하지는 않습니다. 단지 연습입니다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>파일</span>"
    ]
  },
  {
    "objectID": "07-file.html#footnotes",
    "href": "07-file.html#footnotes",
    "title": "7  파일",
    "section": "",
    "text": ".R 스크립트를 인자와 함께 실행↩︎",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>파일</span>"
    ]
  },
  {
    "objectID": "08-list.html",
    "href": "08-list.html",
    "title": "8  리스트",
    "section": "",
    "text": "8.1 리스트는 시퀀스다.\n문자열처럼, 리스트(list)는 값의 시퀀스다. 문자열에서, 값은 문자지만, 리스트에서는 임의 자료형(type)도 될 수 있다. 리스트 값은 요소(elements)나 때때로 항목(items)으로 불린다.\n신규 리스틀 생성하는 방법은 여러 가지가 있다. 가장 간단한 방법은 list()함수로 요소를 감싸는 것이다.\n첫번째 예제는 4개 정수 리스트다. 두번째 예제는 3개 문자열 리스트다. 세번째 예제는 한글 문자열 리스트다. 리스트 문자열 요소가 동일한 자료형(type)일 필요는 없다. 다음 리스트는 문자열, 부동 소수점 숫자, 정수, (아!) 또 다른 리스트를 담고 있다.\n또 다른 리스트 내부에 리스트가 중첩(nested)되어 있다.\n어떤 요소도 담고 있지 않는 리스트를 빈 리스트(empty list)라고 부르고, list()로 생성한다.\n예상했듯이, 리스트 값을 변수에 대입할 수 있다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>리스트</span>"
    ]
  },
  {
    "objectID": "08-list.html#r-list-sequence",
    "href": "08-list.html#r-list-sequence",
    "title": "8  리스트",
    "section": "",
    "text": "R\n\nlist(10, 20, 30, 40)\nlist('crunchy frog', 'ram bladder', 'lark vomit')\nlist('고양이', '호랑이', '사자')\n\n\n\n\n\n파이썬\n\n[10, 20, 30, 40]\n['crunchy frog', 'ram bladder', 'lark vomit']\n['고양이', '호랑이', '사자']\n\n\n\n\n\n\n\nR\n\nlist('spam', 2.0, 5, list(10, 20))\n\n\n\n\n\n파이썬\n\n['spam', 2.0, 5, [10, 20]]\n\n\n\n\n\n\n\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>리스트</span>"
    ]
  },
  {
    "objectID": "08-list.html#r-list-mutable",
    "href": "08-list.html#r-list-mutable",
    "title": "8  리스트",
    "section": "\n8.2 리스트는 변경가능하다.",
    "text": "8.2 리스트는 변경가능하다.\n리스트 요소에 접근하는 구문은 문자열 문자에 접근하는 것과 동일한 꺾쇠 괄호 연산자다. 꺽쇠 괄호 내부 표현식은 인덱스를 명세한다. 기억할 것은 인덱스는 1 에서부터 시작한다는 것이다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n문자열과 마찬가지로, 리스트 항목 순서를 바꾸거나, 리스트에 새로운 항목을 다시 대입할 수 있기 때문에 리스트는 변경가능하다. 꺾쇠 괄호 연산자가 대입문 왼쪽편에 나타날 때, 새로 대입될 리스트 요소를 나타낸다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n리스트 numbers 첫번째 요소는 123 값을 가지고 있었으나, 이제 5 값을 가진다.\n리스트를 인덱스와 요소의 관계로 생각할 수 있다. 이 관계를 매핑(mapping)이라고 부른다. 각각의 인덱스는 요소 중 하나에 대응(“maps to”)된다.\n리스트 인덱스는 문자열 인덱스와 동일한 방식으로 동작한다.\n\n어떠한 정수 표현식도 인덱스로 사용할 수 있다.\n존재하지 않는 요소를 읽거나 쓰려고 하면, 일종의 인덱스 오류 (IndexError)로 NULL이 반환된다.\n인덱스가 음의 값이면, 해당 리스트 원소가 누락된다.\n\n%in% 연산자도 또한 리스트에서 동작하니 리스트 원소로 존재하는지 여부를 판별하는데 사용할 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>리스트</span>"
    ]
  },
  {
    "objectID": "08-list.html#r-list-traversal",
    "href": "08-list.html#r-list-traversal",
    "title": "8  리스트",
    "section": "\n8.3 리스트 순회법",
    "text": "8.3 리스트 순회법\n리스트 요소를 순회하는 가장 흔한 방법은 for문을 사용하는 것이다. 문자열에서 사용한 것과 구문은 동일하다.\n\n\nR\n\nfor(cheese in cheeses) {\n  print(cheese)\n}\n\n\n\n\n\n파이썬\n\nfor cheese in cheeses:\n    print cheese\n\n\n\n\n리스트 요소를 읽기만 한다면 이것만으로도 잘 동작한다. 하지만, 리스트 요소를 쓰거나, 갱신하는 경우, 인텍스가 필요하다. 리스트 요소를 쓰거나 갱신하는 일반적인 방법은 seq_along() 함수를 조합하는 것이다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기 루프는 리스트를 운행하고 각 요소를 갱신한다. seq_along() 함수는 1 에서 \\(n\\) 까지 리스트 인텍스를 반환한다. 여기서, \\(n\\)은 리스트 길이가 된다. 매번 루프가 반복될 때마다, i는 다음 요소 인덱스를 얻는다. 몸통 부문 대입문은 i를 사용해서 요소의 이전 값을 읽고 새 값을 대입한다.\n빈 리스트(list())에 대해서 for문은 결코 몸통 부문을 실행하지 않는다.\n\n\nR\n\nfor(x in list()) {\n  print('이런 일은 절대 발생하지 않습니다.')\n}\n\n\n\n\n\n파이썬\n\nfor x in empty:\n    print('이런 일은 절대 발생하지 않습니다.')\n\n\n\n\n리스트가 또 다른 리스트를 담을 수 있지만, 중첩된 리스트는 여전히 요소 하나로 간주된다. 다음 리스트 길이는 4 이다.\n\n\nR\n\nlist('spam', 1, list('브리', '체다', '까멩베르'), list(1, 2, 3))\n\n\n\n\n\n파이썬\n\n['spam', 1, ['Brie', 'Roquefort', 'Pol le Veq'], [1, 2, 3]]",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>리스트</span>"
    ]
  },
  {
    "objectID": "08-list.html#r-list-operator",
    "href": "08-list.html#r-list-operator",
    "title": "8  리스트",
    "section": "\n8.4 리스트 연산자",
    "text": "8.4 리스트 연산자\nc() 함수 연산자는 리스트를 추가하여 결합시킨다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n유사하게 rep() 함수를 활용하면 주어진 횟수만큼 리스트를 반복한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n첫 예제는 list(0)을 4회 반복한다. 두 번째 예제는 list(1, 2, 3) 리스트를 3회 반복한다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>리스트</span>"
    ]
  },
  {
    "objectID": "08-list.html#r-list-slice",
    "href": "08-list.html#r-list-slice",
    "title": "8  리스트",
    "section": "\n8.5 리스트 슬라이스",
    "text": "8.5 리스트 슬라이스\n슬라이스(slice) 연산자는 리스트에도 또한 동작한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n첫 번째 인덱스를 1로 지정하면, 슬라이스는 처음부터 시작한다. 두 번째 인덱스를 length() 함수로 리스트 길이를 지정하면, 슬라이스는 끝까지 간다. 그래서 양쪽의 인덱스를 생략하면, t같이 지정하면 슬라이스 결과는 전체 리스트를 복사한 것이 된다.\n리스트는 변경이 가능하기 때문에 리스트를 접고, 돌리고, 훼손하는 연산을 수행하기 전에 복사본을 만들어 두는 것이 유용하다.\n대입문 왼편의 슬라이스 연산자로 복수의 요소를 갱신할 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>리스트</span>"
    ]
  },
  {
    "objectID": "08-list.html#r-list-function",
    "href": "08-list.html#r-list-function",
    "title": "8  리스트",
    "section": "\n8.6 리스트 함수",
    "text": "8.6 리스트 함수\nR은 리스트 자료형에 연산할수 있는 함수를 제공한다. 예를 들어, 덧붙이기 (append) 함수는 리스트 끝에 신규 요소를 추가한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n정렬(order) 함수는 낮음에서 높음으로 리스트 요소를 정렬한다. 리스트에서 sapply() 혹은 unlist() 함수로 값으로 변환시키고 order() 함수를 통해 내림차순 혹은 오름차순으로 정렬 인덱스를 뽑아 리스트내 원소를 정렬시킨다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>리스트</span>"
    ]
  },
  {
    "objectID": "08-list.html#r-list-delete",
    "href": "08-list.html#r-list-delete",
    "title": "8  리스트",
    "section": "\n8.7 리스트 요소 삭제",
    "text": "8.7 리스트 요소 삭제\n리스트 요소를 삭제하는 방법이 몇 가지 있다. 리스트 요소 인덱스를 알고 있다면, 숫자 인덱스 앞에 - 기호를 붙여 사용한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n리스트 요소 명칭을 알고 있다면, 리스트 요소에 NULL을 대입하여 삭제시킨다.\n\nt &lt;- list(a='a', b='b', c = 'c')\nt[[\"c\"]] &lt;- NULL\nt$c &lt;- NULL\nt\n#&gt; $a\n#&gt; [1] \"a\"\n#&gt; \n#&gt; $b\n#&gt; [1] \"b\"\n\nNULL을 대입하여 삭제시킨 리스트는 제거된 요소를 반환한다. t[[1]] 리스트 인덱스를 통해 요소에 접근하고 NULL을 대입하여 삭제한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n(인덱스 혹인 리스트 요인 이름이 아닌) 제거할 요소값을 알고 있다면, 리스트 요인값을 활용해서 제거하는 것도 가능하다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n하나 이상의 요소를 제거하기 위해서, 슬라이스 인덱스(slice index)를 사용하는 것도 가능하다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n위의 예제에서 2에서 5까지 모든 요소를 선택하고 선택된 모든 요소를 제거한다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>리스트</span>"
    ]
  },
  {
    "objectID": "08-list.html#리스트와-함수",
    "href": "08-list.html#리스트와-함수",
    "title": "8  리스트",
    "section": "\n8.8 리스트와 함수",
    "text": "8.8 리스트와 함수\n루프를 작성하지 않고도 리스트를 빠르게 살펴볼 수 있는 리스트에 적용할 수 있는 내장함수를 활용하는 것도 방법이지만, 깔끔한 세상(tidyverse) 생태계의 일원인 purrr 함수형 프로그래밍 팩키지에 내장된 함수를 활용하는 것도 권장된다.\n하지만, 다음과 같이 1차원 리스트는 unlist() 함수를 활용하여 벡터로 변환해서 사용하는 것이 편리한 경우가 많다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nsum(), max(), length() 등 함수는 입력 자료형이 무엇이냐에 따라 다르게 동작할 수 있고, 입력 자료형에 결측값 등 특이값이 들어있는 경우 기대했던 결과가 나올 수 없으니 필히 자료형을 사전에 점검하고 활용하도록 한다.\n리스트를 사용해서, 앞서 작성한 프로그램을 다시 작성해서 사용자가 입력한 숫자 목록 평균을 계산한다.\n우선 리스트 없이 평균을 계산하는 프로그램:\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기 프로그램에서, count 와 sum 변수를 사용해서 반복적으로 사용자가 숫자를 입력하면 값을 저장하고, 지금까지 사용자가 입력한 누적 합계를 계산한다. R 콘솔에서 source() 함수를 사용해서 실행한 결과는 다음과 같다.\n\n&gt; source(\"code/list_average.R\")\n숫자를 입력하세요: 10\n숫자를 입력하세요: 20\n숫자를 입력하세요: 30\n숫자를 입력하세요: done\n평균: 20\n\n단순하게, 사용자가 입력한 각 숫자를 리스트로 기억하고 내장함수를 사용해서 프로그램 마지막에 합계와 갯수를 통해 평균을 계산한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n## 프로그램 명칭: `list_datatype.R`\nnumlist &lt;- list()\n\nwhile (TRUE) {\n  inp &lt;- readline('Enter a number: ')\n  if(inp == 'done') break\n\n  value &lt;- as.numeric(inp)\n  numlist &lt;- append(numlist, value)\n}\n\nnum_vector &lt;- unlist(numlist)\n\naverage &lt;- sum(num_vector) / length(num_vector)\ncat('List Average:', average)\n\n루프가 시작되기 전 빈 리스트를 생성하고, 매번 숫자를 입력할 때마다 숫자를 리스트에 추가한다. 프로그램 마지막에 간단하게 리스트 총합을 계산하고, 평균을 산출하기 위해서 입력한 숫자 개수로 나눈다. R 콘솔에서 source() 함수를 사용해서 실행한 결과는 다음과 같다.\n\n&gt; source(\"code/list_average2.R\")\n숫자를 입력하세요: 10\n숫자를 입력하세요: 20\n숫자를 입력하세요: 30\n숫자를 입력하세요: done\n평균: 20",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>리스트</span>"
    ]
  },
  {
    "objectID": "08-list.html#r-list-string",
    "href": "08-list.html#r-list-string",
    "title": "8  리스트",
    "section": "\n8.9 리스트와 문자열",
    "text": "8.9 리스트와 문자열\n문자열(string)은 문자 시퀀스이고, 리스트는 값 시퀀스이다. 하지만 리스트 문자는 문자열과 같지는 않다. 문자열을 리스트 문자로 변환하기 위해서, strsplit() 함수를 사용한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nlist는 내장함수 이름이기 때문에, 변수명으로 사용하는 것을 피해야 한다. l을 사용하면 1 처럼 보이기 때문에 가능하면 피한다. 그래서, t를 사용했다.\nstrsplit() 함수는 문자열을 구분자(이번 경우에는 NULL)를 사용해서 문자 각각으로 쪼갠다. 문자열 단어로 쪼개려면, 구분자를 바꿔 예를 들어 공백을 기준으로 쪼갠다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n분할 함수를 사용해서 문자열을 리스트 토큰으로 쪼개면, 인덱스 연산자(‘[]’)를 사용하여 리스트의 특정 단어를 볼 수 있다.\n옵션 인자로 단어 경계로 어떤 문자를 사용할 것인지 지정하는데 사용되는 구분자 (delimiter)를 활용하여 분할 strsplit() 함수를 호출한다. 다음 예제는 구분자로 하이픈(‘-’)을 사용한 사례다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n합병 (paste) 함수는 분할 (strsplit) 함수의 역이다. 문자열 리스트를 받아 리스트 요소를 연결한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기의 경우, 구분자가 공백 문자여서 결합 (paste) 함수가 단어 사이에 공백을 넣는다. 공백없이 문자열을 결합하기 위해서, 구분자로 빈 문자열 ’’을 사용한다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>리스트</span>"
    ]
  },
  {
    "objectID": "08-list.html#r-list-parsing",
    "href": "08-list.html#r-list-parsing",
    "title": "8  리스트",
    "section": "\n8.10 라인 파싱하기",
    "text": "8.10 라인 파싱하기\n파일을 읽을 때 통상, 단지 전체 라인을 출력하는 것 말고 뭔가 다른 것을 하고자 한다. 종종 “흥미로운 라인을” 찾아서 라인을 파싱(parse)하여 흥미로운 부분을 찾고자 한다. “From”으로 시작하는 라인에서 요일을 찾고자 하면 어떨까?\n\nFrom stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008\n\n이런 종류의 문제에 직면했을 때, stringr 팩키지 분할 str_split() 함수가 매우 효과적이다. 작은 프로그램을 작성하여 “From”으로 시작하는 라인을 찾고 str_split() 함수로 파싱하고 라인의 흥미로운 부분을 출력한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nif 문의 축약 형태를 사용하여 next 문을 if문과 동일한 라인에 놓았다. if 문 축약 형태는 next 문을 들여쓰기를 다음 라인에 한 것과 동일하다.\n프로그램은 다음을 출력한다.\n\nSat\nFri\nFri\nFri\n...\n\n나중에, 매우 정교한 기술에 대해서 학습해서 정확하게 검색하는 비트(bit) 수준 정보를 찾아 내기 위해서 작업할 라인을 선택하고, 어떻게 해당 라인을 뽑아낼 것이다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>리스트</span>"
    ]
  },
  {
    "objectID": "08-list.html#r-list-object-value",
    "href": "08-list.html#r-list-object-value",
    "title": "8  리스트",
    "section": "\n8.11 객체와 값(value)",
    "text": "8.11 객체와 값(value)\n다음 대입문을 실행하면,\n\na &lt;- 'banana'\nb &lt;- 'banana'\n\na 와 b 모두 문자열을 참조하지만, 두 변수가 동일한 문자열을 참조하는지 알 수 없다. 두 가지 가능한 상태가 있다.\n\n\n\n\n\n그림 8.1: 문자열 참조\n\n\n한 가지 경우는 a 와 b가 같은 값을 가지는 다른 두 객체를 참조하는 것이다. 두 번째 경우는 같은 객체를 참조하는 것이다.\n두 변수가 동일한 객체를 참조하는지를 확인하기 위해서, 파이썬에서는 is 연산자가 사용된다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n이 경우, 파이썬은 하나의 문자열 객체를 생성하고 a 와 b 모두 동일한 객체를 참조한다.\n하지만, 리스트 두 개를 생성할 때, 객체가 두 개다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기의 경우, 두 개의 리스트는 동등하다고 말할 수 있다. 왜냐하면 동일한 요소를 가지고 있기 때문이다. 하지만, 같은 객체는 아니기 때문에 동일하지는 않다. 두 개의 객체가 동일하다면, 두 객체는 또한 등등하다. 하지만, 동등하다고 해서 반드시 동일하지는 않다.\nR과 파이썬이 다른 결과를 출력하는 이유는 무엇일까? R identical() 함수는 객체의 값과 구조가 완전히 동일한지를 한다. a &lt;- list(1, 2, 3)와 b &lt;- list(1, 2, 3)의 경우, a와 b는 별도의 객체이지만, 그 내용(값과 구조)이 완전히 동일하기 때문에 identical(a, b)는 TRUE를 반환한다. 파이썬 is 연산자는 객체가 메모리 상에서 동일한 위치를 가리키는지(즉, 같은 객체인지)를 확인한다. a = [1, 2, 3]와 b = [1, 2, 3]의 경우, a와 b는 값은 동일하지만 서로 다른 메모리 위치에 할당된 별개의 리스트 객체라서 a is b는 False를 반환한다.\n지금까지 “객체(object)”와 “값(value)”을 구분 없이 사용했지만, “객체가 값을 가진다”라고 말하는 것이 좀더 정확하다. a = [1,2,3] 을 실행하면, a 는 특별한 순서 요소값을 갖는 리스트 객체로 참조한다. 만약 다른 리스트가 같은 요소를 가지고 있다면, 그 리스트는 같은 값을 가진다고 말할 수 있다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>리스트</span>"
    ]
  },
  {
    "objectID": "08-list.html#r-list-aliasing",
    "href": "08-list.html#r-list-aliasing",
    "title": "8  리스트",
    "section": "\n8.12 에일리어싱",
    "text": "8.12 에일리어싱\n에일리어싱(별칭 부여, Aliasing) 용어는 두 개 이상의 변수가 동일한 객체를 참조할 때 사용된다. a가 객체를 참조하고, b &lt;- a 대입하다면, 두 변수는 동일한 객체를 참조한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n객체와 변수의 연관짖는 것을 참조(reference)라고 한다. 상기의 경우 동일한 객체에 두 개의 참조가 있다.\n하나 이상의 참조를 가진 객체는 한개 이상의 이름을 갖게 되어서, 객체가 에일리어스(aliased) 되었다고 한다. 만약 에일리어스된 객체가 변경 가능하면, 변화의 여파는 다른 객체에도 파급된다.\nR에는 파이썬 문자열(string), 튜플(tuple)과 같은 변경 불가능한 자료구조가 없다. 대신 객체 복사본을 생성하여 불변성을 유사하게 구현할 수 있다. dplyr과 같은 패키지에서 데이터 조작을 위해 내부적으로 데이터 복사본을 만들어 작업하는 경우가 많다. 다음 예제를 통해 R과 파이썬 차이를 확인할 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n이와 같은 행동이 유용하기도 하지만, 오류를 발생시키기도 쉽다. 일반적으로, 변경가능한 객체(mutable object)로 작업할 때 에일리어싱을 피하는 것이 안전하다.\n\na = 'banana'\nb = 'banana'\n\n파이썬 문자열 같이 변경 불가능한 객체에 에일리어싱은 그렇게 문제가 되지 않는다. 상기 파이썬 예제에서, a 와 b가 동일한 문자열을 참조하든 참조하지 않든 거의 차이가 없다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>리스트</span>"
    ]
  },
  {
    "objectID": "08-list.html#r-list-debug",
    "href": "08-list.html#r-list-debug",
    "title": "8  리스트",
    "section": "\n8.13 디버깅",
    "text": "8.13 디버깅\n부주의한 리스트 사용이나 변경가능한 객체를 사용하는 경우 디버깅에 시간이 오래 걸릴 수 있다. 다음에 일반적인 함정 유형과 회피하는 방법을 소개한다.\n\nR에서 리스트 함수가 파이썬과는 다르게 동작한다. R 리스트는 기본적으로 변경 가능(mutable)하지만, 리스트를 변형하는 함수 대부분은 새로운 리스트를 반환하고 원본 리스트는 변경하지 않고 파이썬에서 문자열이 작동하는 방식과 유사하지만 차이가 있다. 예를 들어, R에서 sort 함수는 t 리스트의 원본 내용을 변경하지 않고, 정렬된 결과를 새로운 벡터 t_sorted에 저장한다. R에서 리스트나 벡터를 다룰 때는 이러한 특성을 기억하는 것이 중요하다. 또한 R에서는 인터랙티브 환경에서 함수의 동작을 테스트하고, 관련 문서나 도움말(?function_name)을 참조하여 함수가 어떻게 작동하는지 먼저 이해할 것을 권한다. 하지만, 파이썬에서 word = word.strip()과 같은 코드를 사용하여 문자열에서 공백을 제거하고, t = t.sort()처럼 리스트를 정렬할 수 있다. 하지만 정렬(sort) 메쏘드는 None을 반환하기 때문에 주의가 필요하다. 따라서, 리스트 관련 함수, 메쏘드, 연산자를 사용하기 전에, 문서를 주의깊게 읽고, 인터랙티브 모드에서 시험하는 것을 권한다.\n\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n관용구를 선택하고 고수하라.\n\n리스트와 관련된 문제 일부는 리스트를 가지고 할 수 있는 것이 너무 많다는 것이다. 예를 들어, 리스트에서 요소를 제거하기 위해서는 list 객체에서 직접 요소를 제거하는 대신, 새로운 리스트를 생성하거나 벡터로 작업을 대신합니다. R에는 파이썬 pop, remove, del에 해당하는 직접적인 함수가 없으며, 대신 리스트의 특정 요소를 제외한 새로운 리스트를 생성한다. 요소를 추가하기 위해서 append 함수를 사용하거나, c() 함수로 리스트 또는 벡터에 요소를 추가한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n에일리어싱을 회피하기 위해 사본 만들기.\n\nR에서 리스트나 벡터를 정렬하면서 원본 데이터를 보존하고 싶은 경우, 정렬 함수가 원본 객체를 변경하지 않고 새로운 객체를 반환하기 때문에 별도의 사본을 만들 필요가 없다. 하지만, 데이터 분석에서처럼 원본 데이터를 보존하여 만일의 사태에 대비하는 것이 좋다. 파이썬에서는 원본 리스트를 유지하면서, 변경을 가하는 sort와 같은 메쏘드를 사용하고자 한다면, 사본을 만들어야 한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기 예제에서 원 리스트는 그대로 둔 상태로 새로 정렬된 리스트를 반환된 결과는 t에 저장한다. 하지만 이 경우에는, 변수명으로 sorted를 사용하는 것을 피해야 한다!\n\n리스트, 분할 (split), 파일\n\n파일을 읽고 파싱할 때, 프로그램이 중단될 수 있는 입력값을 마주할 수많은 기회가 있다. 그래서 파일을 훑어 “건초더미에서 바늘”을 찾는 프로그램을 작성할 때 사용한 가디언 패턴(guardian pattern)을 다시 살펴보는 것은 좋은 생각이다.\n파일 라인에서 요일을 찾는 프로그램을 다시 살펴보자.\nFrom stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008\n각 라인을 단어로 나누었기 때문에, startswith를 사용하지 않고, 라인에 관심있는 단어가 있는지 살펴보기 위해서 단순하게 각 라인의 첫 단어를 살펴본다. 다음과 같이 continue 문을 사용해서 “From”이 없는 라인을 건너 뛴다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n프로그램이 훨씬 간단하고, 파일 끝에 있는 새줄(newline)을 제거하기 위해 str_trim() 함수를 사용할 필요도 없다. 하지만, 더 좋아졌는가?\n작동하는 것 같지만, 경우에 따라서 첫줄에 Sat 를 출력하고 나서 오류로 프로그램이 정상 동작에 실패하는 경우도 있다. 무엇이 잘못되었을까? 어딘가 엉망이 된 데이터가 있어 우아하고, 총명하며, 매우 R스러운 프로그램을 망가뜨린건가?\n오랜 동안 프로그램을 응시하고 머리를 짜내거나, 다른 사람에게 도움을 요청할 수 있지만, 빠르고 현명한 접근법은 print()문을 추가하는 것이다. print()문을 넣는 가장 좋은 장소는 프로그램이 동작하지 않는 라인 앞이 적절하고, 프로그램 실패를 야기할 것 같은 데이터를 출력한다.\n이 접근법이 많은 라인을 출력하지만, 즉석에서 문제에 대해서 손에 잡히는 단서는 최소한 준다. 그래서 words를 출력하는 출력문을 5번째 라인 앞에 추가한다. “Debug:”를 접두어로 라인에 추가하여, 정상적인 출력과 디버그 출력을 구분한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n프로그램을 실행할 때, 많은 출력결과가 스크롤되어 화면 위로 지나간다. 마지막에 디버그 결과물과 역추적(traceback)을 보고 역추적(traceback) 바로 앞에서 무슨 일이 생겼는지 알 수 있다.\n\n\nR\n\nDebug: 'X-DSPAM-Confidence:', '0.8475'\nDebug: 'X-DSPAM-Probability:', '0.0000'\nDebug: \n\n\n\n\n\n파이썬\n\nDebug: ['X-DSPAM-Confidence:', '0.8475']\nDebug: ['X-DSPAM-Probability:', '0.0000']\nDebug: []\nTraceback (most recent call last):\n  File \"D:/tcs/gpt-coding/data/mbox_debug.py\", line 5, in &lt;module&gt;\n    if words[0] != 'From':\nIndexError: list index out of range\n\n\n\n\n각 디버그 라인은 리스트 단어를 출력하는데, 라인을 분할 str_split() 함수를 활용하여 단어로 만들 때 얻어진다. 프로그램이 실패할 때 리스트 단어는 비었다 ’’. 텍스트 편집기로 파일을 열어 살펴보면 그 지점은 다음과 같다.\n\nX-DSPAM-Result: Innocent\nX-DSPAM-Processed: Sat Jan 5 09:14:16 2008\nX-DSPAM-Confidence: 0.8475\nX-DSPAM-Probability: 0.0000\n\nDetails: http://source.sakaiproject.org/viewsvn/?view=rev&rev=39772\n\n프로그램이 빈 라인을 만났을 때, 오류가 발생한다. 물론, 빈 라인은 ‘0’ 단어 (“zero words”)다. 프로그램을 작성할 때, 왜 이것을 생각하지 못했을까? 첫 단어(word[1])가 “From”과 일치하는지 코드가 점검할 때, “인덱스 범위 오류(index out of range)”가 발생한다.\n물론, 첫 단어가 없다면 첫 단어 점검을 회피하는 가디언 코드(guardian code)를 삽입하기 최적 장소이기는 하다. 코드를 보호하는 방법은 많다. 첫 단어를 살펴보기 전에 단어의 갯수를 확인하는 방법을 택한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n{r\n변경한 코드가 실패해서 다시 디버그할 경우를 대비해서, print문을 제거하는 대신에 print문을 주석 처리한다. 그리고 나서, 단어가 ‘0’ 인지를 살펴보고 만약 ‘0’ 이면, 파일 다음 라인으로 건너뛰도록 next문을 사용하는 가디언 문장(guardian statement)을 추가한다.\n두 개 next문이 “흥미롭고” 좀더 처리가 필요한 라인 집합을 정제하도록 돕는 것으로 생각할 수 있다. 단어가 없는 라인은 “흥미 없어서” 다음 라인으로 건너뛴다. 첫 단어에 “From”이 없는 라인도 “흥미 없어서” 건너뛴다.\n변경된 프로그램이 성공적으로 실행되어서, 아마도 올바르게 작성된 것으로 보인다. 가디언 문장(guardian statement)이 words[1]가 정상작동할 것이라는 것을 확인해 주지만, 충분하지 않을 수도 있다. 프로그램을 작성할 때, “무엇이 잘못 될 수 있을까?”를 항상 생각해야만 한다.\n연습문제: 상기 프로그램의 어느 라인이 여전히 적절하게 보호되지 않은지를 생각해 보세요. 텍스트 파일을 구성해서 프로그램이 실패하도록 만들 수 있는지 살펴보세요. 그리고 나서, 프로그램을 변경해서 라인이 적절하게 보호되게 하고, 새로운 텍스트 파일을 잘 다룰 수 있도록 시험하세요.\n연습문제: 두 if 문 없이, 상기 예제의 가디언 코드(guardian code)를 다시 작성하세요. 대신에 단일 if문과 & 논리 연산자를 사용하는 복합 논리 표현식을 사용하세요.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>리스트</span>"
    ]
  },
  {
    "objectID": "08-list.html#r-list-terminology",
    "href": "08-list.html#r-list-terminology",
    "title": "8  리스트",
    "section": "\n8.14 용어정의",
    "text": "8.14 용어정의\n\n\n에일리어싱(aliasing): 하나 혹은 그 이상의 변수가 동일한 객체를 참조하는 상황.\n\n구분자(delimiter): 문자열이 어디서 분할되어져야 할지를 표기하기 위해서 사용되는 문자나 문자열.\n\n요소(element): 리스트 혹은 다른 시퀀스 값의 하나로 항목(item)이라고도 한다.\n\n동등한(equivalent): 같은 값을 가짐.\n\n인덱스(index): 리스트의 요소를 지칭하는 정수 값.\n\n동일한(identical): 동등을 함축하는 같은 객체임.\n\n리스트(list): 시퀀스 값.\n\n리스트 운행법(list traversal): 리스트의 각 요소를 순차적으로 접근함.\n\n중첩 리스트(nested list): 또 다른 리스트의 요소인 리스트.\n\n객체(object): 변수가 참조할 수 있는 무엇. 객체는 자료형(type)과 값(value)을 가진다.\n\n참조(reference): 변수와 값의 연관.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>리스트</span>"
    ]
  },
  {
    "objectID": "08-list.html#r-list-ex",
    "href": "08-list.html#r-list-ex",
    "title": "8  리스트",
    "section": "연습문제",
    "text": "연습문제\n\n\nhttp://www.py4inf.com/code/romeo.txt에서 파일 사본을 다운로드 받으세요. romeo.txt 파일을 열어, 한 줄씩 읽어들이는 프로그램을 작성하세요. 각 라인마다 stringr 팩키지에서 분할 str_split() 함수를 사용하여 라인을 단어 리스트로 쪼개세요.\n\n각 단어마다, 단어가 이미 리스트에 존재하는지를 확인하세요. 만약 단어가 리스트에 없다면, 리스트에 새 단어로 추가하세요.\n프로그램이 완료되면, 알파벳 순으로 결과 단어를 정렬하고 출력하세요.\n\nEnter file: romeo.txt\n[1] 'Arise', 'But', 'It', 'Juliet', 'Who', 'already',\n'and', 'breaks', 'east', 'envious', 'fair', 'grief',\n'is', 'kill', 'light', 'moon', 'pale', 'sick', 'soft',\n'sun', 'the', 'through', 'what', 'window',\n'with', 'yonder'\n\n\n전자우편 데이터를 읽어 들이는 프로그램을 작성하세요. “From”으로 시작하는 라인을 발견했을 때, stringr 팩키지에서 분할 str_split() 함수를 사용하여 라인을 단어로 쪼개세요. “From” 라인의 두번째 단어, 누가 메시지를 보냈는지에 관심이 있다.\n\nFrom stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008\n“From” 라인을 파싱하여 각 “From”라인의 두번째 단어를 출력한다. 그리고 나서, “From:”이 아닌 “From”라인 갯수를 세고, 끝에 갯수를 출력한다.\n여기 몇 줄을 삭제한 출력 예시가 있다.\n\nRscript fromcount.R\nEnter a file name: mbox-short.txt\n\nstephen.marquard@uct.ac.za\nlouis@media.berkeley.edu\nzqian@umich.edu\n\n[...some output removed...]\n\nray@media.berkeley.edu\ncwen@iupui.edu\ncwen@iupui.edu\ncwen@iupui.edu\n\nThere were 27 lines in the file with From as the first word\n\n\n사용자가 숫자 리스트를 입력하고, 입력한 숫자 중에 최대값과 최소값을 출력하고 사용자가 “done”을 입력할 때 종료하는 프로그램을 다시 작성하세요. 사용자가 입력한 숫자를 리스트에 저장하고, max() 과 min() 함수를 사용하여 루프가 끝나면, 최대값과 최소값을 출력하는 프로그램을 작성하세요.\n\n\nEnter a number: 6\nEnter a number: 2\nEnter a number: 9\nEnter a number: 3\nEnter a number: 5\nEnter a number: done\nMaximum: 9.0\nMinimum: 2.0",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>리스트</span>"
    ]
  },
  {
    "objectID": "09-dictionaries.html",
    "href": "09-dictionaries.html",
    "title": "9  딕셔너리",
    "section": "",
    "text": "9.0.1 연습문제\nwords.txt 단어를 읽어서 명칭을 갖는 리스트에 키로 저장하는 프로그램을 작성하세요. 값이 무엇이든지 상관없습니다. 리스트에 문자열을 확인하는 가장 빠른 방법으로 명칭을 확인할 경우 names() 함수와 값을 확인할 경우 그냥 %in% 연산자와 조합하여 사용할 수 있습니다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>딕셔너리</span>"
    ]
  },
  {
    "objectID": "09-dictionaries.html#named-list-wordlist",
    "href": "09-dictionaries.html#named-list-wordlist",
    "title": "9  딕셔너리",
    "section": "\n9.1 계수기로 리스트",
    "text": "9.1 계수기로 리스트\n문자열이 주어진 상태에서, 각 문자가 얼마나 나타나는지를 센다고 가정합시다. 몇 가지 방법이 아래에 있습니다.\n\n26개 변수를 알파벳 문자 각각에 대해 생성한다. 그리고 나서 아마도 연쇄 조건문을 사용하여 문자열을 훑고 해당 계수기(counter)를 하나씩 증가한다.\n26개 요소를 가진 리스트를 생성한다. 리스트 안에 인덱스로 숫자를 사용해서 적당한 계수기(counter)를 증가한다.\n키(key)로 문자, 계수기(counter)로 해당 값(value)을 갖는 리스트를 생성한다. 처음 문자를 만나면, 딕셔너리에 항목으로 추가한다. 추가한 후에는 기존 항목 값을 증가한다.\n\n상기 3개 옵션은 동일한 연산을 수행하지만, 각각은 다른 방식으로 연산을 구현한다.\n구현(implementation)은 연산(computation)을 수행하는 방법이다. 어떤 구현 방법이 다른 것 보다 낫다. 다음에 명칭을 갖는 리스트로 구현한 코드가 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n계수기(counter) 혹은 빈도에 대한 통계 용어인 히스토그램(histogram)을 효과적으로 산출할 수 있다.\nfor 루프는 문자열을 훑는다. 매번 루프를 반복할 때마다 리스트에 문자 c가 없다면, 키 c와 초기값 1을 가진 새로운 항목을 생성한다. 문자 c가 이미 리스트에 존재한다면, d[[c]]를 증가한다.\n파이썬 딕셔너리에는 키와 디폴트(default) 값을 갖는 get 메쏘드가 있다. 딕셔너리에 키가 나타나면, get 메쏘드는 해당 값을 반환하고, 해당 값이 없으면 지정한 디폴트 값 0 을 반환한다. 예를 들어, counts.get('jan', 0)은 100을 반환하고, counts.get('tim', 0)은 0을 반환한다. 하지만, R에는 이와 같은 기능이 없기 때문에 get_value() 함수를 제작하여 구현한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n히스토그램은 문자 ’a’, 'b'는 1회, 'o'는 2회 등등 나타남을 보여준다. R은 태생에 통계를 근간으로 하기 때문에 빈도수를 구하거나 하는 문제를 아주 쉽고 간결하게 작성할 수 있다. 앞선 for, if 문을 명칭이 있는 리스트 자료구조를 이용해서 길게 작성했지만, table() 함수를 사용하면 훨씬 간결하게 동일한 효과를 낼 수 있다. 파이썬에 get 메쏘드를 사용해서 상기 히스토그램 루프를 좀더 간결하게 작성할 수 있다. get 메쏘드는 딕셔너리에 키가 존재하지 않는 경우를 자동적으로 다루기 때문에, if문을 없애 4줄을 1줄로 줄일 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n시간을 가지고서 잠시 if 문과 in 연산자를 사용한 루프와 적절한 전처리 과정을 거쳐 자료형을 맞추고 나서 table() 함수를 사용한 방식을 비교해 보세요. 동일한 연산을 수행하지만, 루프를 사용한 방식은 더 많은 코드를 필요로 한다. 파이썬에서도 계수기(counter) 루프를 단순화하려고 get 메쏘드를 사용하는 것은 파이썬에서 흔히 사용되는 일종의 ’숙어(idiom)’다. if 문과 in 연산자를 사용한 루프와 비교하여 get메쏘드를 사용한 루프를 비교해 보면 동일한 연산을 수행하지만, 뒷쪽 구현이 코드도 작고 더 간결하다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>딕셔너리</span>"
    ]
  },
  {
    "objectID": "09-dictionaries.html#named-list-file",
    "href": "09-dictionaries.html#named-list-file",
    "title": "9  딕셔너리",
    "section": "\n9.2 리스트와 파일",
    "text": "9.2 리스트와 파일\n딕셔너리의 흔한 사용법 중의 하나는 텍스트로 작성된 파일에 단어 빈도를 세는 것이다. http://shakespeare.mit.edu/Tragedy/romeoandjuliet/romeo_juliet.2.2.html 사이트 덕분에 로미오와 쥴리엣(Romeo and Juliet) 텍스트 파일에서 시작합시다.\n처음 연습으로 구두점이 없는 짧고 간략한 텍스트 버젼을 사용한다. 나중에 구두점이 포함된 전체 텍스트로 작업할 것이다.\nBut soft what light through yonder window breaks\nIt is the east and Juliet is the sun\nArise fair sun and kill the envious moon\nWho is already sick and pale with grief\n파일 라인을 읽고, 각 라인을 단어 리스트로 쪼개고, 루프를 돌려 사전을 이용하여 각 단어의 빈도수를 세는 R 프로그램을 작성한다.\n두 개의 for 루프를 사용한다. 외곽 루프는 파일 라인을 읽고, 내부 루프는 특정 라인의 단어 각각에 대해 반복한다. 하나의 루프는 외곽 루프가 되고, 또 다른 루프는 내부 루프가 되어서 중첩 루프(nested loops)라고 불리는 패턴 사례다.\n외곽 루프가 한번 반복을 할 때마다 내부 루프는 모든 반복을 수행하기 때문에 내부 루프는 “좀더 빨리” 반복을 수행하고 외곽 루프는 좀더 천천히 반복을 수행하는 것으로 생각할 수 있다.\n두 중첩 루프의 조합이 입력 파일의 모든 라인에 있는 모든 단어의 빈도를 계수(count)하는 것을 보증한다.\n중첩루프를 돌려 단어 빈도수를 계산하는 것도 가능하지만 R의 강력한 내장함수를 활용하여 간결하게 다음과 같이 작성할 수도 있다.\n\nromeo_text &lt;- \"But soft what light through yonder window breaks It is the east and Juliet is the sun Arise fair sun and kill the envious moon Who is already sick and pale with grief\"\n\nromeo_split &lt;- stringr::str_split(romeo_text, \" \")[[1]]\n\nromeo_freq &lt;- romeo_split %&gt;% \n  table() %&gt;% \n  unlist()\n\n프로그램을 실행하면, 정렬되지 않은 해쉬 순서로 모든 단어의 빈도수를 출력합니다. romeo.txt 파일은 www.py4inf.com/code/romeo.txt에서 다운로드 가능하다. 다운로드 받은 romeo.txt 파일을 로컬 파일에 저장한 후에 파일명을 읽어 실행하는 코드를 작성하여 실행하면 다음과 같은 결과를 확인할 수 있다.\n이를 위해서 앞서 작성한 코드를 다음과 같이 사용자 입력을 받아 처리할 수 있도록 count1.R 파일에 저장시킨다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n상기 코드를 쉘에서 Rscript 명령어로 실행하게 되면 romeo.txt 파일에 담긴 단어 빈도수를 계산할 수 있게 된다.\n\n$ Rscript --vanilla code/romeo_count.R\n\n파일명을 입력하세요? data/romeo.txt\n#&gt; already     and   Arise  breaks     But    east envious    fair   grief      is\n#&gt;       1       3       1       1       1       1       1       1       1       3\n#&gt;      It  Juliet    kill   light    moon    pale    sick    soft     sun     the\n#&gt;       1       1       1       1       1       1       1       1       2       3\n#&gt; through    what     Who  window    with  yonder\n#&gt;       1       1       1       1       1       1\n\n가장 높은 빈도 단어와 빈도수를 찾기 위해서 리스트를 훑는 것이 불편하다. 좀더 도움이 되는 출력결과를 만들려고 코드를 바꿔보자.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>딕셔너리</span>"
    ]
  },
  {
    "objectID": "09-dictionaries.html#named-list-loop",
    "href": "09-dictionaries.html#named-list-loop",
    "title": "9  딕셔너리",
    "section": "\n9.3 반복과 리스트",
    "text": "9.3 반복과 리스트\nfor문에 순서(sequence)로서 리스트를 사용한다면, 리스트 키를 훑는다. 루프는 각 키와 해당 값을 출력한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n이 패턴을 사용해서 앞서 기술한 다양한 루프 숙어를 구현한다. 예를 들어, 리스트에서 10 보다 큰 값을 가진 항목을 모두 찾고자 한다면, 다음과 같이 코드를 작성한다.\nfor 루프는 딕셔너리 키(keys)를 반복한다. 그래서, 인덱스 연산자를 사용해서 각 키에 상응하는 값(value)을 가져와야 한다. 출력값에서 10 이상 값만 가진 항목만 볼 수 있다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n알파벳 순으로 키를 출력하고자 한다면, 리스트 객체에서 이름을 따로 추출해서 알파벳순서로 정렬한다. 그리고 이를 리스트 객체에 반영하여 정렬된 명칭이 있는 리스트를 준비한다. 아래와 같이 정렬된 순서로 키/값 페어(key/value pair)를 출력한다. 파이썬 dict_keys 객체는 sort() 메쏘드가 지원되지 않아서 list() 함수를 사용해서 리스트로 변환한 후 정렬시킨다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n첫 명칭이 있는 리스트는 정렬되지 않은 키 리스트였다면, for 루프로 정렬된 키/값 페어(key/value pair)를 확인할 수 있다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>딕셔너리</span>"
    ]
  },
  {
    "objectID": "09-dictionaries.html#named-list-advanced",
    "href": "09-dictionaries.html#named-list-advanced",
    "title": "9  딕셔너리",
    "section": "\n9.4 고급 텍스트 파싱",
    "text": "9.4 고급 텍스트 파싱\nromeo.txt 파일을 사용한 상기 예제에서, 수작업으로 모든 구두점을 제거해서 가능한 단순하게 만들었다. 실제 텍스트는 아래 보여지는 것처럼 많은 구두점이 있다.\nBut, soft! what light through yonder window breaks?\nIt is the east, and Juliet is the sun.\nArise, fair sun, and kill the envious moon,\nWho is already sick and pale with grief,\nR stringr 패키지 str_split() 함수는 공백을 찾고 공백으로 구분되는 토큰으로 단어를 처리하기 때문에, “soft!” 와 “soft”는 다른 단어로 처리되고 각 단어에 대해서 별도 딕셔너리 항목을 생성한다.\n파일에 대문자가 있어서, “who”와 “Who”를 다른 단어, 다른 빈도수를 가진 것으로 처리한다.\nstringr 패키지 str_to_lower, str_squish, str_replace_all, 문자열 함수를 사용해서 상기 문제를 해결할 수 있다. str_replace_all 함수가 가장 적합하다. str_replace_all 함수에 대한 문서가 다음에 있다.\n\nstr_replace_all(string, pattern, replacement)\n\npattern 매개변수를 사용해서 모든 구두점을 삭제할 수 있다. “구두점”으로 간주되는 문자 리스트는 [[:punct:]]에 정의되어 있어 별도 ~!@#$%^&*(){}_+:\\\"&lt;&gt;?,./;'[]-=와 같이 지정하지 않아도 된다. replacement에는 삭제 혹은 교체 문자를 지정하면 된다.\n프로그램을 다음과 같은 수정을 한다.\n\n\nR\n파이썬\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nstr_replace_all 함수를 사용해서 모든 구두점을 제거했고, str_to_lower 함수를 사용해서 라인을 소문자로 수정했다. 나머지 프로그램은 변경된 것이 없다.\n상기 프로그램을 실행한 출력결과는 다음과 같다.\n\n$ Rscript.exe code/romeo_parsing.R\n\n파일명을 입력하세요? romeo.txt\n#&gt; already     and   Arise  breaks     But    east envious    fair   grief      is\n#&gt;       1       3       1       1       1       1       1       1       1       3\n#&gt;      It  Juliet    kill   light    moon    pale    sick    soft     sun     the\n#&gt;       1       1       1       1       1       1       1       1       2       3\n#&gt; through    what     Who  window    with  yonder\n#&gt;       1       1       1       1       1       1\n\n출력결과는 여전히 다루기 힘들어 보입니다. R 프로그래밍을 통해 정확히 찾고자는 하는 것을 찾았으나 R 튜플(tuples)(다양한 자료형을 갖는 리스트)에 대해서 학습할 필요성을 느껴진다. 튜플을 학습할 때, 다시 이 예제를 살펴볼 것이다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>딕셔너리</span>"
    ]
  },
  {
    "objectID": "09-dictionaries.html#r-dicionaries-debugging",
    "href": "09-dictionaries.html#r-dicionaries-debugging",
    "title": "9  딕셔너리",
    "section": "\n9.5 디버깅",
    "text": "9.5 디버깅\n점점 더 큰 데이터로 작업함에 따라, 수작업으로 데이터를 확인하거나 출력을 통해서 디버깅을 하는 것이 어려울 수 있다. 큰 데이터를 디버깅하는 몇가지 방법이 있다.\n\n\n입력값을 줄여라: Scale down the input\n가능하면, 데이터 크기를 줄여라. 예를 들어, 프로그램이 텍스트 파일을 읽는다면, 첫 10줄로 시작하거나, 찾을 수 있는 작은 예제로 시작하라. 데이터 파일을 편집하거나, 프로그램을 수정해서 첫 n 라인만 읽도록 프로그램을 변경하라.\n오류가 있다면, n을 줄여서 오류를 재현하는 가장 작은 값으로 만들어라. 그리고 나서, 오류를 찾고 수정해 나감에 따라 점진적으로 늘려나가라.\n\n\n요약값과 자료형을 확인하라: Check summaries and types\n전체 데이터를 출력하고 검증하는 대신에 데이터를 요약하여 출력하는 것을 생각하라: 예를 들어, 딕셔너리 항목의 숫자 혹은 리스트 숫자의 총계\n실행 오류(runtime errors)의 일반적인 원인은 올바른 자료형(right type)이 아니기 때문이다. 이런 종류의 오류를 디버깅하기 위해서, 종종 값의 자료형을 출력하는 것으로 충분하다.\n\n\n자가 진단 작성: Write self-checks\n종종 오류를 자동적으로 검출하는 코드를 작성한다. 예를 들어, 리스트 숫자의 평균을 계산한다면, 결과값은 리스트의 가장 큰 값보다 클 수 없고, 가장 작은 값보다 작을 수 없다는 것을 확인할 수 있다. “완전히 비상식적인” 결과를 탐지하기 때문에 “건전성 검사(sanity check)”라고 부른다.\n또 다른 검사법은 두가지 다른 연산의 결과를 비교해서 일치하는지 살펴보는 것이다. “일치성 검사(consistency check)”라고 부른다.\n\n\n고급 출력: Pretty print the output\n디버깅 출력결과를 서식화하는 것은 오류 발견을 용이하게 한다.\n\n\n다시 한번 강조하면, 발판(scaffolding)을 만드는데 들인 시간이 디버깅에 소비되는 시간을 줄일 수 있다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>딕셔너리</span>"
    ]
  },
  {
    "objectID": "09-dictionaries.html#r-dictionaries-terminology",
    "href": "09-dictionaries.html#r-dictionaries-terminology",
    "title": "9  딕셔너리",
    "section": "\n9.6 용어정의",
    "text": "9.6 용어정의\n\n\n명칭있는 리스트/딕셔너리(dictionary): 키(key)에서 해당 값으로 매핑(mapping)\n\n해쉬테이블(hashtable): 파이썬 딕셔너리를 구현하기 위해 사용된 알고리즘\n\n해쉬 함수(hash function): 키에 대한 위치를 계산하기 위해서 해쉬테이블에서 사용되는 함수\n\n히스토그램(histogram): 계수기(counter) 집합.\n\n구현(implementation): 연산(computation)을 수행하는 방법\n\n항목(item): 키-값 페어(key-value pair)에 대한 또 다른 이름.\n\n키(key): 키-값 페어(key-value pair)의 첫번째 부분으로 딕셔너리에 나타나는 객체.\n\n키-값 페어(key-value pair): 키에서 값으로 매핑 표현.\n\n룩업(lookup): 키를 가지고 해당 값을 찾는 딕셔너리 연산.\n\n중첩 루프(nested loops): 루프 “내부”에 하나 혹은 그 이상의 루프가 있음. 외곽 루프가 1회 실행될 때, 내부 루프는 전체 반복을 완료함.\n\n값(value):키-값 페어(key-value pair)의 두번째 부분으로 딕셔너리에 나타나는 객체. 앞에서 사용한 단어 “값(value)” 보다 더 구체적이다.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>딕셔너리</span>"
    ]
  },
  {
    "objectID": "09-dictionaries.html#r-dictionaries-ex",
    "href": "09-dictionaries.html#r-dictionaries-ex",
    "title": "9  딕셔너리",
    "section": "연습문제",
    "text": "연습문제\n\n커밋(commit)이 무슨 요일에 수행되었는지에 따라 전자우편 메세지를 구분하는 프로그램을 작성하세요. “From”으로 시작하는 라인을 찾고, 3번째 단어를 찾아서 요일별 횟수를 계수(count)하여 저장하세요. 프로그램 끝에 딕셔너리 내용을 출력하세요. (순서는 문제가 되지 않습니다.)\n\n라인 예시:\nFrom stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008\n\n실행 예시:\nRscript --vanilla dow.R\n파일명을 입력하세요: mbox-short.txt\n{'Fri': 20, 'Thu': 6, 'Sat': 1}\n\n전자우편 로그(log)를 읽고, 히스토그램을 생성하는 프로그램을 작성하세요. 딕셔너리를 사용해서 전자우편 주소별로 얼마나 많은 전자우편이 왔는지를 계수(count)하고 딕셔너리를 출력합니다.\n\n파일명을 입력하세요: mbox-short.txt\n{'gopal.ramasammycook@gmail.com': 1, 'louis@media.berkeley.edu': 3, \n'cwen@iupui.edu': 5, 'antranig@caret.cam.ac.uk': 1, \n'rjlowe@iupui.edu': 2, 'gsilver@umich.edu': 3, \n'david.horwitz@uct.ac.za': 4, 'wagnermr@iupui.edu': 1, \n'zqian@umich.edu': 4, 'stephen.marquard@uct.ac.za': 2, \n'ray@media.berkeley.edu': 1}\n\n상기 프로그램에 누가 가장 많은 전자우편 메시지를 가졌는지 알아내는 코드를 추가하세요.\n\n결국, 모든 데이터를 읽고, 딕셔너리를 생성한다. 최대 루프를 사용해서 딕셔너리를 훑어서 누가 가장 많은 전자우편 메시지를 갖는지, 그리고 그 사람이 얼마나 많은 메시지를 갖는지 출력한다.\n파일명을 입력하세요: mbox-short.txt\ncwen@iupui.edu 5\n\n파일명을 입력하세요: mbox.txt\nzqian@umich.edu 195\n\n다음 프로그램은 주소 대신에 도메인 이름을 기록한다. 누가 메일을 보냈는지 대신(즉, 전체 전자우편 주소) 메시지가 어디에서부터 왔는지 출처를 기록한다. 프로그램 마지막에 딕셔너리 내용을 출력한다.\n\nRscript --vanilla schoolcount.R\n파일명을 입력하세요: mbox-short.txt\n{'media.berkeley.edu': 4, 'uct.ac.za': 6, 'umich.edu': 7, \n'gmail.com': 1, 'caret.cam.ac.uk': 1, 'iupui.edu': 8}",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>딕셔너리</span>"
    ]
  },
  {
    "objectID": "A-dataframe.html",
    "href": "A-dataframe.html",
    "title": "10  데이터프레임",
    "section": "",
    "text": "10.1 측정 변수의 구분\n분석 과정에서 현실 세계의 다양한 사건과 현상들을 관찰하고, 이후 측정 단계를 거쳐 수치나 범주 형태로 자료, 즉 데이터로 생산된다. 복잡한 실제 현상들을 체계적이고 구조화된 데이터로 전환하는 과정으로, 이러한 데이터 분석과정에서 컴퓨터 활용이 중요하다. 프로그래밍 언어들마다 데이터를 처리하고 관리하기 위한 고유한 자료구조를 가지고 있다. 측정단계에서 생산된 다양한 데이터를 담아낼 수 있는 자료구조가 데이터프레임이다.\n자료의 고유 특성을 수치화하는 측정 척도로 명목형, 순서형, 구간형, 비율형 4가지 주요 유형으로 분류된다. 측정 척도는 데이터 유형별로 적합한 유의미한 통계량을 결정하는 데 중요한 역할을 한다. (Stevens 1946) (Wiener 1921) (이경화 2020)",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>데이터프레임</span>"
    ]
  },
  {
    "objectID": "A-dataframe.html#data-type-for-data-science",
    "href": "A-dataframe.html#data-type-for-data-science",
    "title": "10  데이터프레임",
    "section": "",
    "text": "명목척도(Nominal): 단순히 개체 특성 분류를 위해 숫자나 부호를 부여한 척도로 숫자는 의미가 없음.\n\n남자: M, 여자: F 혹은 월: 1, 화: 2, … 일:7 혹은 갑:1, 을:2, 병:3, …\n\n\n서열척도(Ordinal): 명목척도에 부가적으로 “순서(서열)” 정보가 추가된 척도로 측정대상 간 차이는 정보가 없음.\n\n군대계급: 사병, 장교, 장군 등\n소득계층: 1분위, 2분위, 3분위 등\n\n\n등간척도(Interval): 서열척도에 부가적으로 “등간격” 정보가 추가된 척도\n\n온도에서 0도는 상대적인 위치로 수학에서 다루는 개념과 차이가 있음.\n온도가 서울 10도, 제주 20도는 제주가 서울보다 온도가 2배 높지 않음.\n온도, 시력, IQ 지수, 물가지수 등\n\n\n비율척도(Ratio): 구간척도에 “비율” 비교특성이 추가된 척도로 “비율 등간격” 특성이 포함됨.\n\n키나 몸무게에서 0은 수학적 의미 0을 의미함.\n100m는 200m의 절반 의미.\n절대 ’0’을 가지고 사칙연산이 가능함.\n연령, 월소득, TV 시청률 등.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>데이터프레임</span>"
    ]
  },
  {
    "objectID": "A-dataframe.html#data-type-basics",
    "href": "A-dataframe.html#data-type-basics",
    "title": "10  데이터프레임",
    "section": "\n10.2 기본 자료구조",
    "text": "10.2 기본 자료구조\n측정은 한번만 이뤄지는 것이 아닌 여러 관측점을 통해 데이터로 표현되기 때문에 이를 담을 수 있는 벡터 자료구조가 필요하다. R 언어에서 벡터 자료형을 주로 원자 벡터와 리스트로 분류한다. 원자 벡터는 논리형(logical), 정수형(integer), 부동 소수점형(double), 문자형(character), 복소수형(complex), raw 등 여섯 가지 자료형을 포함하며, 이중 논리형, 정수형, 부동 소수점형, 문자형이 주로 사용된다. 리스트는 다양한 자료형을 포함할 수 있는 재귀 벡터(recursive vector)로, 복잡한 데이터 구조를 효과적으로 다루는데 적합하다.(Wickham, Çetinkaya-Rundel, 와/과 Grolemund 2023)\nR에서 자료형을 type, mode, storage mode로 다르게 표현하는데 데이터 객체의 다양한 측면을 표현하기 위함이다. 자료형(type)은 객체의 내부적인 구현 유형을 표현한다. 예를 들어, 정수형, 부동 소수점형, 문자형을 들 수 있다. 모드(mode)는 객체가 프로그래밍적으로 어떻게 다뤄지는지를 나타내며, type보다 더 일반적인 개념으로 사용자 관점에서 데이터를 어떻게 사용할 수 있는지를 나타낸다. 예를 들어, 자료형이 정수형 혹은 부동 소수점형은 사용자 모드에서 숫자형(numeric)이 훨씬 수월하다. 저장 모드(storage mode)는 객체가 저장되는 방식을 나타내며, 특히 벡터의 경우에는 벡터의 원소 유형을 의미한다. 예를 들어, 정수 벡터 storage mode는 integer가 된다.\n\n자료형, 사용자 모드, 저장 모드 비교표\n\n자료형(Type)\n사용자 모드(Mode)\n저장모드(Storage Mode)\n\n\n\nlogical\nlogical\nlogical\n\n\ninteger\nnumeric\ninteger\n\n\ndouble\nnumeric\ndouble\n\n\ncomplex\ncomplex\ncomplex\n\n\ncharacter\ncharacter\ncharacter\n\n\nraw\nraw\nraw\n\n\n\n따라서, 원자벡터는 동질적(homogeneous)이고, 리스트는 상대적으로 이질적(heterogeneous)이다. 모든 벡터는 두가지 성질(Property)을 갖는데, 자료형과 길이로 이를 확인하는데 typeof()와 length() 함수를 사용해서 확인한다.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n모드 함수는 객체의 모드를 반환하고, 클래스 함수는 클래스를 반환한다. 가장 흔하게 만나는 객체 모드는 숫자, 문자, 논리 모드다. 리스트나 데이터프레임과 같이 다양한 모드를 한 객체 안에 포함하는 경우도 있다.\n리스트(List)는 데이터를 저장하는 유연하며 강력한 방법으로 과거 리스트 자료구조를 처리하는 *apply 함수와 함께 가장 빈번하게 사용되는 자료형이다. 현재는 purrr 팩키지 map_*()함수를 사용한다. 리스트형 자료 a를 세가지 숫자형, 문자형, 숫자형과 리스트 총 네가지 자료형을 포함하게 작성한다. map_chr() 함수를 이용하여 mode와 class 인자를 넣어줌으로써, 각각 자료형의 모드와 자료형을 확인한다.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n리스트에서 원소를 뽑아내는 의미를 살펴보자. 시각적으로 표현하면 다음과 같다. 리스트는 이질적인 객체를 담을 수 있다는 점에서 동질적인 것만 담을 수 있어 한계가 있는 원자벡터보다 쓰임새가 다르다. 회귀분석 결과 산출되는 lm 결과값은 다양한 정보를 담을 수 있는 리스트로 표현된다.\n\n리스트 생성 : list()\n\n하위 리스트 추출 : [\n\n리스트에 담긴 원소값 추출 : [[, $ → 연산작업을 통해 위계를 갖는 구조를 제거한다.\n\n\n\n리스트 원소 1개\n리스트 원소 2개\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n그림 10.1: 리스트에서 하위 리스트 뽑아내기 - 출처: 해들리 위컴\n\n\n범주형 자료를 R에 저장하기 위해서 요인(Factor) 클래스를 사용하며 요인 클래스를 사용하여 자료를 저장할 경우 저장공간을 절약할 수 있다. 요인은 내부적으로 숫자(value)로 저장을 하고 레이블(value label)을 사용하여 표시하여 저장공간을 절약한다.\n\n\n\n\n\n\n자료형 확인\n\n\n\n각각의 데이터 형식에 맞는지를 다양한 테스트 함수(is.)를 이용하여 데이터 형식을 확인할 수 있다.\n\n\nis.list : 리스트 형식인 확인\n\nis.factor : 팩터 형식인지 확인\n\nis.numeric : 숫자형인지 확인\n\nis.data.frame : 데이터 프레임형인지 확인\n\nis.character : 문자형인지 확인",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>데이터프레임</span>"
    ]
  },
  {
    "objectID": "A-dataframe.html#extended-data-type",
    "href": "A-dataframe.html#extended-data-type",
    "title": "10  데이터프레임",
    "section": "\n10.3 자료형 확장",
    "text": "10.3 자료형 확장\n요인, 텍스트, 날짜와 시간도 중요한 R에서 자주 사용되는 중요한 데이터 자료형으로 별도로 다뤄진다. 이를 위해서 stringr, lubridate, forcats 팩키지를 사용해서 데이터 정제작업은 물론 기계학습 예측모형 개발에 활용한다.\n\n\n데이터 과학 중요 자료구조\n\n\n\nR 자료형\n자료형\n예제\n\n\n\nlogical\n부울\n부도여부(Y/N), 남여\n\n\ninteger\n정수\n코로나19 감염자수\n\n\nfactor\n범주\n정당, 색상\n\n\nnumeric\n실수\n키, 몸무게, 주가, 환율\n\n\ncharacter\n텍스트\n주소, 이름, 책제목\n\n\nDate\n날짜\n생일, 투표일",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>데이터프레임</span>"
    ]
  },
  {
    "objectID": "A-dataframe.html#data-type-factor",
    "href": "A-dataframe.html#data-type-factor",
    "title": "10  데이터프레임",
    "section": "\n10.4 범주 자료형",
    "text": "10.4 범주 자료형\n명목척도 범주형, 서열척도 범주 자료형을 생성하는 경우 주의를 기울여야 한다. factor 함수를 사용해서 요인형 자료형을 생성하는데, 내부적으로 저장공간을 효율적으로 사용하고 속도를 빠르게 하는데 유용한다. 순서를 갖는 범주형의 경우 factor 함수 내부에 levels 인자를 넣어 정의하면 순서 정보가 유지된다.\n\n# 범주형 - 명목척도\nanimals_vector &lt;- c(\"Elephant\", \"Giraffe\", \"Donkey\", \"Horse\")\nfactor_animals_vector &lt;- factor(animals_vector)\nfactor_animals_vector\n#&gt; [1] Elephant Giraffe  Donkey   Horse   \n#&gt; Levels: Donkey Elephant Giraffe Horse\n\n# 범주형 - 서열 척도\ntemperature_vector &lt;- c(\"High\", \"Low\", \"High\",\"Low\", \"Medium\")\nfactor_temperature_vector &lt;- factor(temperature_vector, order = TRUE, levels = c(\"Low\", \"Medium\", \"High\"))\nfactor_temperature_vector\n#&gt; [1] High   Low    High   Low    Medium\n#&gt; Levels: Low &lt; Medium &lt; High\n\n범주형 자료의 경우 범주가 갖는 척도 가독성을 높이기 위해 levels() 함수를 사용하기도 한다.\n\n# \"M\", \"F\" 수준\nsurvey_vector &lt;- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector &lt;- factor(survey_vector)\nlevels(factor_survey_vector)\n#&gt; [1] \"F\" \"M\"\n\n# \"Female\", \"Male\" 로 변환\nlevels(factor_survey_vector) &lt;- c(\"Female\", \"Male\")\nlevels(factor_survey_vector)\n#&gt; [1] \"Female\" \"Male\"\n\n통계 처리와 자료분석에 문자형 벡터와 요인 범주형 벡터를 다른 의미를 갖는 점에 유의한다. 동일한 summary() 함수지만 입력 자료형에 따라 R은 적절한 후속 작업을 자동 수행한다.\n\n# 문자형 벡터와 요인 벡터\nsurvey_vector &lt;- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector &lt;- factor(survey_vector)\n\n# 문자형 벡터 요약\nsummary(survey_vector)\n#&gt;    Length     Class      Mode \n#&gt;         5 character character\n\n# 요인 벡터 요약\nsummary(factor_survey_vector)\n#&gt; F M \n#&gt; 2 3",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>데이터프레임</span>"
    ]
  },
  {
    "objectID": "A-dataframe.html#data-type-dataframe-in-r",
    "href": "A-dataframe.html#data-type-dataframe-in-r",
    "title": "10  데이터프레임",
    "section": "\n10.5 데이터프레임",
    "text": "10.5 데이터프레임\nR 은 6가지 기본 벡터로 자료를 저장하지만, 이외에 행렬(matrix), 데이터프레임(data.frame), 리스트(list) 자료구조가 있다. 하지만, 자료분석을 위해서 데이터를 데이터셋의 형태로 구성을 해야한다. 데이터셋이 중요한 이유는 자료를 분석하기 위해서 다양한 형태의 개별 자료를 통합적으로 분석하기 위해서다. 이를 위해서 리스트 자료구조로 일단 모으게 된다. 예를 들어 개인 신용분석을 위해서는 개인의 소득, 부채, 성별, 학력 등등의 숫자형, 문자형, 요인(Factor)형 등의 자료를 데이터셋에 담아야 한다. 특히 변수와-관측값 (Variable-Observation) 형식의 자료를 분석하기 위해서는 데이터프레임(data.frame)을 사용한다. 데이터프레임은 모든 변수에 대해서 관측값이 같은 길이를 갖도록 만들어 놓은 것이다.\n\n\n리스트와 데이터프레임\n\n데이터프레임은 data.frame() 함수를 사용해서 생성한다. R 객체 구조 파악을 위해서는 간단한 자료의 경우 데이터 형식을 확인할 수 있는 1–2줄 정도의 간단한 스크립트와 명령어를 통해서 확인이 가능하지만, 복잡한 데이터의 구조를 파악하기 위해서는 summary 함수와 str 함수를 통해서 확인해야 한다.\n\n# 벡터를 정의한다.\nname &lt;- c(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\ntype &lt;- c(\"Terrestrial planet\", \"Terrestrial planet\", \"Terrestrial planet\", \n          \"Terrestrial planet\", \"Gas giant\", \"Gas giant\", \"Gas giant\", \"Gas giant\")\ndiameter &lt;- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)\nrotation &lt;- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)\nrings &lt;- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)\n\n# 벡터를 합쳐서 데이터프레임을 생성\nplanets_df &lt;-data.frame(name, type, diameter, rotation, rings)",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>데이터프레임</span>"
    ]
  },
  {
    "objectID": "A-dataframe.html#data-type-vector",
    "href": "A-dataframe.html#data-type-vector",
    "title": "10  데이터프레임",
    "section": "\n10.6 벡터, 행렬, 배열, 데이터프레임",
    "text": "10.6 벡터, 행렬, 배열, 데이터프레임\n가장 많이 사용되는 논리형, 문자형, 숫자형을 통해 자료분석 및 모형개발을 진행하게 되고, 경우에 따라서 동일한 자료형을 모은 경우 이를 행렬로 표현할 수 있고, 행렬을 모아 RGB 시각 데이터를 위한 배열(Array)로 표현한다. 데이터프레임은 서로 다른 자료형을 모아 넣은 것이다.\n\n\nR 자료구조 - 벡터, 행렬, 배열, 데이터프레임",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>데이터프레임</span>"
    ]
  },
  {
    "objectID": "A-dataframe.html#is-na-null",
    "href": "A-dataframe.html#is-na-null",
    "title": "10  데이터프레임",
    "section": "\n10.7 NULL과 NA\n",
    "text": "10.7 NULL과 NA\n\n결측되었다는 없다는 것을 표시하는 방법이 두가지 필요하다. 하나는 벡터가 없다는 NULL이고, 벡터 내부에 값이 결측되었다는 NA 다. dataframe$variable &lt;- NULL 명령문을 사용하면 데이터프레임(dataframe)에 변수(variable)를 날려보내는 효과가 있다. 예를 들어 책장이 아예 없다는 의미(NULL)와 책장에 책이 없다(NA)는 다른 개념을 지칭하고 쓰임새가 다르다.\n\n\nNULL\n\n# NULL 자료형과 길이\ntypeof(NULL)\n#&gt; [1] \"NULL\"\nlength(NULL)\n#&gt; [1] 0\n\n\n\nNA\n\n# NA 자료형과 길이\ntypeof(NA)\n#&gt; [1] \"logical\"\nlength(NA)\n#&gt; [1] 1\n\n\n\nNA의 중요한 특징은 전염된다는 것이다. 즉, NA에 연산을 가하면 연산결과는 무조건 NA가 된다. NA가 7보다 큰지, 7을 더하고 빼고, 부울 연산을 하든 NA와 연산결과는 무조건 NA가 된다.\n\nNA + 7\n#&gt; [1] NA\nNA / 7\n#&gt; [1] NA\nNA &gt; 7\n#&gt; [1] NA\n7 == NA\n#&gt; [1] NA\nNA == NA\n#&gt; [1] NA",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>데이터프레임</span>"
    ]
  },
  {
    "objectID": "A-dataframe.html#fp-list-columns",
    "href": "A-dataframe.html#fp-list-columns",
    "title": "10  데이터프레임",
    "section": "\n10.8 리스트 칼럼",
    "text": "10.8 리스트 칼럼\n레고를 통해 살펴본 R 자료구조는 계산가능한 원자 자료형(논리형, 숫자형, 요인형)으로 크게 볼 수 있다. R에서 정수형과 부동소수점은 그다지 크게 구분을 하지 않는다. 동일 길이를 갖는 벡터를 쭉 붙여넣으면 자료구조형이 데이터프레임으로 되고, 길이가 갖지 않는 벡터를 한 곳에 모아넣은 자료구조가 리스트다. 1 2\n데이터프레임이 굳이 모두 원자벡터만을 갖출 필요는 없다. 리스트를 데이터프레임 내부에 갖는 것도 데이터프레임인데 굳이 구별하자면 티블(tibble)이고, 이런 자료구조를 리스트-칼럼(list-column)이라고 부른다.\n\n\n리스트 칼럼\n\n리스트-칼럼 자료구조가 빈번히 마주하는 경우가 흔한데… 대표적으로 다음 사례를 들 수 있다.\n\n정규표현식을 통한 텍스트 문자열 처리\n웹 API로 추출된 JSON, XML 데이터\n분할-적용-병합(Split-Apply-Combine) 전략\n\n데이터프레임이 티블(tibble) 형태로 되어 있으면 다음 작업을 나름 수월하게 추진할 수 있다.\n\n\n들여다보기(Inspect): 데이터프레임에 무엇이 들었는지 확인.\n\n인덱싱(Indexing): 명칭 혹은 위치를 확인해서 필요한 원소를 추출.\n\n연산(Compute): 리스트-칼럼에 연산 작업을 수행해서 또다른 벡터나 리스트-칼럼을 생성.\n\n간략화(Simplify): 리스트-칼럼을 익숙한 데이터프레임으로 변환.\n\n\n\n\n\nStevens, Stanley Smith. 1946. “On the theory of scales of measurement”. Science 103 (2684): 677–80.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, 와/과 Garrett Grolemund. 2023. R for data science. \" O’Reilly Media, Inc.\".\n\n\nWiener, Norbert. 1921. “A new theory of measurement: a study in the logic of mathematics”. Proceedings of the London Mathematical Society 2 (1): 181–205.\n\n\n이경화. 2020. 고등학교 실용통계. 통계청 통계교육원.",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>데이터프레임</span>"
    ]
  },
  {
    "objectID": "A-dataframe.html#footnotes",
    "href": "A-dataframe.html#footnotes",
    "title": "10  데이터프레임",
    "section": "",
    "text": "List columns↩︎\nPhotos that depict R data structures and operations via Lego↩︎",
    "crumbs": [
      "자료구조",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>데이터프레임</span>"
    ]
  },
  {
    "objectID": "git-basics.html",
    "href": "git-basics.html",
    "title": "11  자동화된 버젼제어",
    "section": "",
    "text": "누군가 무엇을 했는지, 언제 했는지를 추적하기 위해서, 버젼제어를 어떻게 사용할 수 있는지 탐색해보자. 다른 사람과 협업을 하지 않더라도, 자동화된 버젼제어가 다음 상황보다 훨씬 더 낫다:\n\n\n\nPiled Higher and Deeper by Jorge Cham, http://www.phdcomics.com/comics/archive_print.php?comicid=1531\n\n\n이전에 상기와 같은 상황에 처했었다: 같은 문서에 대해서 거의 동일한 다수 버젼을 관리하는 것은 우스워 보인다. 일부 워드프로세서가 이런 상황을 좀더 잘 처리하도록 하는 기능이 있다. 예를 들어, 마이크로소프트 워드 “변경사항 추적(Track Changes)” 혹은 구글 닥스(Google Docs)의 버젼 이력이 그것이다.\n버젼제어 시슽메은 문서의 기본 버젼으로 시작하고 나서, 각 단계마다 변경한 이력을 저장한다. 테이프로 생각하면 쉽다: 테이프를 되감으면, 문서 시작한 지점으로 가고, 각 변경사항을 다시 돌리면 가장 최근 버젼이 된다.\n\n\n\n\n\n\n그림 11.1: 변경사항이 순차적으로 저장된다.\n\n\n\n변경사항을 문서 그자체로부터 떨어진 것으로 생각하면, 동일 기반 문서에 다른 변경사항을 돌려보기 처럼 “되감기(playback)”하고, 다른 문서 버젼을 관리하는 것으로 간주할 수 있다. 예를 들어, 사용자 두 명이 같은 문서에 독립적인 변경 작업을 수행할 수 있다.\n\n\n\n다른 버전이 저장될 수도 있다.\n\n\n만약 충돌나지 않으면, 심지어 동일 문서에서 두가지 변경사항을 작업할 수도 있다.\n\n\n\n\n\n\n그림 11.2: 버전 다수가 병합될 수도 있다.\n\n\n\n버젼제어 시스템은 사용자를 대신해서 변경사항을 기록하고, 파일 버젼을 생성하고 파일병합하는데 유용한 도구다. 버젼제어 시스템은 어떤 변경사항을 다음 버젼에 반영(커밋(commit))으로 불림)할지 결정하는 할 수 있게 하고, 커밋에 관한 유용한 메타정보를 보관한다. 특정 프로젝트와 프로젝트 메타정보에 대한 완전한 커밋이력은 저장소(repository)에 보관된다. 저장소는 협업하는 여러 동료 컴퓨터에 걸쳐 동기화될 수 있다.\n\n\n\n\n\n\n버젼제어 시스템의 오랜 역사\n\n\n\n자동화된 버젼제어 시스템이 새로운 것은 전혀 아니다. 1980년부터 RCS, CVS, Subversion 같은 도구가 존재했고, 많은 대기업에서 사용되고 있다. 하지만, 다양한 기능의 한계로 인해서 이들 중 다수는 이제 레거시 시스템(legacy system)으로 간주된다. 최근에 등장한 도구 Git과 Mercurial은 분산(distributed) 기능을 제공한다. 저장소를 굳이 중앙 서버에 둘 필요가 없다는 의미다. 이러한 최신 시스템에는 동시간에 동일한 파일에 다수 저작자가 작업하는 것을 가능하게 하는 강력한 병합(merge) 도구도 내장하고 있다.\n\n\n\n\n\n\n\n\n논문 작성\n\n\n\n\n논문을 작성하면서 정말 멋진 문단을 초안을 작성했지만, 나중에 망치게 되었다고 상상해 보자. 어떻게 정말 멋진 맺음말 버전이 포함된 문서를 되살릴 수 있을까? 가능하기도 할까?\n공저자가 5명이라고 상상해보자. 공저자가 논문에 반영한 변경사항과 코멘트를 어떻게 관리할 수 있을까? 마이크로소프트 워드나 리브레오피스 Writer를 사용하는 경우, Track Changes 옵션을 사용해서 변경한 것을 반영하게 되면 어떻게 될까? 이러한 변경사항에 대한 이력은 갖고 있는가?",
    "crumbs": [
      "버전제어와 협업",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>자동화된 버젼제어</span>"
    ]
  },
  {
    "objectID": "git-setup.html",
    "href": "git-setup.html",
    "title": "12  Git 구축 및 설정",
    "section": "",
    "text": "처음 Git를 새로운 컴퓨터에 사용할 때, 몇가지 설정이 필요하다. 다음에 Git을 시작할 때, 설정해야 되는 몇가지 사례가 나와있다:\n\n이름과 전자우편 주소\n선호하는 텍스트 편집기 선정\n전역(즉, 모든 프로젝트)으로 이런 설정을 할지 여부\n\n명령라인에서 Git 명령어는 다음과 같이 작성된다; git verb options, 즉, git 동사 선택옵션. verb 가 실제로 수행하고자 하는 명령어가 되고, options는 verb에 필요할지도 모르는 추가 선택옵션 정보가 된다. 다음에 Dracula가 새로 구입한 노트북에 환경설정하는 방법이 나와있다:\n$ git config --global user.name \"Vlad Dracula\"\n$ git config --global user.email \"vlad@tran.sylvan.ia\"\nDracula 대신에 본인 이름과 본인 전자우편 주소를 사용합니다. 사용자명과 전자우편 주소는 후속 Git 활동과 연관된다. 이것이 의미하는 바는 GitHub, BitBucket, GitLab, 혹은 Git 호스트 서버에 푸쉬하는 어떤 변경사항도 사용자명과 전자우편 주소를 담게되는 것을 의미한다.\n\n\n\n\n\n\n줄마침(Line Endings)\n\n\n\n다른 키보트 타이핑과 마찬가지로, 키보드로 Return를 치게 되면, 컴퓨터는 엔터값을 문자로 인코딩한다. 줄마침을 표현하기 위해서 운영체제마다 별도 문자를 사용한다. (개행 혹은 줄중단, 영어로 newline 혹은 line breaks를 들어봤을 수도 있다.) Git이 파일을 비교하는데 이러한 문자를 사용하기 때문에, 운영체제가 다른 컴퓨텅에서 파일을 편집할 때 예기치 않은 이슈가 발생될 수 있다. 이 문제는 금번 학습 범위를 넘어서는 것이지만, on this GitHub page 웹페이지에서 좀더 자세한 정보를 얻을 수 있다.\nGit에서 줄마침을 인식하고 인코딩하는 방식을 변경하려면, git config에 core.autocrlf 명령을 사용한다. 권장되는 설정은 다음과 같다:\n맥OS와 리눅스:\n$ git config --global core.autocrlf input\n윈도우:\n$ git config --global core.autocrlf true\n\n\n이번 학습에서, GitHub을 사용하게 되는데, 사용되는 전자우편주소는 GitHub 계정을 설정할 때 사용하는 것과 같은 것이 되어야 한다. 만약, 개인정보에 대해 걱정이 된다면, GitHub’s instructions for keeping your email address private을 참조한다. GitHub에서 사적인 개인 전자우편주소를 선택하기로 했다면, user.email에 동일한 전자우편주소를 사용한다. 즉, username을 GitHub의 설정된 것으로 바꿔놓아 username@users.noreply.github.com게 된다. 나중에 git config 명령어를 사용해서 전자우편 주소를 변경할 수 있다.\nDracula도 자신이 선호하는 텍스트 편집기를 설정해야 하는데, 다음 표를 참조한다:\n\n\n\n\n\n\n\n편집기\n환경설정 명령어\n\n\n\n\nAtom\n$ git config --global core.editor \"atom --wait\"\n\n\nnano\n$ git config --global core.editor \"nano -w\"\n\n\nBBEdit (Mac, with command line tools)\n$ git config --global core.editor \"bbedit -w\"\n\n\nSublime Text (Mac)\n$ git config --global core.editor \"/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl -n -w\"\n\n\nSublime Text (Win, 32-bit install)\n$ git config --global core.editor \"'c:/program files (x86)/sublime text 3/sublime_text.exe' -w\"\n\n\nSublime Text (Win, 64-bit install)\n$ git config --global core.editor \"'c:/program files/sublime text 3/sublime_text.exe' -w\"\n\n\nNotepad++ (Win, 32-bit install)\n$ git config --global core.editor \"'c:/program files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"\n\n\nNotepad++ (Win, 64-bit install)\n$ git config --global core.editor \"'c:/program files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"\n\n\nKate (Linux)\n$ git config --global core.editor \"kate\"\n\n\nGedit (Linux)\n$ git config --global core.editor \"gedit --wait --new-window\"\n\n\nScratch (Linux)\n$ git config --global core.editor \"scratch-text-editor\"\n\n\nEmacs\n$ git config --global core.editor \"emacs\"\n\n\nVim\n$ git config --global core.editor \"vim\"\n\n\nVS Code\n$ git config –global core.editor “code –wait”\n\n\n\n원할 때마다 Git에 사용할 텍스트 편집기 환경설정을 다시 할 수 있다.\n\n\n\n\n\n\nVim 나가기\n\n\n\n다수 프로그램에서 Vim이 기본설정된 편집기다. Vim을 예전에 사용한 적이 없고, 변경사항을 저장하지 않고 세션을 빠져나가고자 한다면, Esc 다음에, :q!를 타이핑하고 나서 Return를 친다. 변경사항을 저장하고 나가려면, Esc 다음에, :wq를 타이핑하고 Return을 친다.\n\n\n앞서 실행한 상기 명령어는 한번만 실행하면 된다: --global 플래그는 Git으로 하여금 해당 컴퓨터에 본인 계정의 모든 프로젝트에 환경설정한 것을 사용하도록 한다.\n본인이 설정한 환경설정 내용은 언제라도 다음 명령어를 입력하여 확인할 수 있다:\n$ git config --list\n원하는 만큼 환경설정을 바꿀 수도 있다: 편집기를 바꾸거나 전자우편주소를 갱신할 때 동일한 명령어를 사용하면 된다.\n\n\n\n\n\n\n프록시(Proxy)\n\n\n\n일부 네트워크에서 proxy를 사용할 필요가 있다. 이런 경우, Git에게 프록시에 대해 일러줘야 한다:\n$ git config --global http.proxy proxy-url\n$ git config --global https.proxy proxy-url\n프록시를 비활성화 하는 경우, 다음 명령어를 사용한다.\n$ git config --global --unset http.proxy\n$ git config --global --unset https.proxy\n\n\n\n\n\n\n\n\nGit 도움말과 매뉴얼\n\n\n\n항상 기억할 것은 git 명령어를 잊은 경우, -h 선택옵션을 주어 명령어 목록을 볼 수 있고, --help를 사용해서 Git 매뉴얼도 이용할 수 있다:\n$ git config -h\n$ git config --help",
    "crumbs": [
      "버전제어와 협업",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Git 구축 및 설정</span>"
    ]
  },
  {
    "objectID": "git-create.html",
    "href": "git-create.html",
    "title": "13  저장소 생성",
    "section": "",
    "text": "Git 환경설정이 완료되면, Git를 사용할 수 있다. 행성 착륙선을 화성에 보낼 수 있는지 조사를 하고 있는 늑대인간과 드라큘라 이야기를 계속해서 진행해 보자.\n\n\n\n동기 부여 사례\n\n\n먼저 바탕화면(Desktop)에 작업할 디렉토리를 생성하고, 생성한 디렉토리로 이동하자:\n$ cd ~/Desktop\n$ mkdir planets\n$ cd planets\n그리고 나서, planets을 저장소(repository)로 만든다 — 저장소는 Git이 파일에 대한 버젼정보를 저장하는 장소다:\n$ git init\ngit init 명령어가 서브디렉토리(subdirectory)와 파일을 담고 있는 저장소를 생성하는데 주목한다 — planets 저장소 내부에 중첩된 별도 저장소를 생성할 필요는 없다. 또한, planets 디렉토리를 생성하고 저장소로 초기화하는 것은 완전히 서로 다른 과정이다.\nls를 사용해서 디렉토리 내용을 살펴보면, 변한 것이 아무것도 없는 것처럼 보인다:\n$ ls\n하지만, 모든 것을 보여주는 -a 플래그를 추가하면, Git은 planets 디렉토리 내부에 .git 로 불리는 숨겨진 디렉토리를 생성한 것을 볼 수 있다:\n$ ls -a\n\n.   ..  .git\nGit은 .git이라는 특별한 하위 디렉토리에 프로젝트에 대한 정보를 저장한다. 여기에는 프로젝트 디렉토리 내부에 위치한 모든 파일과 서브 디렉토리가 포함된다. 만약 .git를 삭제하면, 프로젝트 이력을 모두 잃어버리게 된다.\n모든 것이 제대로 설정되었는지를 확인을 하려면, Git에게 다음과 같이 프로젝트 상태를 확인 명령어를 던진다:\n$ git status\n\n# On branch master\n#\n# Initial commit\n#\nnothing to commit (create/copy files and use \"git add\" to track)\n다른 git 버전을 사용할 경우, 출력 결과물이 다소 다를 수도 있다.\n\n\n\n\n\n\nGit 저장소를 생성할 장소\n\n\n\n(이미 생성한 프로젝트) 행성에 대한 정보를 추적하면서, 드라큘라는 달에 관한 정보도 추적하고자 한다. plantes 프로젝트와 관련된, 새로운 프로젝트 moons 를 시작한다. 늑대인간의 걱정에 불구하고, Git 저장소 내부에 또다른 Git 저장소를 생성하려고 다음 순서로 명령어를 입력해 나간다:\n$ cd ~/Desktop   # 바탕화면 디렉토리로 되돌아 간다.\n$ cd planets     # planets 디렉토리로 들어간다.\n$ ls -a          # planets 디렉토리에 .git 서브 디렉토리가 있는지 확인한다.\n$ mkdir moons    # planets/moons 서브 디렉토릴르 생성한다.\n$ cd moons       # moons 서브 디렉토리로 이동한다.\n$ git init       # Git 저장소를 moons 하위디렉토리에 생성한다.\n$ ls -a          # 새로운 Git 저장소가 .git 하위 디렉토리에 있는지 확인한다.\nmoons 서브 디렉토리에 저장된 파일을 추적하기 위해 moons 디렉토리 안에서 git init 명령을 실행해야 할까?\n\n해답\n아니다. moons 서브 디렉토리에 Git 저장소를 만들 필요는 없다. 왜냐하면, planets 저장소가 이미 모든 파일, 서브 디렉토리, planets 디렉토리 아래 서브 디렉토리 파일 모두를 추적하기 때문이다. 따라서, 달에 관한 모든 정보를 추정하는데, 드랴큘라는 planets 디렉토리 아래 moons 서브 디렉토리를 추가하는 것으로 충분하다.\n추가적으로, 만약 Git 저장소가 중첩(nested)되면, Git 저장소는 서로 방해할 수 있다: 바깥 저장소가 내부 저장소 버전관리를 하게 된다. 따라서, 별도 디렉토리에 서로 다른 신규 Git 저장소를 생성하는게 최선이다.\n디렉토리에 저장소가 서로 충돌하지 않도록 하려면, git status 출력물을 점검하면 된다. 만약, 다음과 같은 출력물이 생성되게 되면 신규 저장소를 생성하는 것이 권장된다:\n$ git status\n\nfatal: Not a git repository (or any of the parent directories): .git\n\n\n\n\n\n\n\n\n\ngit init 실수 올바르게 고치기\n\n\n\n늑대인간은 드라큘라에게 중첩된 저장소가 중복되어 불필요한 이유와 함께 향후 혼란을 야기할 수 있는 이유를 설명했다. 드라큘라는 중첩된 저장소를 제거하고자 한다. moons 서브 디렉토리에 마지막으로 날린 git init 명령어 실행취소를 어떻게 할 수 있을까?\n\n해답 – 주의해서 사용바람!\n이러한 사소한 실수를 원복하고자, 드라큘라는 planets 디렉토리에서 다음 명령어를 실행하여 .git 디렉토리를 제거하기만 하면 된다:\n$ rm -rf moons/.git\n하지만, 주의한다! 디렉토리를 잘못 타이핑하게 되면, 보관해야하는 프로젝트 정보를 담고 있는 Git 이력 전체가 날아가게 된다. 따라서, pwd 명령어를 사용해서 현재 작업 디렉토리를 항상 확인한다.",
    "crumbs": [
      "버전제어와 협업",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>저장소 생성</span>"
    ]
  },
  {
    "objectID": "git-change.html",
    "href": "git-change.html",
    "title": "14  변경사항 추적",
    "section": "",
    "text": "먼저 디렉토리 위치가 맞는 확인하자. planets 디렉토리에 위치해야 한다.\n$ pwd\n\n/home/vlad/Desktop/planets\nmoons 디렉토리에 여전히 있다면, planets 디렉토로리 되돌아간다.\n$ pwd\n\n/home/vlad/Desktop/planets/moons\n$ cd ..\n전진기지로서 화성의 적합성에 관한 기록을 담고 있는 mars.txt 파일을 생성한다. (파일 편집을 위해서 nano 편집기를 사용한다; 원하는 어떤 편집기를 사용해도 된다. 특히, 앞에서 전역으로 설정한 core.editor일 필요는 없다. 하지만, 파일을 새로 생성하거나 편집할 때 배쉬 명령어는 사용자가 선택한 편집기에 의존하게 된다.(nano일 필요는 없다.) 텍스트 편집기에 대한 환기로, The Unix Shell의 “Which Editor?” 부분을 참고한다.\n$ nano mars.txt\nmars.txt 파일에 다음 텍스트를 타이핑한다:\nCold and dry, but everything is my favorite color\nmars.txt 파일은 이제 한 줄을 포함하게 되어서, 다음 명령어로 내용을 확인할 수 있다:\n$ ls\n\nmars.txt\n$ cat mars.txt\n\nCold and dry, but everything is my favorite color\n다시 한번 프로젝트의 상태를 확인하고자 하면, 새로운 파일이 인지되었다고 Git이 일러준다:\n$ git status\n\nOn branch master\n\nInitial commit\n\nUntracked files:\n   (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    mars.txt\nnothing added to commit but untracked files present (use \"git add\" to track)\n“untracked files” 메시지가 의미하는 것은 Git가 추적하고 있지 않는 파일 하나가 디렉토리에 있다는 것이다. git add를 사용해서 Git에게 추적관리하라고 일러준다:\n$ git add mars.txt\n그리고 나서, 올바르게 처리되었는지 확인한다:\n$ git status\n\nOn branch master\n\nInitial commit\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n\n    new file:   mars.txt\n이제 Git은 mars.txt 파일을 추적할 것이라는 것을 알고 있지만, 커밋으로 아직 저장소에는 어떤 변경사항도 기록되지 않았다. 이를 위해서 명령어 하나 더 실행할 필요가 있다:\n$ git commit -m \"Start notes on Mars as a base\"\n\n[master (root-commit) f22b25e] Start notes on Mars as a base\n 1 file changed, 1 insertion(+)\n create mode 100644 mars.txt\ngit commit을 실행할 때, Git은 git add를 사용해서 저장하려고 하는 모든 대상을 받아서 .git 디렉토리 내부에 영구적으로 사본을 저장한다. 이 영구 사본을 커밋(commit) (혹은 수정(revision))이라고 하고, 짧은 식별자는 f22b25e이다. (여러분의 커밋번호의 짧은 식별자는 다를 수 있다.)\n-m (“message”를 위미) 플래그를 사용해서 나중에 무엇을 왜 했는지 기억에 도움이 될 수 있는 주석을 기록한다. -m옵션 없이 git commit을 실행하면, Git는 nano(혹은 처음에 core.editor에서 설정한 다른 편집기)를 실행해서 좀더 긴 메시지를 작성할 수 있다.\n좋은 커밋 메시지(Good commit messages) 작성은 커밋으로 만들어진 간략한 (영문자 기준 50문자 이하) 변경사항 요약으로 시작된다. 일반적으로 메시지는 완전한 문장이 되어야 한다. 예를 들어, “If applied, this commit will” . 만약 좀더 상세한 사항을 남기려면, 요약줄 사이에 빈줄을 추가하고 추가적인 내역을 적는다. 추가되는 공간에 왜 변경을 하는지 사유를 남기고, 어떤 영향을 미치는지도 기록한다.\n이제 git status를 시작하면:\n$ git status\n\nOn branch master\nnothing to commit, working directory clean\n모든 것이 최신 상태라고 보여준다. 최근에 작업한 것을 알고자 한다면, git log를 사용해서 프로젝트 이력을 보여주도록 Git에게 명령어를 보낸다:\n$ git log\n\ncommit f22b25e3233b4645dabd0d81e651fe074bd8e73b\nAuthor: Vlad Dracula &lt;vlad@tran.sylvan.ia&gt;\nDate:   Thu Aug 22 09:51:46 2013 -0400\n\n    Start notes on Mars as a base\ngit log는 시간 역순으로 저장소의 모든 변경사항을 나열한다. 각 수정사항 목록은 전체 커밋 식별자(앞서 git commit 명령어로 출력한 짧은 문자와 동일하게 시작), 수정한 사람, 언제 생성되었는지, 커밋을 생성할 때 Git에 남긴 로그 메시지가 포함된다.\n\n\n\n\n\n\n내가 작성한 변경사항은 어디있나?\n\n\n\n이 시점에서 ls 명령어를 다시 실행하면, mars.txt 파일만 덩그러니 보게 된다. 왜냐하면, Git이 앞에서 언급한 .git 특수 디렉토리에 파일 변경 이력 정보를 저장했기 때문이다. 그래서 파일 시스템이 뒤죽박죽되지 않게 된다. (따라서, 옛 버젼을 실수로 편집하거나 삭제할 수 없다.)\n\n\n이제 드라큘라가 이 파일에 정보를 더 추가했다고 가정하자. (다시 한번 nano편집기로 편집하고 나서 cat으로 파일 내용을 살펴본다. 다른 편집기를 사용할 수도 있고, cat으로 파일 내용을 꼭 볼 필요도 없다.)\n$ nano mars.txt\n$ cat mars.txt\n\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\ngit status를 실행하면, Git이 이미 알고 있는 파일이 변경되었다고 일러준다:\n$ git status\n\nOn branch master\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   mars.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n마지막 줄이 중요한 문구다: “no changes added to commit”. mars.txt 파일을 변경했지만, 아직 Git에게는 변경을 사항을 저장하려고 하거나 (git add로 수행), 저장소에 저장하라고 (git commit로 수행) 일러주지도 않았다. 이제 행동에 나서보자. 저장하기 전에 변경사항을 항상 검토하는 것은 좋은 습관이다. git diff를 사용해서 작업 내용을 두번 검증한다. git diff는 현재 파일의 상태와 가장 최근에 저장된 버젼의 차이를 보여준다:\n$ git diff\n\ndiff --git a/mars.txt b/mars.txt\nindex df0654a..315bf3a 100644\n--- a/mars.txt\n+++ b/mars.txt\n@@ -1 +1,2 @@\n Cold and dry, but everything is my favorite color\n+The two moons may be a problem for Wolfman\n출력 결과가 암호같은데 이유는 한 파일이 주어졌을 때 다른 파일 하나를 어떻게 재구성하는지를 일러주는 patch와 편집기 같은 도구를 위한 일련의 명령어라서 그렇다. 만약 해당 내역을 조각내서 쪼개다면:\n\n첫번째 행은 Git이 신규 파일과 옛 버젼 파일을 비교하는 유닉스 diff 명령어와 유사한 출력결과를 생성하고 있다.\n두번째 행은 정확하게 Git이 파일 어느 버젼을 비교하는지 일러준다; df0654a와 315bf3a은 해당 버젼에 대해서 중복되지 않게 컴퓨터가 생성한 표식이다.\n세번째와 네번째 행은 변경되는 파일 명칭을 다시한번 보여주고 있다.\n\n나머지 행이 가장 흥미롭다. 실제 차이가 나는 것과 어느 행에서 발생했는지 보여준다. 특히 첫번째 열의 + 기호는 어디서 행이 추가 되었는지 보여준다.\n\n변경사항 검토후에, 변경사항을 커밋(commit)하자.\n$ git commit -m \"Add concerns about effects of Mars' moons on Wolfman\"\n$ git status\n\nOn branch master\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   mars.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n이럴 수가, git add을 먼저 하지 않아서 Git이 커밋을 할 수 없다. 고쳐봅시다:\n$ git add mars.txt\n$ git commit -m \"Add concerns about effects of Mars' moons on Wolfman\"\n\n[master 34961b1] Add concerns about effects of Mars' moons on Wolfman\n 1 file changed, 1 insertion(+)\n실제로 무엇을 커밋하기 전에 커밋하고자하는 파일을 먼저 추가하라고 Git이 주문하는데, 이유는 한번에 모든것을 커밋하지 싶지 않을 수도 있기 때문이다. 예를 들어, 작성하고 있는 논문에 지도교수 논문을 일부 인용하여 추가한다고 가정하자. 논문 중간에 인용되는 추가부분과 상응되는 참고문헌을 커밋하고는 싶지만, 결론 부분을 커밋하고는 싶지 않다. (아직 결론이 완성되지 않았다.)\n이런 점을 고려해서, Git은 특별한 준비 영역(staging)이 있어서 현재 변경부분(change set)을 추가는 했으나 아직 커밋하지 않는 것을 준비 영역에서 추적하고 있다.\n\n\n\n\n\n\n준비 영역(Staging area)\n\n\n\n프로젝트 기간 동안에 걸쳐 발생된 변경사항에 대해 스냅사진을 찍는 것으로 Git을 바라보면, git add 명령어는 무엇이 스냅사진(준비영역에 놓는 것)에 들어갈지 명세하고, git commit 명령어는 실제로 스탭사진을 찍는 것이다. 만약 git commit을 타이핑할 때 준비된 어떤 것도 없다면, Git이 git commit -a 혹은 git commit --all 명령어 사용을 재촉한다. 사진을 찍으려고 모두 모이세요 하는 것과 같다. 하지만, 준비영역에 추가할 것을 명시적으로 하는 것이 항상 좋다. 왜냐하면 커밋을 했는데 잊은 것이 있을 수도 있기 때문이다. (스냅사진으로 돌아가서, -a 옵션을 사용했기 때문에 스냅사진에 들어갈 항목을 불완전하게 작성했을 수도 있다!) 수작업으로 준비영역에 올리거나, 원하는 것보다 많은 것을 올렸다면 “git undo commit”을 찾아보라.\n\n\n\n\n\nGit 준비(Staging) 영역\n\n\n파일 변경사항을 편집기에서 준비 영역으로, 그리고 장기 저장소로 옮기는 것을 살펴보자. 먼저, 파일에 행 하나를 더 추가한다:\n$ nano mars.txt\n$ cat mars.txt\n\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nBut the Mummy will appreciate the lack of humidity\n$ git diff\n\ndiff --git a/mars.txt b/mars.txt\nindex 315bf3a..b36abfd 100644\n--- a/mars.txt\n+++ b/mars.txt\n@@ -1,2 +1,3 @@\n Cold and dry, but everything is my favorite color\n The two moons may be a problem for Wolfman\n+But the Mummy will appreciate the lack of humidity\n지금까지 좋다. 파일의 끝에 행을 하나 추가했다(첫 열에 +이 보인다). 이제, 준비영역에 변경 사항을 놓고, git diff 명령어가 보고하는 것을 살펴보자:\n$ git add mars.txt\n$ git diff\n출력결과가 없다. Git이 일러줄 수 있는 것은 영구히 저장되는 것과 현재 디렉토리에 작업하고 있는 것에 차이가 없다는 것이다. 하지만, 다음과 같이 명령어를 친다면:\n$ git diff --staged\n\ndiff --git a/mars.txt b/mars.txt\nindex 315bf3a..b36abfd 100644\n--- a/mars.txt\n+++ b/mars.txt\n@@ -1,2 +1,3 @@\n Cold and dry, but everything is my favorite color\n The two moons may be a problem for Wolfman\n+But the Mummy will appreciate the lack of humidity\n마지막으로 커밋된 변경사항과 준비 영역(Staging)에 있는 것과 차이를 보여준다. 변경사항을 저장하자:\n$ git commit -m \"Discuss concerns about Mars' climate for Mummy\"\n\n[master 005937f] Discuss concerns about Mars' climate for Mummy\n 1 file changed, 1 insertion(+)\n현재 상태를 확인하자:\n$ git status\n\nOn branch master\nnothing to commit, working directory clean\n그리고 지금까지 작업한 이력을 살펴보자:\n$ git log\n\ncommit 005937fbe2a98fb83f0ade869025dc2636b4dad5\nAuthor: Vlad Dracula &lt;vlad@tran.sylvan.ia&gt;\nDate:   Thu Aug 22 10:14:07 2013 -0400\n\n    Discuss concerns about Mars' climate for Mummy\n\ncommit 34961b159c27df3b475cfe4415d94a6d1fcd064d\nAuthor: Vlad Dracula &lt;vlad@tran.sylvan.ia&gt;\nDate:   Thu Aug 22 10:07:21 2013 -0400\n\n    Add concerns about effects of Mars' moons on Wolfman\n\ncommit f22b25e3233b4645dabd0d81e651fe074bd8e73b\nAuthor: Vlad Dracula &lt;vlad@tran.sylvan.ia&gt;\nDate:   Thu Aug 22 09:51:46 2013 -0400\n\n    Start notes on Mars as a base\n\n\n\n\n\n\n단어 단위 차이분석(Word-based diffing)\n\n\n\n경우에 따라서는 줄단위로 텍스트 차이 분석이 너무 자세하지 않을 수도 있다. git diff 명령어에 --color-words 선택옵션이 유용할 수 있는데 이유는 색상을 사용해서 변경된 단어를 강조해서 표시해 주기 때문이다.\n\n\n\n\n\n\n\n\n로그 페이지별 보기\n\n\n\n화면에 git log 출력결과가 너무 긴 경우, git에 화면 크기에 맞춰 페이지 단위로 쪼개주는 프로그램이 제공된다. 페이지별 쪼개보기(“pager”)가 호출되면, 화면 마지막 줄에 프롬프트 대신에 :이 나타난다.\n\n페이저(pager)에서 나오려면, Q를 타이핑한다.\n다음 페이지로 이동하려면, Spacebar를 타이핑한다.\n전체 페이지에서 특정 단어를 검색하려면, / 타이핑하고, and 특정단어를 검색하는 검색어를 타이핑한다. 검색에 매칭되는 단어를 따라가려면 N을 타이핑한다.\n\n\n\n\n\n\n\n\n\n로그 크기 제한걸기\n\n\n\ngit log가 전체 터미널 화면을 접수하는 것을 피하려면, -N 선택옵션을 적용해서 Git이 화면에 출력하는 커밋 숫자에 제한을 건다. 여기서 -N은 보고자 하는 커밋 갯수가 된다. 예를 들어 가장 마지막 커밋만 보려고 한다면 다음과 같이 타이핑한다:\n$ git log -1\n\ncommit 005937fbe2a98fb83f0ade869025dc2636b4dad5\nAuthor: Vlad Dracula &lt;vlad@tran.sylvan.ia&gt;\nDate:   Thu Aug 22 10:14:07 2013 -0400\n   Discuss concerns about Mars' climate for Mummy\n--oneline 선택옵션을 사용해서 출력되는 로그 메시지 크기를 줄일 수도 있다:\n$ git log --oneline\n\n* 005937f Discuss concerns about Mars' climate for Mummy\n* 34961b1 Add concerns about effects of Mars' moons on Wolfman\n* f22b25e Start notes on Mars as a base\n--oneline 선택옵션과 다른 선택옵션을 조합할 수도 있다. 유용한 조합 사례로 다음이 있다:\n$ git log --oneline --graph --all --decorate\n\n* 005937f Discuss concerns about Mars' climate for Mummy (HEAD, master)\n* 34961b1 Add concerns about effects of Mars' moons on Wolfman\n* f22b25e Start notes on Mars as a base\n\n\n\n\n\n\n\n\n디렉토리\n\n\n\nGit에서 디렉토리에 관해서 알아두면 좋을 두가지 사실.\n\nGit은 그 자체로 디렉토리를 추적하지 않고, 디렉토리에 담긴 파일만 추적한다. 믿지 못하겠다면, 직접 다음과 같이 시도해 본다:\n\n$ mkdir directory\n$ git status\n$ git add directory\n$ git status\n새로 생성된 directory 이름을 갖는 디렉토리가 git add 명령어로 명시적으로 추가했음에도 불구하고 untracked files 목록에 나오지 않고 있다. 이런 이유로 인해서 가끔 .gitkeep 파일을 보게 된다. .gitignore와 달리, 특별하지는 않고 유일한 목적은 디렉토리를 만들어 내어 Git이 저장소에 추가하도록 하는 역할만 수행한다. 사실 원하는 이름으로 파일명을 붙일 수 있다.\n\nGit 저장소에 디렉토리를 생성하고 파일로 채워넣으면, 다음과 같이 디렉토리의 모든 파일을 추가할 수 있다:\n\ngit add &lt;directory-with-files&gt;\n\n\n요약하면, 변경사항을 저장소에 추가하고자 할 때, 먼저 변경된 파일을 준비 영역(Staging)에 git add 명령어로 추가하고 나서, 준비 영역의 변경사항을 저장소에 git commit 명령어로 최종 커밋한다:\n\n\n\nGit 커밋(Commit) 작업흐름\n\n\n\n\n\n\n\n\n커밋 메시지 고르기\n\n\n\n다음 중 어떤 커밋 메시지가 mars.txt 파일의 마지막 커밋으로 가장 적절할까요? 1. “Changes” 2. “Added line ‘But the Mummy will appreciate the lack of humidity’ to mars.txt” 3. “Discuss effects of Mars’ climate on the Mummy”\n\n해답 1번은 충분히 기술되어 있지 못하고 커밋 목적이 불확실하다; 2번은 “git diff” 명령어를 사용한 것과 불필요하게 중복된다; 3번이 좋다: 짧고, 기술이 잘되어 있고, 피할 수 없게 명백하다(imperative).\n\n\n\n\nGit에 변경사항 커밋하기\n다음 중 어떤 명령어가 로컬 Git 저장소에 myfile.txt 파일 변경사항을 저장시키는걸까?\n\n   $ git commit -m \"my recent changes\"\n   $ git init myfile.txt\n   $ git commit -m \"my recent changes\"\n   $ git add myfile.txt\n   $ git commit -m \"my recent changes\"\n   $ git commit -m myfile.txt \"my recent changes\"\n\n\n해답\n\n파일이 이미 준비영역(staging)에 올라온 경우만 커밋이 생성된다.\n신규 저장소를 생성하게 된다.\n정답: 파일을 준비영역에 추가하고 나서, 커밋하게 된다.\nmyfile.txt 파일에 “my recent changes” 메시지를 갖는 커밋을 생성한다.\n\n\n\n\n\n\n\n\n\n파일 다수를 커밋\n\n\n\n준비영역(staging area)은 스냅샷 한번에 원하는 만큼 파일을 변경사항을 담아 낼 수 있다. 1. mars.txt 파일에 전진기지로 생각하는 금성(Venus)를 고려하고 있다는 결정을 담은 텍스트를 추가한다. 2. venus.txt 파일을 새로 생성해서 본인과 친구들에게 금성에 관한 첫생각을 담아낸다. 3. 파일 두개에 변경사항을 준비영역에 추가하고 커밋한다.\n\n해답\n먼저, mars.txt, venus.txt 파일에 변경사항을 기록한다:\n$ nano mars.txt\n$ cat mars.txt\n\nMaybe I should start with a base on Venus.\n\n\n$ nano venus.txt\n$ cat venus.txt\n\nVenus is a nice planet and I definitely should consider it as a base.\n준비영역에 파일 두개를 추가한다. 한줄로 추가작업을 수행할 수 있다:\n$ git add mars.txt venus.txt\n혹은 명령어를 다수 타이핑하면 된다:\n$ git add mars.txt\n$ git add venus.txt\n이제 파일을 커밋할 준비가 되었다. git status를 사용해서 확인하면, 커밋을 할 준비가 되었다:\n$ git commit -m \"Write plans to start a base on Venus\"\n\n[master cc127c2]\n Write plans to start a base on Venus\n 2 files changed, 2 insertions(+)\n create mode 100644 venus.txt\n\n\n\n\n\n\n\n\n\nbio 저장소\n\n\n\n\nbio라는 새로운 Git 저장소를 본인 로컬 컴퓨터에 생성한다.\nme.txt라는 파일로 본인에 대한 3줄 이력서를 작성한다. 변경사항을 커밋한다.\n그리고 나서 한줄을 바꾸고, 네번째 줄을 추가하고 나서,\n원래 상태와 갱신된 상태의 차이를 화면에 출력한다.\n\n\n해답\n필요하다면, planets 폴더에서 빠져나온다:\n$ cd ..\nbio 폴더를 새로 생성하고 bio 폴더로 이동한다:\n$ mkdir bio\n$ cd bio\ngit 명령어로 초기화한다:\n$ git init\nnano 혹은 선호하는 편집기를 사용해서 me.txt 파일에 본인 일대기를 작성한다. 파일을 추가하고 나서, 저장소에 커밋한다:\n$ git add me.txt\n$ git commit -m'Adding biography file'\n기술된 것(한줄 변경하고, 4번째 줄을 추가한다)처럼 파일을 변경한다. 원본 상태와 수정된 상태를 git diff 명령어를 사용해서 화면에 출력한다:\n$ git diff me.txt\n\n\n\n\n\n\n\n\n\n저자(Author)와 커미터(Committer)\n\n\n\n매번 커밋을 할 때마다, Git은 이름을 두번 저장한다. 본인 이름이 저자(Author)와 커미터(Committer)로 기록된다. 마지막 커밋에 추가 정보를 Git에게 요구하면 확인이 가능하다:\n$ git log --format=full\n커밋할 때, 저자를 다른 누군가로 바꿀 수 있다:\n$ git commit --author=\"Vlad Dracula &lt;vlad@tran.sylvan.ia&gt;\"\n커밋을 두개 생성한다: 하나는 --author 옵션을 갖는 것으로 저자로 동료이름을 반영한다. git log와 git log --format=full 명령어를 실행한다. 이런 방식이 동료와 협업하는 방식이 될 수도 있겠다고는 생각이 될 수 있다.\n\n해법\n$ git add me.txt\n$ git commit -m \"Update Vlad's bio.\" --author=\"Frank N. Stein &lt;franky@monster.com&gt;\"\n\n[master 4162a51] Update Vlad's bio.\nAuthor: Frank N. Stein &lt;franky@monster.com&gt;\n1 file changed, 2 insertions(+), 2 deletions(-)\n\n$ git log --format=full\ncommit 4162a51b273ba799a9d395dd70c45d96dba4e2ff\nAuthor: Frank N. Stein &lt;franky@monster.com&gt;\nCommit: Vlad Dracula &lt;vlad@tran.sylvan.ia&gt;\n\nUpdate Vlad's bio.\n\ncommit aaa3271e5e26f75f11892718e83a3e2743fab8ea\nAuthor: Vlad Dracula &lt;vlad@tran.sylvan.ia&gt;\nCommit: Vlad Dracula &lt;vlad@tran.sylvan.ia&gt;\n\nVlad's initial bio.",
    "crumbs": [
      "버전제어와 협업",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>변경사항 추적</span>"
    ]
  },
  {
    "objectID": "git-history.html",
    "href": "git-history.html",
    "title": "15  이력 탐색",
    "section": "",
    "text": "앞선 학습에서 살펴봤듯이, 식별자로 커밋을 조회할 수 있다. HEAD 식별자를 사용해서 작업 디렉토리의 가장 최근 커밋을 조회할 수 있다.\nmars.txt 파일에 한번에 한줄씩 추가했다. 따라서, 눈으로 봐도 진행사항을 쉽게 추적할 수 있다. HEAD를 사용해서 추적작업을 수행해보자. 시작전에 mars.txt 파일에 변경을 가해보자.\n$ nano mars.txt\n$ cat mars.txt\n\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nBut the Mummy will appreciate the lack of humidity\nAn ill-considered change\n이제, 변경된 사항을 살펴보자.\n$ git diff HEAD mars.txt\n\ndiff --git a/mars.txt b/mars.txt\nindex b36abfd..0848c8d 100644\n--- a/mars.txt\n+++ b/mars.txt\n@@ -1,3 +1,4 @@\n Cold and dry, but everything is my favorite color\n The two moons may be a problem for Wolfman\n But the Mummy will appreciate the lack of humidity\n+An ill-considered change.\nHEAD만 빼면, 앞서 살펴본 것과 동일하다. 이러한 접근법의 정말 좋은 점은 이전 커밋을 조회살 수 있다는 점이다. ~1(“~”은 “틸드(tilde)”, 발음기호 [til-duh])을 추가해서 HEAD 이전 첫번째 커밋을 조회할 수 있다.\n$ git diff HEAD~1 mars.txt\ngit diff 명령어를 사용해서 이전 커밋과 차이난 점을 보고자 한다면, HEAD~1, HEAD~2 표기법을 사용해서 조회를 쉽게 할 수 있다:\n$ git diff HEAD~2 mars.txt\n\ndiff --git a/mars.txt b/mars.txt\nindex df0654a..b36abfd 100644\n--- a/mars.txt\n+++ b/mars.txt\n@@ -1 +1,4 @@\n Cold and dry, but everything is my favorite color\n+The two moons may be a problem for Wolfman\n+But the Mummy will appreciate the lack of humidity\n+An ill-considered change\ngit show를 사용해서도 커밋 메시지 분만 아니라 이전 커밋과 변경사항을 보여준다. git diff는 작업 디렉토리와 커밋 사이 차이나는 부분을 보여준다.\n$ git show HEAD~2 mars.txt\n\ncommit 34961b159c27df3b475cfe4415d94a6d1fcd064d\nAuthor: Vlad Dracula &lt;vlad@tran.sylvan.ia&gt;\nDate:   Thu Aug 22 10:07:21 2013 -0400\n\n    Start notes on Mars as a base\n\ndiff --git a/mars.txt b/mars.txt\nnew file mode 100644\nindex 0000000..df0654a\n--- /dev/null\n+++ b/mars.txt\n@@ -0,0 +1 @@\n+Cold and dry, but everything is my favorite color\n이런 방식으로, 연쇄 커밋 사슬을 구성할 수 있다. 가장 최근 사슬의 끝값은 HEAD로 조회된다; ~ 표기법을 사용하여 이전 커밋을 조회할 수 있다. 그래서 HEAD~1(“head 마이너스 1”으로 읽는다.)은 “바로 앞선 커밋”을 의미하고, HEAD~123은 지금 있는 위치에서 123번째 이전 수정으로 간다는 의미가 된다.\n커밋된 것을 git log 명령어로 화면에 뿌려주는 숫자와 문자로 구성된 긴 문자열을 사용하여 조회할 수도 있다. 변경사항에 대해서 중복되지 않는 ID로 “중복되지 않는(unique)”의 의미는 정말 유일하다는 의미다: 특정 컴퓨터에 있는 임의 파일 집합에 대한 모든 변경사항은 중복되지 않는 40-문자 식별자가 붙어있다. 첫번째 커밋은 ID로 f22b25e3233b4645dabd0d81e651fe074bd8e73b 이 주어졌다. 그래서 다음과 같이 시도하자:\n$ git diff f22b25e3233b4645dabd0d81e651fe074bd8e73b mars.txt\n\ndiff --git a/mars.txt b/mars.txt\nindex df0654a..93a3e13 100644\n--- a/mars.txt\n+++ b/mars.txt\n@@ -1 +1,4 @@\n Cold and dry, but everything is my favorite color\n+The two moons may be a problem for Wolfman\n+But the Mummy will appreciate the lack of humidity\n+An ill-considered change\n올바든 정답이지만, 난수 40-문자로 된 문자열을 타이핑하는 것은 매우 귀찮은 일이다. 그래서 Git 앞의 몇개 문자만으로도 사용할 수 있게 했다:\n$ git diff f22b25e mars.txt\n\ndiff --git a/mars.txt b/mars.txt\nindex df0654a..93a3e13 100644\n--- a/mars.txt\n+++ b/mars.txt\n@@ -1 +1,4 @@\n Cold and dry, but everything is my favorite color\n+The two moons may be a problem for Wolfman\n+But the Mummy will appreciate the lack of humidity\n+An ill-considered change\n좋았어요! 파일에 변경사항을 저장할 수 있고 변경된 것을 확인할 수 있다. 어떻게 옛 버젼 파일을 되살릴 수 있을까? 우연히 파일을 덮어썼다고 가정하자:\n$ nano mars.txt\n$ cat mars.txt\n\nWe will need to manufacture our own oxygen\n이제 git status를 통해서 파일이 변경되었다고 하지만, 변경사항은 아직 준비영역(Staging area)에 옮겨지지 않은 것으로 확인된다:\n$ git status\n\nOn branch master\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   mars.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ngit checkout 명령어를 사용해서 과거에 있던 상태로 파일을 돌려 놓을 수 있다:\n$ git checkout HEAD mars.txt\n$ cat mars.txt\n\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nBut the Mummy will appreciate the lack of humidity\n이름에서 유추할 수 있듯이, git checkout 명령어는 파일 옛 버젼을 확인하고 갖고 나간다. 즉, 되살린다. 이 경우 HEAD에 기록된 가장 최근에 저장된 파일 버젼을 되살린다. 좀더 오래된 버젼을 되살리고자 한다면, 대신에 커밋 식별자를 사용한다:\n$ git checkout f22b25e mars.txt\n$ cat mars.txt\n\nCold and dry, but everything is my favorite color\n$ git status\n\n# On branch master\nChanges to be committed:\n  (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n# Changes not staged for commit:\n#   (use \"git add &lt;file&gt;...\" to update what will be committed)\n#   (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n#\n#   modified:   mars.txt\n#\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n변경사항은 준비영역에 머물러 있는 것에 주목한다. 다시, git checkout 명령어를 사용해서 이전버젼으로 되돌아 간다:\n$ git checkout HEAD mars.txt\n\n헤드(HEAD)를 잃지 말자\nf22b25e 커밋 상태로 mars.txt 파일을 되돌리는데 앞서 다음 명령어를 사용했다.\n$ git checkout f22b25e mars.txt\n하지만 주의하자! checkout 명령어는 다른 중요한 기능을 갖고 있고 만약 타이핑에 오류가 있다면 의도를 Git이 오해할 수 있다. 예를들어, 앞선 명령에서 mars.txt를 빼먹게 되면…\n$ git checkout f22b25e\n\nNote: checking out 'f22b25e'.\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -b with the checkout command again. Example:\n git checkout -b &lt;new-branch-name&gt;\nHEAD is now at f22b25e Start notes on Mars as a base\n“detached HEAD”는 “보기는 하지만 건드리지는 마시오”와 같다. 따나서 현재 상태에서 어떤 변경도 만들지 말아야한다. 저장소 지난 상태를 살펴본 후에 git checkout master 명령어로 HEAD를 다시 붙힌다.\n\n실행 취소를 하는 변경을 하기 *전에** 저장소 상태를 확인하는 커밋 번호를 사용해야 한다는 것을 기억하는 것이 중요하다. 흔한 실수는 커밋 번호를 사용하는 것이다. 아래 예제에서는 커밋 번호가 f22b25e인 가장 최신 커밋(HEAD~1) 앞의 상태로 다시 되돌리고자 한다:\n\n\n\nGit Checkout\n\n\n그래서, 모두 한군데 놓아보자:\n\n\n\nhttps://figshare.com/articles/How_Git_works_a_cartoon/1328266\n\n\n\n\n\n\n\n\n흔한 사례 단순화\ngit status 출력결과를 주의깊이 읽게 되면, 힌트가 포함된 것을 볼 수 있다.\n(use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n출력결과가 언급하는 바는, 버전 식별자 없이 git checkout 명령어를 실행하게 되면 HEAD에 저장된 상태로 파일을 원복시킨다. 더블 대쉬 --가 필요한 경우는 명령어 자체로부터 복구회야 되는 파일명을 구별할 때다: 없는 경우, 커밋 식별자에 Git은 파일명을 사용한다.\n\n\n\n파일이 하나씩 하나씩 옛 상태로 되돌린다는 사실이 사람들이 작업을 조직하는 방식에 변화를 주는 경향이 있다. 모든 것이 하나의 큰 문서로 되어있다면, 나중에 결론부분에 변경사항을 실행취소하지 않고, 소개부분에 변경을 다시 되돌리기가 쉽지 않다(하지만 불가능하지는 않다). 다른 한편으로 만약 소개부분과 결론부분이 다른 파일에 저장되어 있다면, 시간 앞뒤로 이동하기가 훨씬 쉽다.\n\n\n\n\n\n\n파일 이전 버젼 복구하기\n\n\n\n정훈이가 몇주동안 작업한 파이썬 스크립트에 변경을 했고, 오늘 아침 정훈이가 작업한 변경사항이 스크립트를 “망가 먹어서” 더이상 실행이 되지 않는다. 복도 없이, 버그를 고치는데 1시간 이상 소모했다…\n다행스럽게도, Git을 사용한 프로젝트 버젼을 추적하고 있었다! 다음 아래 명령어 중 어떤 것이 data_cruncher.py로 불리는 파이썬 스크립트 가장 최근 버젼을 복구하게 할까요?\n\n$ git checkout HEAD\n$ git checkout HEAD data_cruncher.py\n$ git checkout HEAD~1 data_cruncher.py\n$ git checkout &lt;unique ID of last commit&gt; data_cruncher.py\nBoth 2 and 4\n\n\n\n\n\n\n\n\n\n커밋 되돌리기(Reverting a Commit)\n\n\n\n정훈이는 동료와 함께 파이썬 코드를 협업해서 작성하고 있다. 그룹 저장소에 마지막으로 커밋한 것이 잘못된 것을 알게 되서, 실행취소하여 원복하고자 한다.\n정훈이는 실행취소를 올바르게 해서 그룹저장소를 사용하는 모든 구성원이 제대로된 변경사항을 가지고 작업을 계속하길 원한다. git revert [잘못된 커밋 ID] 명령어는 정훈이가 이전에 잘못 커밋했던 작업에 대해 실행취소하는 커밋을 새로 생성시킨다.\n따라서, git revert는 git checkout [커밋 ID]와 다른데 이유는 checkout이 그룹 저장소에 커밋되지 않는 로컬 변경사항에 대해서 적용된다는 점에서 차이가 난다. 정훈이가 git revert를 사용할 올바른 절차와 설명이 아래에 나와있다. 빠진 명령어가 무엇일까?\n\n`________ # 커밋 ID를 찾을 수 있도록 Git 프로젝트 이력을 살펴본다.\nID를 복사한다. (ID의 첫 문자 몇개만 사용한다. 예를 들어, 0b1d055).\ngit revert [커밋 ID]\n새로운 커밋 메시지를 타이핑한다.\n저장하고 종료한다.\n\n\n\n\n\n\n\n\n\n작업흐름과 이력 이해하기\n\n\n\n다음 마지막 명령의 출력결과는 무엇일까?\n$ cd planets\n$ echo \"Venus is beautiful and full of love\" &gt; venus.txt\n$ git add venus.txt\n$ echo \"Venus is too hot to be suitable as a base\" &gt;&gt; venus.txt\n$ git commit -m \"Comment on Venus as an unsuitable base\"\n$ git checkout HEAD venus.txt\n$ cat venus.txt #this will print the contents of venus.txt to the screen\n\n   Venus is too hot to be suitable as a base\n   Venus is beautiful and full of love\n   Venus is beautiful and full of love\n   Venus is too hot to be suitable as a base\n   Error because you have changed venus.txt without committing the changes\n\n\n해법\n정답은 2. 왜냐하면, git add venus.txt가 Venus is too hot to be suitable as a base 행을 추가하기 전에만 적용된다. git checkout이 실행될 때 반영이 되지 않아서 그렇다. git commit 명령어에 -a 플래그를 사용하게 되면 이런 손실을 막을 수 있다.\n\n\n\n\n\n\n\n\n\ngit diff 이해 확인하기\n\n\n\ngit diff HEAD~3 mars.txt 명령어를 고려해 보자. 이 명령어를 실행하게 되면 실행결과로 예상하는 바를 말해보세요. 명령어를 실행하게 되면 어떤 일이 발생하는가? 그리고 이유는 무엇인가?\n또 다른 명령어 git diff [ID] mars.txt를 시도해 보자. 여기서, [ID]를 가장 최근 커밋 식별자로 치환한다. 무슨 일이 생길까? 그리고 실제로 생긴 일은 무엇인가?\n\n\n\n\n\n\n\n\n준비 단계 변경사항(Staged Changes) 제거하기\n\n\n\ngit checkout 명령어를 통해서 준비영역으로 올라오지 않은 변경사항이 있을 대, 이전 커밋을 복구할 수 있었다. 하지만, git checkout은 준비영역에 올라왔지만, 커밋되지 않는 변경사항에 대해서도 동작한다. mars.txt 파일에 변경사항을 만들고, 변경사항을 추가하고 나서, git checkout 명령어를 사용하게 되면 변경사항이 사라졌는지 살펴보자.\n\n\n\n\n\n\n\n\n변경 이력 탐색과 요약\n\n\n\n변경 이력 탐색은 Git에 있어 중요한 부분 중의 하나로, 특히 커밋이 수개월 전에 이뤄졌다면, 올바른 커밋 ID를 찾는 것이 종종 크나큰 도전과제가 된다. planets 프로젝트가 50 파일 이상으로 구성되었다고 상상해 보자.\nmars.txt 파일에 특정 텍스트가 변경된 커밋을 찾고자 한다. git log를 타이핑하게 되면 매우 긴 목록이 출력된다. 어떻게 하면 검색범위를 좁힐 수 있을까? git diff 명령어가 특정 파일만 탐색할 수 있단느 점을 상기하자.\n예를 들어, git diff mars.txt. 이 문제에 유사한 아이디어를 적용해 보자.\n$ git log mars.txt\n불행하게도 커밋 메시지 일부는 매우 애매모호하다. 예를 들어, update files. 어떻게 하면 파일을 잘 검색할 수 있을까? git diff, git log 명령어 모두 매우 유용하다. 두 명령어 모두 변경이력의 다른 부분을 요약해준다. 둘을 조합하는 것은 가능할까? 다음 명령어를 실행해 보자:\n$ git log --patch mars.txt\n엄청 긴 출력 목록이 나타난다. 각 커밋마다 커밋 메시지와 차이가 쭉 출력된다. 질문: 다음 명령어는 무슨 작업을 수행할까요?\n$ git log --patch HEAD~3 *.txt",
    "crumbs": [
      "버전제어와 협업",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>이력 탐색</span>"
    ]
  },
  {
    "objectID": "git-ignore.html",
    "href": "git-ignore.html",
    "title": "16  추적대상에서 제외",
    "section": "",
    "text": "만약 Git가 추적하기 않았으면 하는 파일이 있다면 어떨까요? 편집기에서 자동 생성되는 백업파일 혹은 자료 분석 중에 생성되는 중간 임시 파일이 좋은 예가 된다. 몇개 마루타 더미(dummy) 파일을 생성하자:\n$ mkdir results\n$ touch a.dat b.dat c.dat results/a.out results/b.out\n그려면 Git은 다음을 보여준다:\n$ git status\n\nOn branch master\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    a.dat\n    b.dat\n    c.dat\n    results/\nnothing added to commit but untracked files present (use \"git add\" to track)\n벼젼 제어 아래 이런 파일을 놓는 것은 디스크 공간 낭비다. 더 좋은 않는 것은, 이런 파일을 모두 관리목록에 넣는 것이 실제적으로 중요한 변경사항을 관리하는데 집중하지 못하게 한다는 것이다. 그래서 Git에게 중요하지 않는 이런 파일을 무시하게 일러준다.\n.gitignore라는 프로젝트 루트 디렉토리에 파일을 생성해서 무시할 것을 명기함으로써 해당작업을 수행한다:\n$ nano .gitignore\n$ cat .gitignore\n\n*.dat\nresults/\n상기 패턴은 .dat 확장자를 갖는 임의 파일과 results 디렉토리에 있는 모든 것을 무시한다. (하지만, 이들 파일 중 일부가 이미 추적되고 있다면, Git은 계속 추적한다.)\n.gitignore 파일을 생성하자마자, git status 출력결과는 훨씬 깨끗해졌다:\n$ git status\n\nOn branch master\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    .gitignore\nnothing added to commit but untracked files present (use \"git add\" to track)\n이제 Git가 알아차리는 유일한 것은 새로 생성된 .gitignore 파일이 된다. 우리는 이들 파일을 추적하여 관리하지 않는다고 생각할 수도 있지만, 우리와 저장소를 공유하고 있는 다른 모든 사람도 우리가 추적관리하지 않는 동일한 것을 무시하고 싶을 것이다. .gitignore 를 추가하고 커밋하자:\n$ git add .gitignore\n$ git commit -m \"Ignore data files and the results folder.\"\n$ git status\n\n# On branch master\nnothing to commit, working directory clean\n보너스로, .gitignore는 실수로 추적하고 싶지 않는 파일이 저장소에 추가되는 것을 피할 수 있게 돕는다:\n$ git add a.dat\n\nThe following paths are ignored by one of your .gitignore files:\na.dat\nUse -f if you really want to add them.\n만약 .gitignore 설정에 우선해서 파일을 추가하려면, git add -f를 사용해서 강제로 Git에 파일을 추가할 수 있다. 예를 들어, git add -f a.dat. 추적관리되지 않는 파일의 상태를 항상 보려면 다음을 사용한다:\n$ git status --ignored\n\nOn branch master\nIgnored files:\n (use \"git add -f &lt;file&gt;...\" to include in what will be committed)\n\n        a.dat\n        b.dat\n        c.dat\n        results/\n\nnothing to commit, working directory clean\n\n\n\n\n\n\n중첩된 파일 추적하지 않기\n\n\n\n디렉토리 구조가 다음과 같다:\nresults/data\nresults/plots\n어떻게 하면 results/plots 만 추적하지 않을 수 있을까? results/data 디렉토리는 추적한다.\n\n해답\n대부분의 프로그래밍 이슈와 마찬가지로, 이 문제를 해결하는 몇가지 방식이 있다. results/plots 디렉토리 콘텐츠만 추적하지 않기로 한다면, .gitignore 파일에 /plots/ 폴더만 추적하지 않도록 다음과 같이 .gitignore 파일을 변경하면 된다:\nresults/plots/\n대신에 /results/ 디렉토리에 모든 것을 추적하지 않지만, results/data만 추적하고자 한다면, results/ 폴더를 .gitignore 파일에 추가하고 results/data/ 폴더에 대해서 예외를 생성한다. 다음 도전과제가 이런 유형의 해법을 다루게 된다.\n종종 ** 패턴이 사용하기 수월한데, 다수 디렉토리와 매칭을 지원한다. 예를 들어, **/results/plots/*은 루트 디렉토리에 results/plots 디렉토리를 추정하기 않게 도니다.\n\n\n\n\n\n\n\n\n\n특정 파일만 포함시키기\n\n\n\nfinal.data 파일만 제외하고 모든 .data 파일은 추적하지 않고자 하면 어떻게 하면 될까? 힌트: ! (느낌표 연산자) 부호가 수행하는 작업을 알아본다.\n\n해법\n.gitignore 파일에 다음 두 줄을 추가한다:\n*.data           # 모든 data 파일을 추적하지 않는다.\n!final.data      # final.data 파일만 예외로 한다.\n느낌표 연산자가 앞서 제외된 항목을 포함시키게 한다.\n\n\n\n\n\n\n\n\n\n디렉토리에 모든 파일 추적하지 않기\n\n\n\n디렉토리 구조가 다음과 같다:\nresults/data/position/gps/a.data\nresults/data/position/gps/b.data\nresults/data/position/gps/c.data\nresults/data/position/gps/info.txt\nresults/plots\nresult/data/position/gps 디렉토리에 모든 .data 파일을 추적하지 않도록 .gitignore 파일에 규칙을 작성하는데 가장 짧은 규칙은 무엇일까? info.txt 파일은 추적하자.\n\n해답\nresults/data/position/gps 디렉토리에 .data로 끝나는 모든 파일은 results/data/position/gps/*.data 규칙으로 매칭된다. results/data/position/gps/info.txt 파일은 확장자가 달라서 계속 추적된다.\n\n\n\n\n\n\n\n\n\n적용 규칙 순서\n\n\n\n.gitignore 파일에 다음 내용이 담겨있다:\n*.data\n!*.data\n적용 결과는 어떻게 될까?\n\n해답\n! 연산자는 이전에 정의된 추적제외 패턴을 부정한다. .gitignore파일에서 !*.data 규칙은 앞서 추적에서 제외한 .data 모든 파일 추적제외를 부정한다. 따라서, 어떤 것도 추적제외되지 않고, .data 파일 모두가 추적된다.\n\n\n\n\n\n\n\n\n\n로그 파일\n\n\n\n스크립트를 작성해서 log_01, log_02, log_03 형태의 중간 로그 파일이 많이 생성되었다. 로그 파일을 보관하고자 하지만, git으로 추적하고 싶지는 않다.\n\nlog_01, log_02 … 형태 모든 파일을 추적 제외하는 .gitignore 규칙을 하나 작성한다.\nlog_01 형태 마루타 파일을 생성해서 “추적제외 패턴”을 테스트한다.\n종국에 log_01 파일이 매우 중요하는 것을 알게 되어서 .gitignore 파일을 변경하지 않고 추적되게 추가한다.\n추적하기를 원하지 않지만, .gitignore를 통해서 추적제외할 수 있는 파일이 어떤 유형이 있는지 주변 동료와 상의하자.\n\n\n해답\n\nlog_* 혹은 log* 규칙을 .gitignore 파일에 추가한다.\ngit add -f log_01 명령어를 사용해서 log_01 파일에 대한 추적을 수행한다.",
    "crumbs": [
      "버전제어와 협업",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>추적대상에서 제외</span>"
    ]
  },
  {
    "objectID": "git-github.html",
    "href": "git-github.html",
    "title": "17  GitHub 원격작업",
    "section": "",
    "text": "버젼 제어(version control)는 다른 사람과 협업할 때 진정으로 다가온다. 우리는 이미 버젼 제어를 위해 필요한 작업 대부분을 수행했다; 한가지 빠진 것은 한 저장소에서 다른 저장소로 변경사항을 복사하는 것이다.\nGit 같은 시스템은 임의 두 저장소 사이에 작업을 옮길 수 있는 기능을 제공한다. 하지만, 실무에서 다른 사람의 노트북이나 PC보다는 중앙 허브에 웹 방식으로 하나의 원본을 두고 사용하는 것이 가장 쉽다. 대부분의 프로그래머는 프로그램 마스터 원본을 GitHub, BitBucket, GitLab 호스팅 서비스에 두고 사용한다; 이번 학습 마지막 부분에서 이러한 접근법의 장점과 단점을 살펴본다.\n세상 사람들과 현재 프로젝트에서 변경한 사항을 공유하는 것에서부터 시작해보자. GitHub에 로그인하고 나서, 우측 상단 아이콘을 클릭해서 planets 이름으로 신규 저장소를 생성한다:\n\n\n\n(1단계) GitHub 저장소 생성\n\n\n저장소 이름을 “planets”으로 만들고 “Create Repostiory”를 클릭한다:\n\n\n\n(2단계) GitHub 저장소 생성\n\n\n저장소가 생성되자 마자, GitHub는 URL을 가진 페이지와 로컬 저장소 환경설정 방법에 대한 정보를 화면에 출력한다:\n\n\n\n(3단계) GitHub 저장소 생성\n\n\n다음 명령어가 실제로 GitHub 서버에서 자동으로 수행된 것이다:\n$ mkdir planets\n$ cd planets\n$ git init\nmars.txt 파일을 추가하고 커밋한 이전 학습을 상기한다면, 로컬 저장소는 다음과 같이 도식적으로 표현할 수 있다:\n\n\n\nGit 준비영역(Staging) 로컬 저장소\n\n\n이제 저장소가 두개로 늘어서, 도식적으로 표현하면 다음과 같다:\n\n\n\n신선한 신규 GitHub 저장소\n\n\n현재 로컬 저장소는 여전히 mars.txt 파일에 대한 이전 작업정보를 담고 있다. 하지만, GitHub의 원격 저장소에는 아직 어떠한 파일도 담고 있지는 않다:\n다음 단계는 두 저장소를 연결하는 것이다. 로컬 저장소를 위해서 GitHub 저장소를 원격(remote)으로 만들어 두 저장소를 연결한다. GitHub의 저장소 홈페이지에 식별하는데 필요한 문자열이 포함되어 있다:\n\n\n\nGitHub 저장소 URL 발견장소\n\n\nSSH에서 HTTPS로 프로토콜(protocol)을 변경하려면 ‘HTTPS’ 링크를 클릭한다.\n\n\n\n\n\n\nHTTPS vs. SSH\n\n\n\n부가적인 설정이 필요하지 않아서 여기서는 HTTPS를 사용한다. 워크샵 후에 SSH 접근 설정을 원할지도 모른다. SSH 접근이 좀더 안전하다. GitHub, Atlassian/BitBucket, GitLab의 훌륭한 지도서 중 하나를 따라하는 것도 좋다. GitLab은 온라인 동영상도 제공한다.\n\n\n\n\n\nGitHub 저장소 URL 변경\n\n\n웹 브라우져에서 URL을 복사하고 나서, 로컬 컴퓨터 planets 저장소로 가서 다음 명령어를 실행한다:\n$ git remote add origin https://github.com/vlad/planets.git\nVlad가 아니고 여러분 저장소의 URL을 사용했는지 확인한다: 유일한 차이점은 vlad 대신에 여러분의 사용자이름(username)이다.\ngit remote -v 실행해서 명령어가 제대로 작동했는지 확인한다:\n$ git remote -v\n\norigin   https://github.com/vlad/planets.git (push)\norigin   https://github.com/vlad/planets.git (fetch)\norigin 이름이 원격 저장소에 대한 로컬 별명이다. 원한다면 다른 명칭을 사용할 수도 있지만, origin 이름이 가장 일반적인 선택이다.\n별명이 origin으로 설정되면, 다음 명령어가 변경사항을 로컬 저장소에서 GitHub 원격 저장소로 밀어 넣어 푸쉬(push)한다:\n$ git push origin master\n\nCounting objects: 9, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (9/9), 821 bytes, done.\nTotal 9 (delta 2), reused 0 (delta 0)\nTo https://github.com/vlad/planets\n * [new branch]      master -&gt; master\nBranch master set up to track remote branch master from origin.\n\n\n\n\n\n\n프록시(Proxy)\n\n\n\n만약 연결된 네트워크가 프록시를 사용한다면, “Could not resolve hostname” 오류 메시지로 인해서 마지막 명령어가 실패할 가능성이 있다. 이 문제를 해결하기 위해서, 프록시에 대한 정보를 Git에 전달할 필요가 있다:\n$ git config --global http.proxy http://user:password@proxy.url\n$ git config --global https.proxy http://user:password@proxy.url\n프록시를 사용하지 않는 또다른 네트워크에 연결될 때, Git에게 프록시 기능을 사용하지 않도록 다음 명령어를 사용하여 일러준다:\n$ git config --global --unset http.proxy\n$ git config --global --unset https.proxy\n\n\n\n\n\n\n\n\n비밀번호 관리자(password manager)\n\n\n\n운영체제 위에 비밀번호 관리자(password manager)가 설정되어 있다면, 사용자이름(username)과 비밀번호(passord)가 필요로 할 때, git push 명령어가 이를 사용하려 한다. “Git Bash on Windows”를 사용하면 기본 디폴트 행동이다. 관리자 비밀번호를 사용하는 대신에, 터미널에서 사용자이름과 비밀번호를 입력하려면, git push를 실행하기 전에 터미널에서 다음과 같이 타이핑한다:\n$ unset SSH_ASKPASS\ngit uses SSH_ASKPASS for all credential entry에도 불구하고, SSH나 HTTPS를 경유하여 Git을 사용하든 SSH_ASKPASS을 설정하고 싶지 않을 수도 있다.\n~/.bashrc 파일 하단에 unset SSH_ASKPASS을 추가해서 Git으로 하여금 사용자명과 비밀번호를 사용하도록 기본설정으로 둘 수도 있다.\n\n\n이제 로컬 저장소와 원격 저장소는 다음과 같은 상태가 된다:\n\n\n\n첫번째 푸쉬(Push) 다음 GitHub 저장소\n\n\n\n\n\n\n\n\n‘-u’ 플래그(flag)\nGit 문서에서 git push과 함께 사용되는 -u 옵션을 볼 수 있다. git branch 명령어에 대한 --set-upstream-to 옵션과 동의어에 해당되는 옵션이다. 원격 브랜치를 현재 브랜치와 연결시키는데 사용된다. 그래서 git pull 명령어가 아무런 인자없이 사용될 수 있다. 원격 저장소가 설정되면, git push -u origin master 명령어만 실행시키면 연결작업이 완료된다.\n\n\n\n또한, 원격 저장소에서 로컬 저장소로 변경사항을 풀(pull)해서 가져올 수도 있다:\n$ git pull origin master\n\nFrom https://github.com/vlad/planets\n * branch            master     -&gt; FETCH_HEAD\nAlready up-to-date.\n이 경우 가져오기 하는 풀(pull)은 아무런 결과가 없는데, 이유는 두 저장소가 이미 동기화가 되어서다. 하지만, 만약 누군가 GitHub 저장소에 변경사항을 푸쉬했다면, 상기 명령어는 변경된 사항을 로컬 저장소로 다운로드한다.\n\n\n\n\n\n\nGitHub GUI\n\n\n\nGitHub 웹사이트에서 planets 저장소를 찾아간다. Code 탭아래 “XX commits”(“XX”는 숫자) 텍스트를 클릭한다. 각 커밋 우측의 버튼 세개 여기 저기 둘러보고, 클릭해 본다. 버튼을 눌러서 어떤 정보를 모을 수 있거나 탐색할 수 있는가? 쉘에서 동일한 정보를 어떻게 얻을 수 있을까?\n\n해답 (클립보드 그림을 갖는) 가장 좌측 버튼은 클립보드에 커밋 식별자 전체를 복사한다. 쉘에서 git log 명령어가 각 커밋에 대한 전체 커밋 식별자를 보여준다.\n중간 버튼을 클릭하게 되면, 특정 커밋으로 변경한 내용 전체를 확인할 수 있다. 녹색 음영선은 추가를 붉은색 음영선은 삭제를 의미한다. 쉘에서 동일한 작업을 git diff로 할 수 있다. 특히, git diff ID1..ID2(ID1와 ID2은 커밋 식별자다) 명령어(즉, git diff a3bf1e5..041e637)는 두 커밋 사이 차이를 보여준다.\n가장 우측 버튼은 커밋 당시에 저장소 모든 파일을 보여준다. 쉘로 이런 작업을 수행하려면, 해당 시점의 저장소를 checkout 해야 한다. 쉘에서 git checkout ID(여기서 ID는 살펴보려고 하는 커밋 식별자) 명령어를 실행하면 된다. checkout 하게 되면, 나중에 저장소를 올바른 상태로 되돌려 놓아야 된다는 것을 기억해야 됩니다.\n\n\n\n\n\n\n\n\n\nGitHub 시간도장(Timestamp)\n\n\n\nGitHub에 원격저장소를 생성하라. 로컬 저장소의 콘텐츠를 원격 저장소로 푸쉬하라. 로컬 저장소에 변경사항을 만들고, 변경사항을 푸쉬하라.\n방금 생성한 GitHub 저장소로 가서 GitHub 변경사항에 대한 시간도장(timestamps)을 살펴본다. GitHub이 시간정보를 어떻게 기록하는가? 왜 그런가?\n\n해답 GitHub은 시간도장을 사람이 읽기 쉬운 형태로 표시한다(즉, “22 hours ago” 혹은 “three weeks ago”). 하지만, 시간도장을 이리저리 살펴보면, 파일의 마지막 변경이 발생된 정확한 시간을 볼 수 있다.\n\n\n\n\n\n\n\n\n\n푸쉬(Push) vs. 커밋(Commit)\n\n\n\n이번 학습에서, “git push” 명령어를 소개했다. “git push” 명령어가 “git commit” 명령어와 어떻게 다른가?\n\n해답\n변경 사항을 푸쉬하면, 로컬에서 변경한 사항을 원격 저장소와 상호협의하여 최신 상태로 갱신한다. (흔히 다른 사람 변경시킨 것을 공유하는 것도 이에 해당된다.) 커밋은 로컬 저장소만 갱신한다는 점에서 차이가 난다.\n\n\n\n\n\n\n\n\n\n원격 설정 고치기\n\n\n\n원격 URL에 오탈자가 발생되는 일이 실무에서 흔히 발생된다. 이번 연습문제는 이런 유형의 이슈를 어떻게 고칠 수 있느냐에 대한 것이다. 먼저 잘못된 URL을 원격(remote)에 추가하면서 시작해 보자.\ngit remote add broken https://github.com/this/url/is/invalid\ngit remote로 추가할 때 오류를 받았나요? 원격 URL을 적법한지 확인해 주는 명령어를 생각해 낼 수 있나요? URL을 어떻게 수정할 수 있을까요? (팁: git remote -h를 사용한다.) 이번 연습문제를 수행한 다음에 원격(remote)를 지워버리는 것을 잊지말자.\n\n해답 원격(remote)를 추가할 때 어떤 오류 메시지도 볼 수 없다. (원격 remote 를 추가하는 것은 Git에게 알려주기만 할 뿐 아직 사용하지는 않았기 때문이다.) git push 명령어를 사용하자마자, 오류 메시지를 보게 된다. git remote set-url 명령어를 통해서 잘못된 원격 URL을 바꿔 문제를 해결하게 된다.\n\n\n\n\n\n\n\n\n\nGitHub 라이선스와 README 파일\n\n\n\n이번 학습에서 GitHub에 원격 저장소를 생성하는 방법을 학습했다. 하지만, GitHub 저장소를 초기화할 때 README.md 혹은 라이선스 파일을 추가하지 않았다. 로컬 저장소와 원격 저장소를 연결시킬 때 두 파일을 갖게 되면 무슨 일이 발생될 것으로 생각하십니까?\n\n해답 이런 경우, 관련없는 이력때문에 병합 충돌(merge conflict)이 발생된다. GitHub에서 README.md 파일을 생성시키고 원격 저장소에서 커밋작업을 수행한다. 로컬 저장소로 원격 저장소를 풀(pull)로 땡겨오면, Git이 origin과 공유되지 않는 이력을 탐지하고 병합(merge)를 거부해 버린다.\n$ git pull origin master\n\nFrom https://github.com/vlad/planets\n * branch            master     -&gt; FETCH_HEAD\n * [new branch]      master     -&gt; origin/master\nfatal: refusing to merge unrelated histories\n--allow-unrelated-histories 옵션으로 두 저장소를 강제로 병합(merge)시킬 수 있다. 이런 옵션을 사용할 때 주의한다. 병합하기 전에 로컬저장소와 원격저장소의 콘텐츠를 면밀히 조사한다.\n$ git pull --allow-unrelated-histories origin master\n\nFrom https://github.com/vlad/planets\n * branch            master     -&gt; FETCH_HEAD\nMerge made by the 'recursive' strategy.\n README.md | 1 +\n 1 file changed, 1 insertion(+)\n create mode 100644 README.md",
    "crumbs": [
      "버전제어와 협업",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>GitHub 원격작업</span>"
    ]
  },
  {
    "objectID": "git-collab.html",
    "href": "git-collab.html",
    "title": "18  협업",
    "section": "",
    "text": "다음 단계로, 짝을 이룬다. 한 사람이 “소유자”(연습을 시작하는데 사용될 GitHub 저장소 주인)가 되고, 다른 사람이 “협력자”(소유자 저장소를 복제해서 변경을 하는 사람)가 된다. 목표는 협력자가 변경사항을 소유자 저장소에 추가하는 것이다. 말미에는 역할을 바꿔서 두 사람 모두 소유자와 협력자의 역할을 수행한다.\n\n\n\n\n\n\n혼자 훈련하기\n\n\n\n혼자 힘으로 이번 학습을 쭉 진행해 왔다면, 두번째 터미널을 열어서 계속 진행할 수 있다.&gt; 두번째 윈도우가 여러분의 협력자를 나타내고, 다른 컴퓨터에서 작업하고 있는 것으로 볼 수 있다. GitHub 접근권한을 다른 사람에게 줄 필요가 없어졌다. 왜냐하면 두 ‘파트너’ 모두 여러분이기 때문이다.\n\n\n소유자가 협력자에게 접근권한을 부여할 필요가 있다. GitHub에서 오른쪽에 ‘setting’ 버튼을 클릭해서 협력자(Collaborators)를 선택하고, 파트너 이름을 입력한다.\n\n\n\nGitHub에 협업자(Collaborators) 추가\n\n\n소유자 저장소에 접근 권한이 부여되면, 협력자(Collaborator)는 https://github.com/notifications으로 이동한다. 그곳에서 소유자 저장소의 접근을 받아들이면 된다.\n다음으로 협력자(Collaborator)는 소유자 저장소 사본을 본인 컴퓨터로 내려받는다. 이런 작업을 “저장소 복제(cloning a repo)”라고 부른다. 소유자의 저장소를 본인 바탕화면(Desktop) 폴더에 클론하려면, 협력자는 다음 명령어를 입력한다:\n$ git clone https://github.com/vlad/planets.git ~/Desktop/vlad-planets\n’vlad’를 소유자 사용자이름(저장소를 소유하고 있는 사람)으로 바꾼다.\n\n\n\n저장소 클론한 후 모습\n\n\n앞서 작업했던 것과 정확하게 동일한 방식으로, 협력자는 이제 소유자의 저장소 클론에서 변경을 마음대로 할 수 있다:\n$ cd ~/Desktop/vlad-planets\n$ nano pluto.txt\n$ cat pluto.txt\n\nIt is so a planet!\n$ git add pluto.txt\n$ git commit -m \"Add notes about Pluto\"\n\n 1 file changed, 1 insertion(+)\n create mode 100644 pluto.txt\n그리고 나서, 변경사항을 GitHub의 소유자 저장소로 푸쉬한다:\n$ git push origin master\n\nCounting objects: 4, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 306 bytes, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/vlad/planets.git\n   9272da5..29aba7c  master -&gt; master\n주목할 점은 origin 이라는 원격 저장소를 생성할 필요는 없다: 저장소를 복제(clone)할때 Git이 자동으로 origin 이름을 붙여준다. (수작업으로 원격 설정을 할 때, 앞에서 왜 origin 이름을 사용한 것이 현명한 선택인 이유다.)\n이제 GitHub 웹사이트에서 소유자 저장소를 살펴본다(아마도 웹브라우져 다시 고치기를 수행할 필요가 있을 수 있다.) 협력자가 신규 커밋을 한 것을 확인할 수 있다.\n소유자 로컬 컴퓨터로 GitHub 원본 저장소의 변경사항을 다운로드하려면, 소유자는 다음과 같이 입력한다:\n$ git pull origin master\n\nremote: Counting objects: 4, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/vlad/planets\n * branch            master     -&gt; FETCH_HEAD\nUpdating 9272da5..29aba7c\nFast-forward\n pluto.txt | 1 +\n 1 file changed, 1 insertion(+)\n create mode 100644 pluto.txt\n이제 저장소 3개 (소유자 로컬 저장소, 협력자 로컬 저장소, GitHub의 소유자 저장소) 모두 동기화 되었다.\n\n\n\n\n\n\n기본적인 협업 작업흐름\n\n\n\n실무에서 협업하는 저장소의 가장 최신 버전을 갖도록 확인하고 확인하는 것이 좋다. 어떤 변경을 가하기 전에 git pull 명령어를 먼저 실행해야 한다. 기본적인 협업 작업흐름은 다음과 같다.\n\ngit pull origin master 명령어로 본인 로컬 저장소를 최신상태로 갱신한다.\n변경 작업을 수행하고 git add 명령어로 준비단계(staging area)로 보낸다.\ngit commit -m 명령어로 변경사항을 커밋한다.\nGitHub에 git push origin master 명령어로 변경사항을 업로드한다.\n\n상당한 변경사항을 포함한 단 한번의 커밋보다 작은 변화를 준 커밋을 많이 하는 것이 좋다: 작은 커밋이 가독성도 좋고 리뷰하기도 더 편하다.\n\n\n\n\n\n\n\n\n역할을 바꾸고 반복한다.\n\n\n\n역할을 바꿔서 전체 과정을 반복한다.\n\n\n\n\n\n\n\n\n변경사항 리뷰\n\n\n\n협력자에게 어떤 정보도 주지않고 소유자가 저장소에 커밋을 푸쉬했다. 협력자는 명령라인으로 무엇이 변경되었는지 어떻게 알 수 있을까요?\n\n해답\n명령라인에서 협력자는 로컬 저장소에 원격 저장소 변경사항을 git fetch origin master 명려어를 사용해서 가져올 수 있다. 하지만, 그 자체로 병합(merge)되는 것은 아니다. git diff master origin/master 명령어를 실행해서, 협력자는 터미널에 변경사항을 확인할 수 있다.\nGitHub에서도 협력자는 포크된 저장소로 가서 “This branch is 1 commit behind Our-Repository:master.” 메시지를 볼 수 있다. Compare 아이콘과 링크가 걸려있다. Compare 페이지에서 협력자는 base fork를 본인 저장소로 변경하고 나서, “compare across forks” 위에 링크를 클릭한다. 마지막으로 head fork를 주 저장소로 변경한다. 이 작업을 하게 되면 차이가 나는 모든 커밋을 볼 수 있게 된다.\n\n\n\n\n\n\n\n\n\nGitHub에서 변경사항 주석(comment)달기\n\n\n\n협력자는 소유자가 변경한 한 줄에 대해 질문을 가질 수 있고, 일부 제안사항도 있다.\nGitHub으로 커밋 차이에 대해 주석을 다는 것도 가능하다. 파란색 주석 아이콘(comment icon)을 클릭하면 주석 윈도우(comment window)을 열 수 있다.\n협력자는 GitHub 인터페이스를 사용해서 코멘트와 제안을 남길 수 있다.\n\n\n\n\n\n\n\n\n버전 이력, 백업, 그리고 버전 제어\n\n\n\n일부 백업 소프트웨어는 파일 버전에 대한 이력을 기록하고 있다. 도한, 특정 버전을 복구하는 기능도 제공하고 있다. 이러한 기능이 버전 제어와 어떻게 다른가?\n버전제어, Git, GitHub을 사용하는 좋은 점은 무엇인가?",
    "crumbs": [
      "버전제어와 협업",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>협업</span>"
    ]
  },
  {
    "objectID": "git-conflict.html",
    "href": "git-conflict.html",
    "title": "19  충돌",
    "section": "",
    "text": "사람들이 병렬로 작업을 할 수 있게 됨에 따라, 누군가 다른 사람 작업영역에 발을 들여 넣을 가능성이 생겼다. 혼자서 작업할 경우에도 이런 현상이 발생한다: 소프트웨어 개발을 개인 노트북과 연구실 서버에서 작업한다면, 각 작업본에 다른 변경사항을 만들 수 있다. 버젼 제어(version control)가 겹치는 변경사항을 해결(resolve)하는 툴을 제공함으로서, 이러한 충돌(conflicts)을 관리할 수 있게 돕는다.\n충돌을 어떻게 해소할 수 있는지 확인하기 위해서, 먼저 파일을 하나 생성하자. mars.txt 파일은 현재 두 협업하는 사람의 planets 저장소 사본에서는 다음과 같이 보인다:\n$ cat mars.txt\n\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nBut the Mummy will appreciate the lack of humidity\n파트너 사본에만 한 줄을 추가하자:\n$ nano mars.txt\n$ cat mars.txt\n\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nBut the Mummy will appreciate the lack of humidity\nThis line added to Wolfman's copy\n그리고 나서, 변경사항을 GitHub에 푸쉬하자:\n$ git add mars.txt\n$ git commit -m \"Add a line in our home copy\"\n\n[master 5ae9631] Add a line in our home copy\n 1 file changed, 1 insertion(+)\n$ git push origin master\n\nCounting objects: 5, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 352 bytes, done.\nTotal 3 (delta 1), reused 0 (delta 0)\nTo https://github.com/vlad/planets\n   29aba7c..dabb4c8  master -&gt; master\n이제 또다른 파트너가 GitHub에서 갱신(update)하지 않고, 본인 사본에 다른 변경사항을 작업한다:\n$ nano mars.txt\n$ cat mars.txt\n\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nBut the Mummy will appreciate the lack of humidity\nWe added a different line in the other copy\n로컬 저장소에 변경사항을 커밋할 수 있다:\n$ git add mars.txt\n$ git commit -m \"Add a line in my copy\"\n\n[master 07ebc69] Add a line in my copy\n 1 file changed, 1 insertion(+)\n하지만, Git이 GitHub에는 푸쉬할 수 없게 한다:\n$ git push origin master\n\nTo https://github.com/vlad/planets.git\n ! [rejected]        master -&gt; master (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/vlad/planets.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Merge the remote changes (e.g. 'git pull')\nhint: before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\n\n\n충돌하는 변경사항\n\n\nGit이 푸쉬를 거절한다. 이유는 로컬 브랜로 반영되지 않는 신규 업데이터트가 원격 저장소에 있음을 Git이 탐지했기 때문이다. 즉, 본인이 작업한 변경사항이 다른 사람이 작업한 변경사항과 중첩되는 것을 Git이 탐지해서, 앞에서 작업한 것을 뭉개지 않도록 정지시킨다. 이제 해야될 작업은 GitHub에서 변경사항을 풀(Pull)해서 가져오고, 현재 작업중인 작업본과 병합(merge)해서 푸쉬한다. 풀(Pull)부터 시작하자:\n$ git pull origin master\n\nremote: Counting objects: 5, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 1), reused 3 (delta 1)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/vlad/planets\n * branch            master     -&gt; FETCH_HEAD\nAuto-merging mars.txt\nCONFLICT (content): Merge conflict in mars.txt\nAutomatic merge failed; fix conflicts and then commit the result.\ngit pull 명령어는 로컬 저장소를 갱신할 때 원격 저장소에 이미 반영된 변경사항을 포함시키도록 한다. 원격 저장소 브랜치에서 변경사항을 가져온(fetch) 후에, 로컬 저장소 사본의 변경사항이 원격 저장소 사본과 겹치는 것을 탐지해냈다. 따라서, 앞서 작업한 것이 뭉개지지 않도록 서로 다른 두 버젼의 병합(merge)을 승인하지 않고 거절한 것이다. 해당 파일에 충돌나는 부분을 다음과 같이 표식해 놓는다:\n$ cat mars.txt\n\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nBut the Mummy will appreciate the lack of humidity\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nWe added a different line in the other copy\n=======\nThis line added to Wolfman's copy\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; dabb4c8c450e8475aee9b14b4383acc99f42af1d\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD으로 시작되는 부분에 본인 변경사항이 나와있다. Git이 자동으로 =======을 넣어서 충돌나는 변경사항 사이에 구분자로 넣고, &gt;&gt;&gt;&gt;&gt;&gt;&gt;기호는 GitHub에서 다운로드된 파일 내용의 마지막을 표시한다. (&gt;&gt;&gt;&gt;&gt;&gt;&gt; 표시자 다음에 문자와 숫자로 구성된 문자열로 방금 다운로드한 커밋번호도 식별자로 제시한다.)\n파일을 편집해서 표시자/구분자를 제거하고 변경사항을 일치하는 것은 전적으로 여러분에게 달려있다. 원하는 무엇이든지 할 수 있다: 예를 들어, 로컬 저장소의 변경사항을 반영하든, 원격 저장소의 변경사항을 반영하든, 로컬과 원격 저장소의 내용을 대체하는 새로운 것을 작성하든, 혹은 변경사항을 완전히 제거하는 것도 가능하다. 로컬과 원격 모두 교체해서 다음과 같이 파일이 보이도록 하자:\n$ cat mars.txt\n\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nBut the Mummy will appreciate the lack of humidity\nWe removed the conflict on this line\n병합을 마무리하기 위해서, 병합으로 생성된 변경사항을 mars.txt 파일에 추가하고 커밋한다:\n$ git add mars.txt\n$ git status\n\nOn branch master\nAll conflicts fixed but you are still merging.\n  (use \"git commit\" to conclude merge)\n\nChanges to be committed:\n\n    modified:   mars.txt\n$ git commit -m \"Merge changes from GitHub\"\n\n[master 2abf2b1] Merge changes from GitHub\n이제 변경사항을 GitHub에 푸쉬할 수 있다:\n$ git push origin master\n\nCounting objects: 10, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (6/6), 697 bytes, done.\nTotal 6 (delta 2), reused 0 (delta 0)\nTo https://github.com/vlad/planets.git\n   dabb4c8..2abf2b1  master -&gt; master\nGit이 병합하면서 수행한 것을 모두 추적하고 있어서, 수작업으로 다시 고칠 필요는 없다. 처음 변경사항을 만든 협력자 프로그래머가 다시 풀하게 되면:\n$ git pull origin master\n\nremote: Counting objects: 10, done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 6 (delta 2), reused 6 (delta 2)\nUnpacking objects: 100% (6/6), done.\nFrom https://github.com/vlad/planets\n * branch            master     -&gt; FETCH_HEAD\nUpdating dabb4c8..2abf2b1\nFast-forward\n mars.txt | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n병합된 파일을 얻게 된다:\n$ cat mars.txt\n\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nBut the Mummy will appreciate the lack of humidity\nWe removed the conflict on this line\n다시 병합할 필요는 없는데, 다른 누군가 작업을 했다는 것을 Git가 알기 때문이다.\n충돌을 해소하는 Git 기능은 매우 유용하지만, 충돌해소에는 시간과 노력이 수반되고, 충돌이 올바르게 해소되지 않게 되면 오류가 스며들게 된다. 프로젝트 와중에 상당량의 충돌을 해소하는데 시간을 쓰고 있다고 생각되면, 충돌을 줄일 수 있는 기술적인 접근법도 고려해보는 것이 좋겠다.\n\n좀더 자주 upstream을 풀(Pull)하기, 특히 신규 작업을 시작하기 전이라면 더욱 그렇다.\n작업을 구별하기 위해서 토픽 브랜치를 사용해서, 작업을 완료하면 마스터(master) 브랜치에 병합시킨다.\n좀더 작게 원자수준 커밋을 한다.\n논리적으로 적절하다면, 큰 파일을 좀더 작은 것으로 쪼갠다. 그렇게 함으로써 두 저작자가 동시에 동일한 파일을 변경하는 것을 줄일 수 있을 듯 싶다.\n\n프로젝트 관리 전략으로 충돌(conflicts)을 최소화할 수도 있다:\n\n동료 협력자와 누가 어떤 분야에 책임이 있는지 명확히 한다.\n동료 협력자와 작업순서를 협의해서, 동일한 라인에 변경사항이 있을 수 있는 작업이 동시에 작업되지 않게 시간차를 둔다.\n충돌이 문체변동(탭 vs 2 공백) 때문이라면, 프로젝트 관례를 수립하고, 코딩 스타일 도구(htmltidy, perltidy, rubocop 등)를 사용해서 필요한 경우 강제한다.\n\n\n\n\n\n\n\n본인이 생성한 충돌 해소하기\n\n\n\n강사가 생성한 저장소를 복제하세요. 저장소에 새 파일을 추가하고, 기존 파일을 변경하세요. (강사가 변경할 기존 파일이 어느 것인지 알려줄 것이다.) 강사의 말에 따라 충돌을 생성하는 연습을 위해서, 저장소에서 변경사항을 가져오도록 풀(Pull)하세요. 그리고 충돌을 해소하고 해결해 보세요.\n\n\n\n\n\n\n\n\n텍스트 파일이 아닌 충돌\n\n\n\n버젼 제어 저장소의 이미지 파일이나 혹은 다른 텍스트가 아닌 파일에서 충돌이 발생할 때, Git는 무엇을 하나요?\n\n해답\n먼저 시도해 보자. 드라큘라가 화성 표면에서 사진을 찍어 mars.jpg로 저장했다고 가정한다.\n화성 이미지 파일이 없다면 다음과 같이 더미 바이너리 파일을 생성할 수도 있다.\n$ head --bytes 1024 /dev/urandom &gt; mars.jpg\n$ ls -lh mars.jpg\n\n\n-rw-r--r-- 1 vlad 57095 1.0K Mar  8 20:24 mars.jpg\nls 명령어를 사용해서 파일 크기가 1 킬로바이트임이 확인된다. /dev/urandom 특수 파일에서 불러온 임의 바이트로 꽉 차있다.\n이제, 드라큘라가 mars.jpg 파일을 본인 저장소에 저장한다고 상정한다:\n$ git add mars.jpg\n$ git commit -m \"Add picture of Martian surface\"\n\n[master 8e4115c] Add picture of Martian surface\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 mars.jpg\n늑대인간도 비슷한 시점에 유사한 사진을 추가했다고 가정한다. 늑대인간의 사진은 화성하늘 사진인데, 이름도 mars.jpg로 동일하다. 드라큘라가 푸쉬하게 되면 유사한 메시지를 받게 된다:\n$ git push origin master\n\nTo https://github.com/vlad/planets.git\n ! [rejected]        master -&gt; master (fetch first)\nerror: failed to push some refs to 'https://github.com/vlad/planets.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n풀을 먼저한 뒤에 충돌나는 것을 해소한다는 것을 학습했다:\n$ git pull origin master\n이미지나 기타 바이너리 파일에 충돌이 생길 때, Git은 다음과 같은 메시지를 출력한다:\n$ git pull origin master\nremote: Counting objects: 3, done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/vlad/planets.git\n * branch            master     -&gt; FETCH_HEAD\n   6a67967..439dc8c  master     -&gt; origin/master\nwarning: Cannot merge binary files: mars.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\nAuto-merging mars.jpg\nCONFLICT (add/add): Merge conflict in mars.jpg\nAutomatic merge failed; fix conflicts and then commit the result.\n이번에도 충돌 메시지가 mars.txt에 나온 것과 거의 동일하다. 하지만, 중요한 추가 라인 한줄이 있다:\nwarning: Cannot merge binary files: mars.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\nGit은 자동으로 텍스트 파일에 했던 것처럼 이미지 파일에 충돌지점 표식을 끼워넣을 수 없다. 그래서 이미지 파일을 편집하는 대신에, 간직하고자 하는 버전을 쳇아웃(checkout)하고 나서 해당 버전을 추가(add)하고 커밋한다.\n중요한 라인에, mars.jpg 두가지 버전에 대해서 커밋 식별자(commit identifier)를 Git이 제시하고 있다. 현재 작업 버젼은 HEAD이고, 늑대인간 작업버전은 439dc8c0...이다. 본인 작업버젼을 사용하고자 하면, git checkout 명령어를 사용한다:\n$ git checkout HEAD mars.jpg\n$ git add mars.jpg\n$ git commit -m \"Use image of surface instead of sky\"\n\n[master 21032c3] Use image of surface instead of sky\n대신에 늑대인간 버젼을 사용하려고 하면, git checkout 명령어를 늑대인간 439dc8c0 커밋 식별자와 함께 사용하면 된다:\n$ git checkout 439dc8c0 mars.jpg\n$ git add mars.jpg\n$ git commit -m \"Use image of sky instead of surface\"\n\n[master da21b34] Use image of sky instead of surface\n이미지 모두 보관할 수도 있다. 동일한 이미지명으로 보관할 수는 없다는 것이 중요하다. 순차적으로 각 버젼을 쳇아웃(checkout)하고 나서 이미지명을 변경한다. 그리고 나서 이름을 변경한 버젼을 추가한다. 먼저, 각 이미지를 쳇아웃하고 이름을 변경하자:\n$ git checkout HEAD mars.jpg\n$ git mv mars.jpg mars-surface.jpg\n$ git checkout 439dc8c0 mars.jpg\n$ mv mars.jpg mars-sky.jpg\n그리고 나서, mars.jpg 이전 파일을 삭제하고 신규 파일 두개를 추가한다:\n$ git rm mars.jpg\n$ git add mars-surface.jpg\n$ git add mars-sky.jpg\n$ git commit -m \"Use two images: surface and sky\"\n\n[master 94ae08c] Use two images: surface and sky\n 2 files changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 mars-sky.jpg\n rename mars.jpg =&gt; mars-surface.jpg (100%)\n이제 화성 이미지 파일 두개가 저장소에서 확인되지만 mars.jpg 파일은 더이상 존재하지 않는다.\n\n\n\n\n\n\n\n\n\n일반적인 작업 시간\n\n\n\n원격 Git 저장소를 활용하여 공동 프로젝트로 작업하는 컴퓨터 앞에 않아있다. 작업시간동안에 다음 동작을 취하지만, 작업순서는 다르다:\n\n변경한다(make change): numbers.txt 텍스트 파일에 숫자 100을 추가.\n원격 저장소 갱신시키기(Update remote): 로컬 저장소와 매칭되어 동기화시킴.\n축하하기(Celebrate): 맥주로 성공을 자축함.\n로컬 저장소 갱신시키기(Update local): 원격 저장소와 매칭되어 동기화시킴.\n변경사항 준비영역으로 보내기(Stage change): 커밋대상으로 추가하기.\n변경사항(Commit change): 로컬 저장소에 커밋하기\n\n어떤 순서로 작업을 수행해야 충돌이 날 가능성을 최소화할 수 있을까? 아래표 action 칼럼에 순서대로 상기 명령어를 적어 본다.\n작업 순서를 정했으면, command 칼럼에 대응되는 명령어를 적어본다. 일부 단계를 시작하는데 도움이 되도록 채워져 있다.\n\n\n\norder\naction . . . . . . . . . .\ncommand . . . . . . . . . .\n\n\n\n\n1\n\n\n\n\n2\n\necho 100 &gt;&gt; numbers.txt\n\n\n3\n\n\n\n\n4\n\n\n\n\n5\n\n\n\n\n6\nCelebrate!\nAFK\n\n\n\n\n해답\n\n\n\n\n\n\n\n\norder\naction . . . . . .\ncommand . . . . . . . . . . . . . . . . . . .\n\n\n\n\n1\nUpdate local\ngit pull origin master\n\n\n2\nMake changes\necho 100 &gt;&gt; numbers.txt\n\n\n3\nStage changes\ngit add numbers.txt\n\n\n4\nCommit changes\ngit commit -m \"Add 100 to numbers.txt\"\n\n\n5\nUpdate remote\ngit push origin master\n\n\n6\nCelebrate!\nAFK",
    "crumbs": [
      "버전제어와 협업",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>충돌</span>"
    ]
  },
  {
    "objectID": "git-open.html",
    "href": "git-open.html",
    "title": "20  공개 과학",
    "section": "",
    "text": "“공개(open)”의 반대는 “폐쇄(closed)”가 아니다. (The opposite of “open” isn’t “closed”.) “공개(open)”의 반대는 “망한(broken)” 것이다. (The opposite of “open” is “broken”.)\n\n\n\n정보의 자유 공유는 과학에서 이상적일지 모르지만, 현실은 좀더 복잡하다. 현재, 보통 실무사례는 다음과 같다:\n\n과학자가 데이터를 수집하고 학과에 가끔 백업되는 컴퓨터에 저장한다.\n데이터를 분석하기 위해서 작은 프로그램을 작성하고 수정한다. (프로그램도 연구원의 로컬 노트북에 저장된다.)\n적당한 분석 결과가 생성되자 마자, 작성해서 논문을 제출한다. 데이터를 논문에 포함할 수도 있다. (점점 많은 저널이 데이터를 요구한다.) 하지만, 아마도 프로그램 코드는 포함하지 않을 것이다.\n시간이 흐른다.\n저널에서는 연구원 분야의 익명으로된 소수의 사람들에게서 받아 검토(review)결과를 보낸다. 검토 결과를 충족하도록 논문을 수정한다. 수정하는 동안에 앞서 작성한 프로그램, 스크립트를 변경해서 다시 제출한다.\n좀더 많은 시간이 흐른다.\n종국에 논문이 출판된다. 논문에 데이터 온라인 사본 링크를 포함할 수도 있다. 하지만, 논문은 유료로 돈을 내야만 접근가능하다는 장벽(paywall)에 막혀있다: 개인 혹은 기관 접근 권한을 가진 사람만이 논문을 읽을 수 있다.\n\n하지만, 점점 더 많은 과학자들에게, 프로세스는 다음과 같다:\n\n과학자가 수집한 데이터가 수집되는 즉시, figshare 혹은 Zenodo같은 공개 접근 저장소에 저장된다. 그리고 디지털 객체 식별자(Digital Object Identifier, DOI)가 부여된다. 혹은 데이터를 이미 게시하고 Dryad에 저장한다.\n과학자가 작업물을 보관할 저장소를 GitHub에 생성한다.\n분석작업을 수행하면서, 스크립트의 변경사항을 (아마도 몇몇 산출 결과도 포함해서) 저장소에 푸쉬한다. 논문을 위한 저장소를 다목적으로 사용한다; 이 저장소가 다른 동료 과학자와 협업하는 허브가 된다.\n논문 상태에 만족할 정도로 진행되면, arXiv 혹은 다른 사전 출력 서비스에 게시하고, 다른 동료 과학자를 초대해서 피드백을 받는다.\n피드백에 기초해서 저널에 논문을 마지막으로 제출하기 전 몇번의 수정사항을 게시할 수도 있다.\n출판된 논문은 사전출판논문, 코드, 그리고 데이터 저장소의 링크를 포함한다. 그렇게 함으로써 다른 과학자가 본인 연구의 시작점으로 삼아서 연구를 쉽게 연결해서 수행할 수 있게 된다.\n\n이러한 공개 연구 모형은 발견을 가속시킨다. 연구 작업이 더 많이 공개될수록, 더 많이 인용되고 재사용된다(the more widely it is cited and re-used). 하지만, 이런 방식으로 작업하고 연구하고자 하는 사람들은 실무에서 “공개(open)”가 정확하게 의미하는 바에 대해서 몇가지 결정을 내릴 필요가 있다. 공개 과학(Open Science)에 관한 다른 측면에 대해서 이 책을 참고한다.\n이것이 버젼 제어(version control)를 가르치는 (많은) 이유 중의 하나다. 버젼제어가 꾸준히 사용될 때, 컴퓨터 작업에 대한 공유가능한 전자연구노트로 활동함으로써 “방법”에 대한 질문에 답을 한다:\n\n누가 언제 무엇을 했는지를 포함해서, 작업에 대한 개념적 단계가 문서화된다. 모든 단계는 (커밋 ID)식별자로 도장이 찍힌다. 식별자는 의도와 목적을 갖는 중복되지 않고 유일하다.\n정당성(rationale), 아이디어, 다른 지적 작업에 대한 문서화를 이것에서 파생된 변경사항과 묶을 수 있다.\n중복되지 않고 유일하며 복구가능한 방식으로 컴퓨터 작업 결과물을 얻어서 연구에 사용할 것을 조회할 수 있다.\nGit같은 분산된 버젼제어 시스템으로, 버젼제어 저장소는 영속성을 쉽게 얻을 수 있고, 전체 이력을 담아낼 수 있다.\n\n\n\n\n\n\n\n코드를 인용가능하게 만들기\n\n\n\n버젼제어 저장소에 올라온 모든 것(데이터, 코드, 논문 등)은 인용가능한 객체로 변환시킬 수 있다. lesson 12: 인용(Citation)에서 인용하는 방법에 대해서 학습하게 된다.\n\n\n\n\n\n\n\n\n내 작업을 어떻게 재현가능하게 만들 수 있을까?\n\n\n\n연구실 동료중 한명에게 논문에 나온 내용과 웹으로만 최근에 본인이 성취한 결과를 재현할 수 있는지 물어본다. 동료 결과물 중 하나에 대해서도 같은 작업을 수행해 본다. 그리고 나서, 일하고 있는 연구실에 나온 결과물에 대해서도 시도를 해본다.\n\n\n\n\n\n\n\n\n적절한 데이터 저장소를 찾는 방법?\n\n\n\n2~3분정도 인터넷을 검색하고 앞에서 언급된 데이터 저장소를 조사해 본다: Figshare, Zenodo, Dryad. 전공분야에 따라, 본인 전공분야별로 잘 알려진 저장소가 도움이 될 수 있다. Nature에서 추천한 데이터 저장소도 유용할 수 있다.\n주변 동료와 현재 작업에 사용하고 있는 데이터 저장소에 대해서 토론해 보고, 이유도 설명해 보자.",
    "crumbs": [
      "버전제어와 협업",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>공개 과학</span>"
    ]
  },
  {
    "objectID": "git-licensing.html",
    "href": "git-licensing.html",
    "title": "21  라이선싱",
    "section": "",
    "text": "21.1 소프트웨어 라이선스\n소스코드, 원고, 다른 창의적 저작물을 갖는 저장소가 공개될 때, 저장소 기반 디렉토리에 LICENSE 혹은 LICENSE.txt 파일을 포함해서 콘텐츠가 어떤 라이선스로 이용가능한지를 명확히 기술해야된다. 이유는 소스코드가 창의적 저작물로서, 자동적으로 지적재산(따라서 저작권)보호에 대상에 부합되기 때문이다. 자유로이 이용가능한 것으로 보여지거나, 명시적으로 광고되는 코드는 그런 보호를 유예하지 않는다. 따라서, 라이선스 문장이 없는 코드를 (재)사용하는 누구나 스스로 위험에 처하게 된다. 왜냐하면 소프트웨어 코드 저자가 항상 일방향으로 재사용을 불법화할 수 있기 때문이다. 즉, 저작권 소유자가 당신을 저작권법 위반으로 고소할 수 있다.\n라이선스는 그렇지 않다면 보유하지 못할 권리를 다른 사람(라이선스 허여자, licensee)에게 부여함으로써 이 문제를 해결한다. 어떤 조건아래서 무슨 권리가 부여될지는 라이선스마다 다소 차이가 난다. 독점적 라이선스와 대조하여, Open Source Initiative에서 공인된 오픈 라이선스(open licences)는 최소한 다음에 나온 권리를 모두 부여한다. 이런 권리를 오픈 소스 정의(Open Source Definition)로 부른다.:\n특히, 지금까지 라이선스 몇개가 인기를 얻고 있는데, choosealicense.com 웹사이트에서 본인 상황에 적합한 일반적인 라이선스를 선택하는데 도움이 된다. 주요한 고려사항에는 다음이 포함된다:\n적절한 라이선스를 가장 잘 선택하는 것이 상당히 많은 가능한 조합이 있어 주눅이 들 수도 있다. 실무에서, 일부 라이선스만 지금까지 가장 인기가 있고, 다음이 그 범주에 포함된다:\nGPL은 다른 대부분의 공개소스 라이선스와 다른데, 전염성이 있는(infective) 특징이 있다: 코드의 수정된 버젼을 배포하는 누구나 혹은 GPL 코드를 포함한 어느 것이든지, 자신의 코드도 동일하게 자유로이 공개가능하게 만들어야 한다.\n흔히 사용되는 라이선서를 선택하는 것이 기여자나 사용자의 삶을 편하게 한다. 왜냐하면, 기여자나 사용자 모두 해당 라이선스에 친숙해서 사용할 때 상당한 양의 전문용어를 꼼꼼히 살펴볼 필요가 없기 때문이다.\nOpen Source Initiative와 Free Software Foundation 모두 좋은 선택이 될 수 있는 라이선스 목록을 유지관리하고 있다.\n코드를 작성하는 과학자 관점에서 라이선싱과 라이선싱 선택지에 대한 전반적인 정보를 이 기사를 통해서 살펴볼 수 있다.\n결국 가장 중요한 것은 라이선스가 무엇인지에 대해 분명한 문장이 있는지와 라이선스가 OSI와 FSF에서 승인되고 이미 검증된 것인지 여부다. 또한, 저장소에 공개된 것이 아닐지라도, 처음부터 최선으로 라이선스를 선택해야 된다. 결정을 미루는 것은 나중에 더 복잡하게 된다. 왜냐하면, 매번 새로운 협력자가 기여하기 시작하면, 협력자도 저작권을 갖게된다. 따라서, 라이선스를 고르자 마자, 승인을 득해야할 필요가 있기 때문이다.",
    "crumbs": [
      "버전제어와 협업",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>라이선싱</span>"
    ]
  },
  {
    "objectID": "git-licensing.html#git-license-sw",
    "href": "git-licensing.html#git-license-sw",
    "title": "21  라이선싱",
    "section": "",
    "text": "소스코드는 제약없이 이용가능하고, 사용되고, 재배포될 수 있다. 종합 배포의 일부로서도 포함된다.\n변형 혹은 다른 파생 저작물도 허락되고, 또한 재배포될 수 있다.\n이런 권리를 누가 받느냐의 질문이 차별의 조건이 되지 않는다. 예를 들어 상업적 혹은 학술적처럼 노력 분야에 의해서가 아님도 포함된다.\n\n\n\n특허권을 주장하고자 하는가?\n파생 저작물을 배포하는데 다른 사람도 소스코드를 배포하도록 강제할 것인가?\n라이선싱하는 콘텐트가 소스코드인가?\n이왕이면 소스코드도 라이선스할 것인가?\n\n\n\nGNU 일반공중 라이선스 (GPL),\nMIT 라이선스,\nBSD 라이선스,\n아파치 라이선스, 버젼 2.0.\n\n\n\n\n\n\n\n\n\n\n\n\n본인이 오픈 라이선스를 사용할 수 있나요?\n\n\n\n여러분이 작성하고 있는 소프트웨어에 오픈소스 소프트웨어 라이선스를 적용할 수 있는지 알아본다. 여러분이 라이선스 적용을 일방적으로 할 수 있는가? 혹은 여러분의 기관이나 조직의 다른 사람에게서 허락이 필요한가? 만약 그렇다면 누굴까?\n\n\n\n\n\n\n\n\n본인은 어떤 라이선스를 이미 승인했나요?\n\n\n\n(금번 워크샵을 포함해서) 매일 사용하는 대다수 소프트웨어는 오픈-소스 소프트웨어로 출시되었다. 아래 목록 혹은 본인이 직접 고른 GitHub 사이트에서 프로젝트를 하나 고른다. 라이선스를 찾아(보통 LICENSE 혹은 COPYING 이름이 붙은 파일)보고, 소프트웨어 사용을 어떻게 제약하는지 살펴보자. 이번 세션에서 논의된 라이선스 중 하나인가? 차이점은 어떻게 나는가?\n\nGit, 소스코드 관리 도구\nCPython, 파이썬 언어 구현\nJupyter, 웹기반 파이썬 노트북 프로젝트\nEtherPad, 실시간 협업 편집기",
    "crumbs": [
      "버전제어와 협업",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>라이선싱</span>"
    ]
  },
  {
    "objectID": "git-licensing.html#git-licensing-contents",
    "href": "git-licensing.html#git-licensing-contents",
    "title": "21  라이선싱",
    "section": "21.2 콘텐츠 라이선스",
    "text": "21.2 콘텐츠 라이선스\n만약 저장소 콘텐츠가 소프트웨어가 아닌 데이터, 창의적 저작물(매뉴얼, 기술 보고서, 원고) 같은 연구제품이 포함되면, 소프트웨어를 위해 설계된 라이선스 대부분은 적합하지는 못하다.\n\n데이터: 대부분 국가사법권에서 데이터 유형 대부분은 자연에 대한 사실로 간주된다. 그럼으로, 저작권 보호를 받을 자격이 없다.(단, 아마도 사진과 의료영상정보 등은 예외) 따라서, 저작자 표시로 사회적 혹은 학자적 기대치를 알리려고, 저작권을 정의로 주장하는 방식으로 라이선스를 사용하는 것은 단지 법적으로 혼탁한 상황만 조장할 뿐이다. 크리에이티브 커먼즈 제로(Creative Commons Zero, CC0) 처럼 공중도메인 권리포기를 지지하는 법적 표시를 분명히 하는 것이 더 낫다. Dryad 데이터 저장소는 사실 이를 요구하고 있다.\n창의적 저작물(Creative works): 매뉴얼, 보고서, 원고, 기타 창의적 저작물은 지적재산 보호 대상이 된다. 따라서 소프트웨어와 마찬가지로 자동으로 저작권으로 보호된다. 크리에이티브 커먼즈(Creative Commons) 조직이 기본 제약사항 4개를 조합해서 라이선스 집합을 마련했다:\n\n저작자 표시(Attribution): 파생 저작물에 대해서 최초 저작자의 이름, 출처 등의 정보를 반드시 표시해야 한다.\n변경 금지(No Derivative): 저작물을 복사할 수도 있으나 저작물을 변경 혹은 저작물을 이용하여 2차적 저작물로 제작을 금한다.\n동일조건변경허락(Share Alike): 2차적 저작물을 제작할 수 있으나, 2차적 저작물은 원래 저작물과 동일한 라이선스를 적용한다.\n비영리(Noncommercial): 저작물을 영리 목적으로 사용할 수 없음. 영리 목적을 위해서는 별도의 계약이 필요하다.\n\n\n출처표시 (CC-BY)와 동일조건변경허락(CC-BY-SA) 라이선스만이 “오픈 라이선스”로 간주된다.\n소프트웨어 카펜트리는 가능하면 폭넓게 재사용될 수 있도록 수업자료에 대해서는 CC-BY, 코드에는 MIT 라이선스를 사용한다. 다시 한번, 가장 중요한 것은 프로젝트 루트 디렉토리에 있는 LICENSE 파일에 라이선스가 무엇인지 분명하게 언급한다. 본인 프로젝트를 참조하는 방법을 기술하는데 CITATION 혹은 CITATION.txt 파일을 포함할 수도 있다. 소프트웨어 카펜트리 사례는 다음과 같다:\nTo reference Software Carpentry in publications, please cite both of the following:\n\nGreg Wilson: \"Software Carpentry: Lessons Learned\". arXiv:1307.5448, July 2013.\n\n@online{wilson-software-carpentry-2013,\n  author      = {Greg Wilson},\n  title       = {Software Carpentry: Lessons Learned},\n  version     = {1},\n  date        = {2013-07-20},\n  eprinttype  = {arxiv},\n  eprint      = {1307.5448}\n}",
    "crumbs": [
      "버전제어와 협업",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>라이선싱</span>"
    ]
  },
  {
    "objectID": "git-hosting.html",
    "href": "git-hosting.html",
    "title": "22  호스팅",
    "section": "",
    "text": "저작물이나 작업을 공개하고자 하는 그룹에서 가지는 두번째 큰 질문은 코드와 데이터를 어디에 호스팅할지 정하는 것이다. 방법중 하나는 연구실, 학과, 혹은 대학이 서버를 제공하여 계정관리와 백업 등등을 관리하는 것이다. 주된 장점은 누가 무엇을 소유하는지 명확하다. 특히 민감한 정보(예를 들어, 사람에 대한 실험정보 혹은 특허 출원에 사용될 수도 있는 정보)가 있다면 중요하다. 큰 단점은 서비스 제공 비용과 수명이다: 데이터를 수집하는데 10년을 보낸 과학자가 지금부터 10년 후에도 여전히 이용가능하기를 원하지만, 학교 인프라를 지원하는 대부분의 연구기금의 수명이 턱없이 짧다.\n또다른 선택지는 도메인을 구입하고 호스팅하는데 ISP(인터넷 서비스 제공자, Internet service provider)에 비용을 지불한다. 이 접근법은 개인이나 그룹에게 좀더 많은 제어권을 주고 학교나 기관을 바꿀 때 생기는 문제도 비켜갈 수 있다. 하지만, 위나 아래 선택지보다 초기 설정하는데 더 많은 시간과 노력이 요구된다.\n세번째 선택지는 GitHub, BitBucket, 혹은 SourceForge 같은 공개 호스팅 서비스를 채용하는 것이다. 웹 인터페이스를 통해서 저장소 코드를 생성하고, 보고, 편집할 수 있게 한다. 이러한 서비스는 이슈추적, 위키 페이지, 이메일 통보, 코드 리뷰를 포함한 커뮤니케이션과 프로젝트 관리 도구도 제공한다. 이러한 서비스는 규모의 경제와 네트워크 효과로 모두 이익을 볼 수 있다: 즉, 동일한 표준을 갖는 작은 많은 서비스를 실행하는 것보다 큰 서비스 하나를 실행하는 것이 더 쉽다. 또한, 사람들이 협업하기도 더 쉽다. 대중적인 서비스를 사용하면 이미 동일한 서비스를 사용하는 커뮤니티와 본인 프로젝트를 연결하는데 도움이 된다.\n예로서, 소프트웨어 카펜트리는 GitHub에 있어서, 해당 페이지에 대한 소스코드를 찾아볼 수 있다. GitHub 계정을 갖는 누구나 해당 페이지에 변경사항을 제안할 수 있다.\nGitHub 저장소에서 Zenodo에 릴리스(release)를 연결하면 DOI를 부여할 수도 있다. 예를 들어, 10.5281/zenodo.57467이 “Git 소개”에 대해 주조된 DOI다.\n규모가 크고 잘 정립된 서비스를 사용하는 것이 빠르게 강력한 도구의 장점을 흡수하는데 도움을 줄 수도 있다. 지속적 통합(Continuous integration, CI)이 그런 도구 중 하나로 자동으로 소프트웨어 빌드를 돌리고 코드가 커밋되거나 풀요청이 제출될 때마다 실행된다. 온라인 호스팅 서비스와 CI를 직접 통합이 의미하는 바는, 어떤 풀요청에도 해당 정보가 존재해서 코드 완결성과 품질 표준을 유지하는데 도움을 준다. 여전히 CI가 자가 구축한 호스팅 상황에도 이용가능하지만, 온라인 서비스 사용과 연계되면 초기설정과 유지보수 업무를 줄일 수 있다. 더욱이, 이러한 도구가 오픈소스 프로젝트에 무료로 제공되기도 한다. 사설 저장소에 대해서만 비용 일부를 지불하고 이용가능하다.\n\n\n\n\n\n\n제도적 장벽 (Institutional Barriers)\n\n\n\n공유가 과학에는 이상적이지만, 많은 기관에서 공유에 제약을 가한다. 예를 들어 잠재적으로 특허가능한 지적재산을 보호하는데 말이다. 만약 여러분이 그런 제약과 마주한다면, 특정 프로젝트 혹은 도메인에 예외를 요청하거나, 제도 혁파를 통해서 더 공개된 과학을 지지하도록 좀더 앞서 나가는데 근본적인 동기에 관해 질의하는 것이 더 생산적일 수 있다.\n\n\n\n\n\n\n\n\n본인 작업을 공개할 수 있을까?\n\n\n\n본인 작업을 공개 저장소에 공개할 수 있는지 알아보자. 공개 작업을 일방적으로 할 수 있을까? 혹은 속한 조직의 누군가로부터 허락이 필요한가? 만약 그렇다면 조직의 누굴까?\n\n\n\n\n\n\n\n\n본인 작업을 어디에 공개할 수 있을까?\n\n\n\n본인 논문, 데이터, 소프트웨어를 공유하려면 이용가능한 저장소가 소속기관에 갖추어져 있는가? 소속기관 저장소는 arXiV, figshare, GitHub or GitLab와 같은 데이터 저장소 서비스와 비교하여 어떤 차이점이 있는가?",
    "crumbs": [
      "버전제어와 협업",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>호스팅</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "참고문헌",
    "section": "",
    "text": "Stevens, Stanley Smith. 1946. “On the Theory of Scales of\nMeasurement.” Science 103 (2684): 677–80.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023.\nR for Data Science. \" O’Reilly Media, Inc.\".\n\n\nWiener, Norbert. 1921. “A New Theory of Measurement: A Study in\nthe Logic of Mathematics.” Proceedings of the London\nMathematical Society 2 (1): 181–205.\n\n\n이경화. 2020. 고등학교 실용통계. 통계청 통계교육원.",
    "crumbs": [
      "참고문헌"
    ]
  }
]